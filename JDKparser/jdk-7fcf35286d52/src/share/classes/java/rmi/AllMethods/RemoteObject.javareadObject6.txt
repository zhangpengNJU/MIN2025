/**
 * <code>readObject</code> for custom serialization.
 *
 * <p>This method reads this object's serialized form for this class
 * as follows:
 *
 * <p>The <code>readUTF</code> method is invoked on <code>in</code>
 * to read the external ref type name for the <code>RemoteRef</code>
 * instance to be filled in to this object's <code>ref</code> field.
 * If the string returned by <code>readUTF</code> has length zero,
 * the <code>readObject</code> method is invoked on <code>in</code>,
 * and than the value returned by <code>readObject</code> is cast to
 * <code>RemoteRef</code> and this object's <code>ref</code> field is
 * set to that value.
 * Otherwise, this object's <code>ref</code> field is set to a
 * <code>RemoteRef</code> instance that is created of an
 * implementation-specific class corresponding to the external ref
 * type name returned by <code>readUTF</code>, and then
 * the <code>readExternal</code> method is invoked on
 * this object's <code>ref</code> field.
 *
 * <p>If the external ref type name is
 * <code>"UnicastRef"</code>, <code>"UnicastServerRef"</code>,
 * <code>"UnicastRef2"</code>, <code>"UnicastServerRef2"</code>,
 * or <code>"ActivatableRef"</code>, a corresponding
 * implementation-specific class must be found, and its
 * <code>readExternal</code> method must read the serial data
 * for that external ref type name as specified to be written
 * in the <b>serialData</b> documentation for this class.
 * If the external ref type name is any other string (of non-zero
 * length), a <code>ClassNotFoundException</code> will be thrown,
 * unless the implementation provides an implementation-specific
 * class corresponding to that external ref type name, in which
 * case this object's <code>ref</code> field will be set to an
 * instance of that implementation-specific class.
 */
private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    String refClassName = in.readUTF();
    if (refClassName == null || refClassName.length() == 0) {
        /*
             * No reference class name specified, so construct
             * remote reference from its serialized form.
             */
        ref = (RemoteRef) in.readObject();
    } else {
        /*
             * Built-in reference class specified, so delegate to
             * internal reference class to initialize its fields from
             * its external form.
             */
        String internalRefClassName = RemoteRef.packagePrefix + "." + refClassName;
        Class<?> refClass = Class.forName(internalRefClassName);
        try {
            ref = (RemoteRef) refClass.newInstance();
        /*
                 * If this step fails, assume we found an internal
                 * class that is not meant to be a serializable ref
                 * type.
                 */
        } catch (InstantiationException e) {
            throw new ClassNotFoundException(internalRefClassName, e);
        } catch (IllegalAccessException e) {
            throw new ClassNotFoundException(internalRefClassName, e);
        } catch (ClassCastException e) {
            throw new ClassNotFoundException(internalRefClassName, e);
        }
        ref.readExternal(in);
    }
}