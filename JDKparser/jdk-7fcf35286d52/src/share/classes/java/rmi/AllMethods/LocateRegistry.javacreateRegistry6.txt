/**
 * Creates and exports a <code>Registry</code> instance on the local
 * host that uses custom socket factories for communication with that
 * instance.  The registry that is created listens for incoming
 * requests on the given <code>port</code> using a
 * <code>ServerSocket</code> created from the supplied
 * <code>RMIServerSocketFactory</code>.
 *
 * <p>The <code>Registry</code> instance is exported as if
 * the static {@link
 * UnicastRemoteObject#exportObject(Remote,int,RMIClientSocketFactory,RMIServerSocketFactory)
 * UnicastRemoteObject.exportObject} method is invoked, passing the
 * <code>Registry</code> instance, the specified <code>port</code>, the
 * specified <code>RMIClientSocketFactory</code>, and the specified
 * <code>RMIServerSocketFactory</code> as arguments, except that the
 * <code>Registry</code> instance is exported with a well-known object
 * identifier, an {@link ObjID} instance constructed with the value
 * {@link ObjID#REGISTRY_ID}.
 *
 * @param port port on which the registry accepts requests
 * @param csf  client-side <code>Socket</code> factory used to
 *      make connections to the registry
 * @param ssf  server-side <code>ServerSocket</code> factory
 *      used to accept connections to the registry
 * @return the registry
 * @exception RemoteException if the registry could not be exported
 * @since 1.2
 */
public static Registry createRegistry(int port, RMIClientSocketFactory csf, RMIServerSocketFactory ssf) throws RemoteException {
    return new RegistryImpl(port, csf, ssf);
}