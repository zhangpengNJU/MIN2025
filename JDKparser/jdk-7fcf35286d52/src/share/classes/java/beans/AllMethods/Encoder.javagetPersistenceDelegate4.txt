/**
 * Returns the persistence delegate for the given type.
 * The persistence delegate is calculated by applying
 * the following rules in order:
 * <ol>
 * <li>
 * If a persistence delegate is associated with the given type
 * by using the {@link #setPersistenceDelegate} method
 * it is returned.
 * <li>
 * A persistence delegate is then looked up by the name
 * composed of the the fully qualified name of the given type
 * and the "PersistenceDelegate" postfix.
 * For example, a persistence delegate for the {@code Bean} class
 * should be named {@code BeanPersistenceDelegate}
 * and located in the same package.
 * <pre>
 * public class Bean { ... }
 * public class BeanPersistenceDelegate { ... }</pre>
 * The instance of the {@code BeanPersistenceDelegate} class
 * is returned for the {@code Bean} class.
 * <li>
 * If the type is {@code null},
 * a shared internal persistence delegate is returned
 * that encodes {@code null} value.
 * <li>
 * If the type is a {@code enum} declaration,
 * a shared internal persistence delegate is returned
 * that encodes constants of this enumeration
 * by their names.
 * <li>
 * If the type is a primitive type or the corresponding wrapper,
 * a shared internal persistence delegate is returned
 * that encodes values of the given type.
 * <li>
 * If the type is an array,
 * a shared internal persistence delegate is returned
 * that encodes an array of the appropriate type and length,
 * and each of its elements as if they are properties.
 * <li>
 * If the type is a proxy,
 * a shared internal persistence delegate is returned
 * that encodes a proxy instance by using
 * the {@link java.lang.reflect.Proxy#newProxyInstance} method.
 * <li>
 * If the {@link BeanInfo} for this type has a {@link BeanDescriptor}
 * which defined a "persistenceDelegate" attribute,
 * the value of this named attribute is returned.
 * <li>
 * In all other cases the default persistence delegate is returned.
 * The default persistence delegate assumes the type is a <em>JavaBean</em>,
 * implying that it has a default constructor and that its state
 * may be characterized by the matching pairs of "setter" and "getter"
 * methods returned by the {@link Introspector} class.
 * The default constructor is the constructor with the greatest number
 * of parameters that has the {@link ConstructorProperties} annotation.
 * If none of the constructors has the {@code ConstructorProperties} annotation,
 * then the nullary constructor (constructor with no parameters) will be used.
 * For example, in the following code fragment, the nullary constructor
 * for the {@code Foo} class will be used,
 * while the two-parameter constructor
 * for the {@code Bar} class will be used.
 * <pre>
 * public class Foo {
 *     public Foo() { ... }
 *     public Foo(int x) { ... }
 * }
 * public class Bar {
 *     public Bar() { ... }
 *     &#64;ConstructorProperties({"x"})
 *     public Bar(int x) { ... }
 *     &#64;ConstructorProperties({"x", "y"})
 *     public Bar(int x, int y) { ... }
 * }</pre>
 * </ol>
 *
 * @param type  the class of the objects
 * @return the persistence delegate for the given type
 *
 * @see #setPersistenceDelegate
 * @see java.beans.Introspector#getBeanInfo
 * @see java.beans.BeanInfo#getBeanDescriptor
 */
public PersistenceDelegate getPersistenceDelegate(Class<?> type) {
    PersistenceDelegate pd = this.finder.find(type);
    if (pd == null) {
        pd = MetaData.getPersistenceDelegate(type);
        if (pd != null) {
            this.finder.register(type, pd);
        }
    }
    return pd;
}