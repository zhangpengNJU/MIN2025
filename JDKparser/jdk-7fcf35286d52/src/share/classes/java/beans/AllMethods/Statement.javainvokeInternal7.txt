private Object invokeInternal() throws Exception {
    Object target = getTarget();
    String methodName = getMethodName();
    if (target == null || methodName == null) {
        throw new NullPointerException((target == null ? "target" : "methodName") + " should not be null");
    }
    Object[] arguments = getArguments();
    if (arguments == null) {
        arguments = emptyArray;
    }
    // Class.forName() won't load classes outside
    // of core from a class inside core. Special
    // case this method.
    if (target == Class.class && methodName.equals("forName")) {
        return ClassFinder.resolveClass((String) arguments[0], this.loader);
    }
    Class<?>[] argClasses = new Class<?>[arguments.length];
    for (int i = 0; i < arguments.length; i++) {
        argClasses[i] = (arguments[i] == null) ? null : arguments[i].getClass();
    }
    AccessibleObject m = null;
    if (target instanceof Class) {
        /*
            For class methods, simluate the effect of a meta class
            by taking the union of the static methods of the
            actual class, with the instance methods of "Class.class"
            and the overloaded "newInstance" methods defined by the
            constructors.
            This way "System.class", for example, will perform both
            the static method getProperties() and the instance method
            getSuperclass() defined in "Class.class".
            */
        if (methodName.equals("new")) {
            methodName = "newInstance";
        }
        // Provide a short form for array instantiation by faking an nary-constructor.
        if (methodName.equals("newInstance") && ((Class) target).isArray()) {
            Object result = Array.newInstance(((Class) target).getComponentType(), arguments.length);
            for (int i = 0; i < arguments.length; i++) {
                Array.set(result, i, arguments[i]);
            }
            return result;
        }
        if (methodName.equals("newInstance") && arguments.length != 0) {
            // The Character class, as of 1.4, does not have a constructor
            // which takes a String. All of the other "wrapper" classes
            // for Java's primitive types have a String constructor so we
            // fake such a constructor here so that this special case can be
            // ignored elsewhere.
            if (target == Character.class && arguments.length == 1 && argClasses[0] == String.class) {
                return new Character(((String) arguments[0]).charAt(0));
            }
            try {
                m = ConstructorFinder.findConstructor((Class) target, argClasses);
            } catch (NoSuchMethodException exception) {
                m = null;
            }
        }
        if (m == null && target != Class.class) {
            m = getMethod((Class) target, methodName, argClasses);
        }
        if (m == null) {
            m = getMethod(Class.class, methodName, argClasses);
        }
    } else {
        /*
            This special casing of arrays is not necessary, but makes files
            involving arrays much shorter and simplifies the archiving infrastrcure.
            The Array.set() method introduces an unusual idea - that of a static method
            changing the state of an instance. Normally statements with side
            effects on objects are instance methods of the objects themselves
            and we reinstate this rule (perhaps temporarily) by special-casing arrays.
            */
        if (target.getClass().isArray() && (methodName.equals("set") || methodName.equals("get"))) {
            int index = ((Integer) arguments[0]).intValue();
            if (methodName.equals("get")) {
                return Array.get(target, index);
            } else {
                Array.set(target, index, arguments[1]);
                return null;
            }
        }
        m = getMethod(target.getClass(), methodName, argClasses);
    }
    if (m != null) {
        try {
            if (m instanceof Method) {
                return MethodUtil.invoke((Method) m, target, arguments);
            } else {
                return ((Constructor) m).newInstance(arguments);
            }
        } catch (IllegalAccessException iae) {
            throw new Exception("Statement cannot invoke: " + methodName + " on " + target.getClass(), iae);
        } catch (InvocationTargetException ite) {
            Throwable te = ite.getTargetException();
            if (te instanceof Exception) {
                throw (Exception) te;
            } else {
                throw ite;
            }
        }
    }
    throw new NoSuchMethodException(toString());
}