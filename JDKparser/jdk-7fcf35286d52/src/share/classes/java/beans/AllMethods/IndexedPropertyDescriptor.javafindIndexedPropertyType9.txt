private Class<?> findIndexedPropertyType(Method indexedReadMethod, Method indexedWriteMethod) throws IntrospectionException {
    Class<?> indexedPropertyType = null;
    if (indexedReadMethod != null) {
        Class[] params = getParameterTypes(getClass0(), indexedReadMethod);
        if (params.length != 1) {
            throw new IntrospectionException("bad indexed read method arg count");
        }
        if (params[0] != Integer.TYPE) {
            throw new IntrospectionException("non int index to indexed read method");
        }
        indexedPropertyType = getReturnType(getClass0(), indexedReadMethod);
        if (indexedPropertyType == Void.TYPE) {
            throw new IntrospectionException("indexed read method returns void");
        }
    }
    if (indexedWriteMethod != null) {
        Class[] params = getParameterTypes(getClass0(), indexedWriteMethod);
        if (params.length != 2) {
            throw new IntrospectionException("bad indexed write method arg count");
        }
        if (params[0] != Integer.TYPE) {
            throw new IntrospectionException("non int index to indexed write method");
        }
        if (indexedPropertyType == null || params[1].isAssignableFrom(indexedPropertyType)) {
            indexedPropertyType = params[1];
        } else if (!indexedPropertyType.isAssignableFrom(params[1])) {
            throw new IntrospectionException("type mismatch between indexed read and indexed write methods: " + getName());
        }
    }
    Class<?> propertyType = getPropertyType();
    if (propertyType != null && (!propertyType.isArray() || propertyType.getComponentType() != indexedPropertyType)) {
        throw new IntrospectionException("type mismatch between indexed and non-indexed methods: " + getName());
    }
    return indexedPropertyType;
}