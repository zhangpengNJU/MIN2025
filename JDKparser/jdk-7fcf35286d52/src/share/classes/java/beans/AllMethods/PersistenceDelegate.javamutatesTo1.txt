/**
 * Returns true if an <em>equivalent</em> copy of <code>oldInstance</code> may be
 * created by applying a series of statements to <code>newInstance</code>.
 * In the specification of this method, we mean by equivalent that the modified instance
 * is indistinguishable from <code>oldInstance</code> in the behavior
 * of the relevant methods in its public API. [Note: we use the
 * phrase <em>relevant</em> methods rather than <em>all</em> methods
 * here only because, to be strictly correct, methods like <code>hashCode</code>
 * and <code>toString</code> prevent most classes from producing truly
 * indistinguishable copies of their instances].
 * <p>
 * The default behavior returns <code>true</code>
 * if the classes of the two instances are the same.
 *
 * @param oldInstance The instance to be copied.
 * @param newInstance The instance that is to be modified.
 * @return True if an equivalent copy of <code>newInstance</code> may be
 *         created by applying a series of mutations to <code>oldInstance</code>.
 */
protected boolean mutatesTo(Object oldInstance, Object newInstance) {
    return (newInstance != null && oldInstance != null && oldInstance.getClass() == newInstance.getClass());
}