protected Expression instantiate(Object oldInstance, Encoder out) {
    Class<?> type = oldInstance.getClass();
    java.lang.reflect.Proxy p = (java.lang.reflect.Proxy) oldInstance;
    // This unappealing hack is not required but makes the
    // representation of EventHandlers much more concise.
    java.lang.reflect.InvocationHandler ih = java.lang.reflect.Proxy.getInvocationHandler(p);
    if (ih instanceof EventHandler) {
        EventHandler eh = (EventHandler) ih;
        Vector<Object> args = new Vector<>();
        args.add(type.getInterfaces()[0]);
        args.add(eh.getTarget());
        args.add(eh.getAction());
        if (eh.getEventPropertyName() != null) {
            args.add(eh.getEventPropertyName());
        }
        if (eh.getListenerMethodName() != null) {
            args.setSize(4);
            args.add(eh.getListenerMethodName());
        }
        return new Expression(oldInstance, EventHandler.class, "create", args.toArray());
    }
    return new Expression(oldInstance, java.lang.reflect.Proxy.class, "newProxyInstance", new Object[] { type.getClassLoader(), type.getInterfaces(), ih });
}