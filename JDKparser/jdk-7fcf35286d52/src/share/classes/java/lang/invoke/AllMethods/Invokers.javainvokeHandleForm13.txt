/**
 * Returns an adapter for invokeExact or generic invoke, as a MH or constant pool linker.
 * If !customized, caller is responsible for supplying, during adapter execution,
 * a copy of the exact mtype.  This is because the adapter might be generalized to
 * a basic type.
 * @param mtype the caller's method type (either basic or full-custom)
 * @param customized whether to use a trailing appendix argument (to carry the mtype)
 * @param which bit-encoded 0x01 whether it is a CP adapter ("linker") or MHs.invoker value ("invoker");
 *                          0x02 whether it is for invokeExact or generic invoke
 */
private static LambdaForm invokeHandleForm(MethodType mtype, boolean customized, int which) {
    boolean isCached;
    if (!customized) {
        // normalize Z to I, String to Object, etc.
        mtype = mtype.basicType();
        isCached = true;
    } else {
        // maybe cache if mtype == mtype.basicType()
        isCached = false;
    }
    boolean isLinker, isGeneric;
    String debugName;
    switch(which) {
        case MethodTypeForm.LF_EX_LINKER:
            isLinker = true;
            isGeneric = false;
            debugName = "invokeExact_MT";
            break;
        case MethodTypeForm.LF_EX_INVOKER:
            isLinker = false;
            isGeneric = false;
            debugName = "exactInvoker";
            break;
        case MethodTypeForm.LF_GEN_LINKER:
            isLinker = true;
            isGeneric = true;
            debugName = "invoke_MT";
            break;
        case MethodTypeForm.LF_GEN_INVOKER:
            isLinker = false;
            isGeneric = true;
            debugName = "invoker";
            break;
        default:
            throw new InternalError();
    }
    LambdaForm lform;
    if (isCached) {
        lform = mtype.form().cachedLambdaForm(which);
        if (lform != null)
            return lform;
    }
    // exactInvokerForm (Object,Object)Object
    // link with java.lang.invoke.MethodHandle.invokeBasic(MethodHandle,Object,Object)Object/invokeSpecial
    final int THIS_MH = 0;
    final int CALL_MH = THIS_MH + (isLinker ? 0 : 1);
    final int ARG_BASE = CALL_MH + 1;
    final int OUTARG_LIMIT = ARG_BASE + mtype.parameterCount();
    final int INARG_LIMIT = OUTARG_LIMIT + (isLinker && !customized ? 1 : 0);
    int nameCursor = OUTARG_LIMIT;
    // might be last in-argument
    final int MTYPE_ARG = customized ? -1 : nameCursor++;
    final int CHECK_TYPE = nameCursor++;
    final int CHECK_CUSTOM = (CUSTOMIZE_THRESHOLD >= 0) ? nameCursor++ : -1;
    final int LINKER_CALL = nameCursor++;
    MethodType invokerFormType = mtype.invokerType();
    if (isLinker) {
        if (!customized)
            invokerFormType = invokerFormType.appendParameterTypes(MemberName.class);
    } else {
        invokerFormType = invokerFormType.invokerType();
    }
    Name[] names = arguments(nameCursor - INARG_LIMIT, invokerFormType);
    assert (names.length == nameCursor) : Arrays.asList(mtype, customized, which, nameCursor, names.length);
    if (MTYPE_ARG >= INARG_LIMIT) {
        assert (names[MTYPE_ARG] == null);
        BoundMethodHandle.SpeciesData speciesData = BoundMethodHandle.speciesData_L();
        names[THIS_MH] = names[THIS_MH].withConstraint(speciesData);
        NamedFunction getter = speciesData.getterFunction(0);
        names[MTYPE_ARG] = new Name(getter, names[THIS_MH]);
    // else if isLinker, then MTYPE is passed in from the caller (e.g., the JVM)
    }
    // Make the final call.  If isGeneric, then prepend the result of type checking.
    MethodType outCallType = mtype.basicType();
    Object[] outArgs = Arrays.copyOfRange(names, CALL_MH, OUTARG_LIMIT, Object[].class);
    Object mtypeArg = (customized ? mtype : names[MTYPE_ARG]);
    if (!isGeneric) {
        names[CHECK_TYPE] = new Name(NF_checkExactType, names[CALL_MH], mtypeArg);
    // mh.invokeExact(a*):R => checkExactType(mh, TYPEOF(a*:R)); mh.invokeBasic(a*)
    } else {
        names[CHECK_TYPE] = new Name(NF_checkGenericType, names[CALL_MH], mtypeArg);
        // mh.invokeGeneric(a*):R => checkGenericType(mh, TYPEOF(a*:R)).invokeBasic(a*)
        outArgs[0] = names[CHECK_TYPE];
    }
    if (CHECK_CUSTOM != -1) {
        names[CHECK_CUSTOM] = new Name(NF_checkCustomized, outArgs[0]);
    }
    names[LINKER_CALL] = new Name(outCallType, outArgs);
    lform = new LambdaForm(debugName, INARG_LIMIT, names);
    if (isLinker)
        // JVM needs a real methodOop
        lform.compileToBytecode();
    if (isCached)
        lform = mtype.form().setCachedLambdaForm(which, lform);
    return lform;
}