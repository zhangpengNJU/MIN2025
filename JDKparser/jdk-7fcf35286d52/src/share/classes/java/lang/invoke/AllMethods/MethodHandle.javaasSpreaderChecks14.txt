/**
 * See if {@code asSpreader} can be validly called with the given arguments.
 * Return the type of the method handle call after spreading but before conversions.
 */
private MethodType asSpreaderChecks(Class<?> arrayType, int arrayLength) {
    spreadArrayChecks(arrayType, arrayLength);
    int nargs = type().parameterCount();
    if (nargs < arrayLength || arrayLength < 0)
        throw newIllegalArgumentException("bad spread array length");
    Class<?> arrayElement = arrayType.getComponentType();
    MethodType mtype = type();
    boolean match = true, fail = false;
    for (int i = nargs - arrayLength; i < nargs; i++) {
        Class<?> ptype = mtype.parameterType(i);
        if (ptype != arrayElement) {
            match = false;
            if (!MethodType.canConvert(arrayElement, ptype)) {
                fail = true;
                break;
            }
        }
    }
    if (match)
        return mtype;
    MethodType needType = mtype.asSpreaderType(arrayType, arrayLength);
    if (!fail)
        return needType;
    // elicit an error:
    this.asType(needType);
    throw newInternalError("should not return", null);
}