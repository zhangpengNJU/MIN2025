/**
 * Interns the element.
 * Always returns non-null element, matching the one in the intern set.
 * Under the race against another add(), it can return <i>different</i>
 * element, if another thread beats us to interning it.
 *
 * @param elem element to add
 * @return element that was actually added
 */
public T add(T elem) {
    if (elem == null)
        throw new NullPointerException();
    // Playing double race here, and so spinloop is required.
    // First race is with two concurrent updaters.
    // Second race is with GC purging weak ref under our feet.
    // Hopefully, we almost always end up with a single pass.
    T interned;
    WeakEntry<T> e = new WeakEntry<>(elem, stale);
    do {
        expungeStaleElements();
        WeakEntry<T> exist = map.putIfAbsent(e, e);
        interned = (exist == null) ? elem : exist.get();
    } while (interned == null);
    return interned;
}