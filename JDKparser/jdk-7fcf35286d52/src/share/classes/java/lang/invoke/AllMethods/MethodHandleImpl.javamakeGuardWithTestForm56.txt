static LambdaForm makeGuardWithTestForm(MethodType basicType) {
    LambdaForm lform = basicType.form().cachedLambdaForm(MethodTypeForm.LF_GWT);
    if (lform != null)
        return lform;
    // the BMH_LLL
    final int THIS_MH = 0;
    // start of incoming arguments
    final int ARG_BASE = 1;
    final int ARG_LIMIT = ARG_BASE + basicType.parameterCount();
    int nameCursor = ARG_LIMIT;
    final int GET_TEST = nameCursor++;
    final int GET_TARGET = nameCursor++;
    final int GET_FALLBACK = nameCursor++;
    final int GET_COUNTERS = PROFILE_GWT ? nameCursor++ : -1;
    final int CALL_TEST = nameCursor++;
    final int PROFILE = (GET_COUNTERS != -1) ? nameCursor++ : -1;
    // previous statement: either PROFILE or CALL_TEST
    final int TEST = nameCursor - 1;
    final int SELECT_ALT = nameCursor++;
    final int CALL_TARGET = nameCursor++;
    // must be true to trigger IBG.emitSelectAlternative
    assert (CALL_TARGET == SELECT_ALT + 1);
    MethodType lambdaType = basicType.invokerType();
    Name[] names = arguments(nameCursor - ARG_LIMIT, lambdaType);
    BoundMethodHandle.SpeciesData data = (GET_COUNTERS != -1) ? BoundMethodHandle.speciesData_LLLL() : BoundMethodHandle.speciesData_LLL();
    names[THIS_MH] = names[THIS_MH].withConstraint(data);
    names[GET_TEST] = new Name(data.getterFunction(0), names[THIS_MH]);
    names[GET_TARGET] = new Name(data.getterFunction(1), names[THIS_MH]);
    names[GET_FALLBACK] = new Name(data.getterFunction(2), names[THIS_MH]);
    if (GET_COUNTERS != -1) {
        names[GET_COUNTERS] = new Name(data.getterFunction(3), names[THIS_MH]);
    }
    Object[] invokeArgs = Arrays.copyOfRange(names, 0, ARG_LIMIT, Object[].class);
    // call test
    MethodType testType = basicType.changeReturnType(boolean.class).basicType();
    invokeArgs[0] = names[GET_TEST];
    names[CALL_TEST] = new Name(testType, invokeArgs);
    // profile branch
    if (PROFILE != -1) {
        names[PROFILE] = new Name(Lazy.NF_profileBoolean, names[CALL_TEST], names[GET_COUNTERS]);
    }
    // call selectAlternative
    names[SELECT_ALT] = new Name(Lazy.MH_selectAlternative, names[TEST], names[GET_TARGET], names[GET_FALLBACK]);
    // call target or fallback
    invokeArgs[0] = names[SELECT_ALT];
    names[CALL_TARGET] = new Name(basicType, invokeArgs);
    lform = new LambdaForm("guard", lambdaType.parameterCount(), names, /*forceInline=*/
    true);
    return basicType.form().setCachedLambdaForm(MethodTypeForm.LF_GWT, lform);
}