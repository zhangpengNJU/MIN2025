private Member reflectUnchecked() throws ReflectiveOperationException {
    byte refKind = (byte) getReferenceKind();
    Class<?> defc = getDeclaringClass();
    boolean isPublic = Modifier.isPublic(getModifiers());
    if (MethodHandleNatives.refKindIsMethod(refKind)) {
        if (isPublic)
            return defc.getMethod(getName(), getMethodType().parameterArray());
        else
            return defc.getDeclaredMethod(getName(), getMethodType().parameterArray());
    } else if (MethodHandleNatives.refKindIsConstructor(refKind)) {
        if (isPublic)
            return defc.getConstructor(getMethodType().parameterArray());
        else
            return defc.getDeclaredConstructor(getMethodType().parameterArray());
    } else if (MethodHandleNatives.refKindIsField(refKind)) {
        if (isPublic)
            return defc.getField(getName());
        else
            return defc.getDeclaredField(getName());
    } else {
        throw new IllegalArgumentException("referenceKind=" + refKind);
    }
}