/**
 * Creates a lookup on the specified new lookup class.
 * The resulting object will report the specified
 * class as its own {@link #lookupClass lookupClass}.
 * <p>
 * However, the resulting {@code Lookup} object is guaranteed
 * to have no more access capabilities than the original.
 * In particular, access capabilities can be lost as follows:<ul>
 * <li>If the new lookup class differs from the old one,
 * protected members will not be accessible by virtue of inheritance.
 * (Protected members may continue to be accessible because of package sharing.)
 * <li>If the new lookup class is in a different package
 * than the old one, protected and default (package) members will not be accessible.
 * <li>If the new lookup class is not within the same package member
 * as the old one, private members will not be accessible.
 * <li>If the new lookup class is not accessible to the old lookup class,
 * then no members, not even public members, will be accessible.
 * (In all other cases, public members will continue to be accessible.)
 * </ul>
 *
 * @param requestedLookupClass the desired lookup class for the new lookup object
 * @return a lookup object which reports the desired lookup class
 * @throws NullPointerException if the argument is null
 */
public Lookup in(Class<?> requestedLookupClass) {
    // null check
    requestedLookupClass.getClass();
    if (// IMPL_LOOKUP can make any lookup at all
    allowedModes == TRUSTED)
        return new Lookup(requestedLookupClass, ALL_MODES);
    if (requestedLookupClass == this.lookupClass)
        // keep same capabilities
        return this;
    int newModes = (allowedModes & (ALL_MODES & ~PROTECTED));
    if ((newModes & PACKAGE) != 0 && !VerifyAccess.isSamePackage(this.lookupClass, requestedLookupClass)) {
        newModes &= ~(PACKAGE | PRIVATE);
    }
    // Allow nestmate lookups to be created without special privilege:
    if ((newModes & PRIVATE) != 0 && !VerifyAccess.isSamePackageMember(this.lookupClass, requestedLookupClass)) {
        newModes &= ~PRIVATE;
    }
    if ((newModes & PUBLIC) != 0 && !VerifyAccess.isClassAccessible(requestedLookupClass, this.lookupClass, allowedModes)) {
        // The requested class it not accessible from the lookup class.
        // No permissions.
        newModes = 0;
    }
    checkUnprivilegedlookupClass(requestedLookupClass, newModes);
    return new Lookup(requestedLookupClass, newModes);
}