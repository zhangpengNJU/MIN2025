/**
 * Determines if this switch point has been invalidated yet.
 *
 * <p style="font-size:smaller;">
 * <em>Discussion:</em>
 * Because of the one-way nature of invalidation, once a switch point begins
 * to return true for {@code hasBeenInvalidated},
 * it will always do so in the future.
 * On the other hand, a valid switch point visible to other threads may
 * be invalidated at any moment, due to a request by another thread.
 * <p style="font-size:smaller;">
 * Since invalidation is a global and immediate operation,
 * the execution of this query, on a valid switchpoint,
 * must be internally sequenced with any
 * other threads that could cause invalidation.
 * This query may therefore be expensive.
 * The recommended way to build a boolean-valued method handle
 * which queries the invalidation state of a switch point {@code s} is
 * to call {@code s.guardWithTest} on
 * {@link MethodHandles#constant constant} true and false method handles.
 *
 * @return true if this switch point has been invalidated
 */
public boolean hasBeenInvalidated() {
    return (mcs.getTarget() != K_true);
}