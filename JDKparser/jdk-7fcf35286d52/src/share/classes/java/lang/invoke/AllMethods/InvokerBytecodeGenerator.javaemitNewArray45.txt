void emitNewArray(Name name) throws InternalError {
    Class<?> rtype = name.function.methodType().returnType();
    if (name.arguments.length == 0) {
        // The array will be a constant.
        Object emptyArray;
        try {
            emptyArray = name.function.resolvedHandle.invoke();
        } catch (Throwable ex) {
            throw newInternalError(ex);
        }
        assert (java.lang.reflect.Array.getLength(emptyArray) == 0);
        // exact typing
        assert (emptyArray.getClass() == rtype);
        mv.visitLdcInsn(constantPlaceholder(emptyArray));
        emitReferenceCast(rtype, emptyArray);
        return;
    }
    Class<?> arrayElementType = rtype.getComponentType();
    assert (arrayElementType != null);
    emitIconstInsn(name.arguments.length);
    int xas = Opcodes.AASTORE;
    if (!arrayElementType.isPrimitive()) {
        mv.visitTypeInsn(Opcodes.ANEWARRAY, getInternalName(arrayElementType));
    } else {
        byte tc = arrayTypeCode(Wrapper.forPrimitiveType(arrayElementType));
        xas = arrayInsnOpcode(tc, xas);
        mv.visitIntInsn(Opcodes.NEWARRAY, tc);
    }
    // store arguments
    for (int i = 0; i < name.arguments.length; i++) {
        mv.visitInsn(Opcodes.DUP);
        emitIconstInsn(i);
        emitPushArgument(name, i);
        mv.visitInsn(xas);
    }
    // the array is left on the stack
    assertStaticType(rtype, name);
}