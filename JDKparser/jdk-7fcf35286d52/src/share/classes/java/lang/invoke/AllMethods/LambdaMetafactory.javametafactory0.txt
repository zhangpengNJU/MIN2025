/**
 * Facilitates the creation of simple "function objects" that implement one
 * or more interfaces by delegation to a provided {@link MethodHandle},
 * after appropriate type adaptation and partial evaluation of arguments.
 * Typically used as a <em>bootstrap method</em> for {@code invokedynamic}
 * call sites, to support the <em>lambda expression</em> and <em>method
 * reference expression</em> features of the Java Programming Language.
 *
 * <p>This is the standard, streamlined metafactory; additional flexibility
 * is provided by {@link #altMetafactory(MethodHandles.Lookup, String, MethodType, Object...)}.
 * A general description of the behavior of this method is provided
 * {@link LambdaMetafactory above}.
 *
 * <p>When the target of the {@code CallSite} returned from this method is
 * invoked, the resulting function objects are instances of a class which
 * implements the interface named by the return type of {@code invokedType},
 * declares a method with the name given by {@code invokedName} and the
 * signature given by {@code samMethodType}.  It may also override additional
 * methods from {@code Object}.
 *
 * @param caller Represents a lookup context with the accessibility
 *               privileges of the caller.  When used with {@code invokedynamic},
 *               this is stacked automatically by the VM.
 * @param invokedName The name of the method to implement.  When used with
 *                    {@code invokedynamic}, this is provided by the
 *                    {@code NameAndType} of the {@code InvokeDynamic}
 *                    structure and is stacked automatically by the VM.
 * @param invokedType The expected signature of the {@code CallSite}.  The
 *                    parameter types represent the types of capture variables;
 *                    the return type is the interface to implement.   When
 *                    used with {@code invokedynamic}, this is provided by
 *                    the {@code NameAndType} of the {@code InvokeDynamic}
 *                    structure and is stacked automatically by the VM.
 *                    In the event that the implementation method is an
 *                    instance method and this signature has any parameters,
 *                    the first parameter in the invocation signature must
 *                    correspond to the receiver.
 * @param samMethodType Signature and return type of method to be implemented
 *                      by the function object.
 * @param implMethod A direct method handle describing the implementation
 *                   method which should be called (with suitable adaptation
 *                   of argument types, return types, and with captured
 *                   arguments prepended to the invocation arguments) at
 *                   invocation time.
 * @param instantiatedMethodType The signature and return type that should
 *                               be enforced dynamically at invocation time.
 *                               This may be the same as {@code samMethodType},
 *                               or may be a specialization of it.
 * @return a CallSite whose target can be used to perform capture, generating
 *         instances of the interface named by {@code invokedType}
 * @throws LambdaConversionException If any of the linkage invariants
 *                                   described {@link LambdaMetafactory above}
 *                                   are violated
 */
public static CallSite metafactory(MethodHandles.Lookup caller, String invokedName, MethodType invokedType, MethodType samMethodType, MethodHandle implMethod, MethodType instantiatedMethodType) throws LambdaConversionException {
    AbstractValidatingLambdaMetafactory mf;
    mf = new InnerClassLambdaMetafactory(caller, invokedType, invokedName, samMethodType, implMethod, instantiatedMethodType, false, EMPTY_CLASS_ARRAY, EMPTY_MT_ARRAY);
    mf.validateMetafactoryArgs();
    return mf.buildCallSite();
}