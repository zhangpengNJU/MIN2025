/**
 * Finds or creates a method type with some parameter types omitted.
 * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
 * @param start  the index (zero-based) of the first parameter type to remove
 * @param end    the index (greater than {@code start}) of the first parameter type after not to remove
 * @return the same type, except with the selected parameter(s) removed
 * @throws IndexOutOfBoundsException if {@code start} is negative or greater than {@code parameterCount()}
 *                                  or if {@code end} is negative or greater than {@code parameterCount()}
 *                                  or if {@code start} is greater than {@code end}
 */
public MethodType dropParameterTypes(int start, int end) {
    int len = ptypes.length;
    if (!(0 <= start && start <= end && end <= len))
        throw newIndexOutOfBoundsException("start=" + start + " end=" + end);
    if (start == end)
        return this;
    Class<?>[] nptypes;
    if (start == 0) {
        if (end == len) {
            // drop all parameters
            nptypes = NO_PTYPES;
        } else {
            // drop initial parameter(s)
            nptypes = Arrays.copyOfRange(ptypes, end, len);
        }
    } else {
        if (end == len) {
            // drop trailing parameter(s)
            nptypes = Arrays.copyOfRange(ptypes, 0, start);
        } else {
            int tail = len - end;
            nptypes = Arrays.copyOfRange(ptypes, 0, start + tail);
            System.arraycopy(ptypes, end, nptypes, start, tail);
        }
    }
    return makeImpl(rtype, nptypes, true);
}