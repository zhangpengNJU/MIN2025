/**
 * Displays the name of the class from which lookups are to be made.
 * (The name is the one reported by {@link java.lang.Class#getName() Class.getName}.)
 * If there are restrictions on the access permitted to this lookup,
 * this is indicated by adding a suffix to the class name, consisting
 * of a slash and a keyword.  The keyword represents the strongest
 * allowed access, and is chosen as follows:
 * <ul>
 * <li>If no access is allowed, the suffix is "/noaccess".
 * <li>If only public access is allowed, the suffix is "/public".
 * <li>If only public and package access are allowed, the suffix is "/package".
 * <li>If only public, package, and private access are allowed, the suffix is "/private".
 * </ul>
 * If none of the above cases apply, it is the case that full
 * access (public, package, private, and protected) is allowed.
 * In this case, no suffix is added.
 * This is true only of an object obtained originally from
 * {@link java.lang.invoke.MethodHandles#lookup MethodHandles.lookup}.
 * Objects created by {@link java.lang.invoke.MethodHandles.Lookup#in Lookup.in}
 * always have restricted access, and will display a suffix.
 * <p>
 * (It may seem strange that protected access should be
 * stronger than private access.  Viewed independently from
 * package access, protected access is the first to be lost,
 * because it requires a direct subclass relationship between
 * caller and callee.)
 * @see #in
 */
@Override
public String toString() {
    String cname = lookupClass.getName();
    switch(allowedModes) {
        case // no privileges
        0:
            return cname + "/noaccess";
        case PUBLIC:
            return cname + "/public";
        case PUBLIC | PACKAGE:
            return cname + "/package";
        case ALL_MODES & ~PROTECTED:
            return cname + "/private";
        case ALL_MODES:
            return cname;
        case TRUSTED:
            // internal only; not exported
            return "/trusted";
        default:
            // Should not happen, but it's a bitfield...
            cname = cname + "/" + Integer.toHexString(allowedModes);
            assert (false) : cname;
            return cname;
    }
}