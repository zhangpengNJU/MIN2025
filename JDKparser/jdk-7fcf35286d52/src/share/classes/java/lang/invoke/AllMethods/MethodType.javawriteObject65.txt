/**
 *  Save the {@code MethodType} instance to a stream.
 *
 *  @serialData
 *  For portability, the serialized format does not refer to named fields.
 *  Instead, the return type and parameter type arrays are written directly
 *  from the {@code writeObject} method, using two calls to {@code s.writeObject}
 *  as follows:
 *  <blockquote><pre>{@code
 * s.writeObject(this.returnType());
 * s.writeObject(this.parameterArray());
 *  }</pre></blockquote>
 *  <p>
 *  The deserialized field values are checked as if they were
 *  provided to the factory method {@link #methodType(Class,Class[]) methodType}.
 *  For example, null values, or {@code void} parameter types,
 *  will lead to exceptions during deserialization.
 *  @param s the stream to write the object to
 *  @throws java.io.IOException if there is a problem writing the object
 */
private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {
    // requires serialPersistentFields to be an empty array
    s.defaultWriteObject();
    s.writeObject(returnType());
    s.writeObject(parameterArray());
}