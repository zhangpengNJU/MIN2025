/**
 * The LambaForm shape for catchException combinator is the following:
 * <blockquote><pre>{@code
 *  guardWithCatch=Lambda(a0:L,a1:L,a2:L)=>{
 *    t3:L=BoundMethodHandle$Species_LLLLL.argL0(a0:L);
 *    t4:L=BoundMethodHandle$Species_LLLLL.argL1(a0:L);
 *    t5:L=BoundMethodHandle$Species_LLLLL.argL2(a0:L);
 *    t6:L=BoundMethodHandle$Species_LLLLL.argL3(a0:L);
 *    t7:L=BoundMethodHandle$Species_LLLLL.argL4(a0:L);
 *    t8:L=MethodHandle.invokeBasic(t6:L,a1:L,a2:L);
 *    t9:L=MethodHandleImpl.guardWithCatch(t3:L,t4:L,t5:L,t8:L);
 *   t10:I=MethodHandle.invokeBasic(t7:L,t9:L);t10:I}
 * }</pre></blockquote>
 *
 * argL0 and argL2 are target and catcher method handles. argL1 is exception class.
 * argL3 and argL4 are auxiliary method handles: argL3 boxes arguments and wraps them into Object[]
 * (ValueConversions.array()) and argL4 unboxes result if necessary (ValueConversions.unbox()).
 *
 * Having t8 and t10 passed outside and not hardcoded into a lambda form allows to share lambda forms
 * among catchException combinators with the same basic type.
 */
private static LambdaForm makeGuardWithCatchForm(MethodType basicType) {
    MethodType lambdaType = basicType.invokerType();
    LambdaForm lform = basicType.form().cachedLambdaForm(MethodTypeForm.LF_GWC);
    if (lform != null) {
        return lform;
    }
    // the BMH_LLLLL
    final int THIS_MH = 0;
    // start of incoming arguments
    final int ARG_BASE = 1;
    final int ARG_LIMIT = ARG_BASE + basicType.parameterCount();
    int nameCursor = ARG_LIMIT;
    final int GET_TARGET = nameCursor++;
    final int GET_CLASS = nameCursor++;
    final int GET_CATCHER = nameCursor++;
    final int GET_COLLECT_ARGS = nameCursor++;
    final int GET_UNBOX_RESULT = nameCursor++;
    final int BOXED_ARGS = nameCursor++;
    final int TRY_CATCH = nameCursor++;
    final int UNBOX_RESULT = nameCursor++;
    Name[] names = arguments(nameCursor - ARG_LIMIT, lambdaType);
    BoundMethodHandle.SpeciesData data = BoundMethodHandle.speciesData_LLLLL();
    names[THIS_MH] = names[THIS_MH].withConstraint(data);
    names[GET_TARGET] = new Name(data.getterFunction(0), names[THIS_MH]);
    names[GET_CLASS] = new Name(data.getterFunction(1), names[THIS_MH]);
    names[GET_CATCHER] = new Name(data.getterFunction(2), names[THIS_MH]);
    names[GET_COLLECT_ARGS] = new Name(data.getterFunction(3), names[THIS_MH]);
    names[GET_UNBOX_RESULT] = new Name(data.getterFunction(4), names[THIS_MH]);
    // FIXME: rework argument boxing/result unboxing logic for LF interpretation
    // t_{i}:L=MethodHandle.invokeBasic(collectArgs:L,a1:L,...);
    MethodType collectArgsType = basicType.changeReturnType(Object.class);
    MethodHandle invokeBasic = MethodHandles.basicInvoker(collectArgsType);
    Object[] args = new Object[invokeBasic.type().parameterCount()];
    args[0] = names[GET_COLLECT_ARGS];
    System.arraycopy(names, ARG_BASE, args, 1, ARG_LIMIT - ARG_BASE);
    names[BOXED_ARGS] = new Name(makeIntrinsic(invokeBasic, Intrinsic.GUARD_WITH_CATCH), args);
    // t_{i+1}:L=MethodHandleImpl.guardWithCatch(target:L,exType:L,catcher:L,t_{i}:L);
    Object[] gwcArgs = new Object[] { names[GET_TARGET], names[GET_CLASS], names[GET_CATCHER], names[BOXED_ARGS] };
    names[TRY_CATCH] = new Name(Lazy.NF_guardWithCatch, gwcArgs);
    // t_{i+2}:I=MethodHandle.invokeBasic(unbox:L,t_{i+1}:L);
    MethodHandle invokeBasicUnbox = MethodHandles.basicInvoker(MethodType.methodType(basicType.rtype(), Object.class));
    Object[] unboxArgs = new Object[] { names[GET_UNBOX_RESULT], names[TRY_CATCH] };
    names[UNBOX_RESULT] = new Name(invokeBasicUnbox, unboxArgs);
    lform = new LambdaForm("guardWithCatch", lambdaType.parameterCount(), names);
    return basicType.form().setCachedLambdaForm(MethodTypeForm.LF_GWC, lform);
}