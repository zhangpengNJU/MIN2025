/**
 * Performs an unchecked "crack" of a
 * <a href="MethodHandleInfo.html#directmh">direct method handle</a>.
 * The result is as if the user had obtained a lookup object capable enough
 * to crack the target method handle, called
 * {@link java.lang.invoke.MethodHandles.Lookup#revealDirect Lookup.revealDirect}
 * on the target to obtain its symbolic reference, and then called
 * {@link java.lang.invoke.MethodHandleInfo#reflectAs MethodHandleInfo.reflectAs}
 * to resolve the symbolic reference to a member.
 * <p>
 * If there is a security manager, its {@code checkPermission} method
 * is called with a {@code ReflectPermission("suppressAccessChecks")} permission.
 * @param <T> the desired type of the result, either {@link Member} or a subtype
 * @param target a direct method handle to crack into symbolic reference components
 * @param expected a class object representing the desired result type {@code T}
 * @return a reference to the method, constructor, or field object
 * @exception SecurityException if the caller is not privileged to call {@code setAccessible}
 * @exception NullPointerException if either argument is {@code null}
 * @exception IllegalArgumentException if the target is not a direct method handle
 * @exception ClassCastException if the member is not of the expected type
 * @since 1.8
 */
public static <T extends Member> T reflectAs(Class<T> expected, MethodHandle target) {
    SecurityManager smgr = System.getSecurityManager();
    if (smgr != null)
        smgr.checkPermission(ACCESS_PERMISSION);
    // use maximally privileged lookup
    Lookup lookup = Lookup.IMPL_LOOKUP;
    return lookup.revealDirect(target).reflectAs(expected, lookup);
}