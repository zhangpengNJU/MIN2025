LambdaForm collectArgumentArrayForm(int pos, MethodHandle arrayCollector) {
    MethodType collectorType = arrayCollector.type();
    int collectorArity = collectorType.parameterCount();
    assert (arrayCollector.intrinsicName() == Intrinsic.NEW_ARRAY);
    Class<?> arrayType = collectorType.returnType();
    Class<?> elementType = arrayType.getComponentType();
    BasicType argType = basicType(elementType);
    int argTypeKey = argType.ordinal();
    if (argType.basicTypeClass() != elementType) {
        // return null if it requires more metadata (like String[].class)
        if (!elementType.isPrimitive())
            return null;
        argTypeKey = TYPE_LIMIT + Wrapper.forPrimitiveType(elementType).ordinal();
    }
    assert (collectorType.parameterList().equals(Collections.nCopies(collectorArity, elementType)));
    Transform.Kind kind = Transform.Kind.COLLECT_ARGS_TO_ARRAY;
    Transform key = Transform.of(kind, pos, collectorArity, argTypeKey);
    LambdaForm form = getInCache(key);
    if (form != null) {
        assert (form.arity == lambdaForm.arity - 1 + collectorArity);
        return form;
    }
    LambdaFormBuffer buf = buffer();
    buf.startEdit();
    assert (pos + 1 <= lambdaForm.arity);
    // cannot filter the MH arg itself
    assert (pos > 0);
    Name[] newParams = new Name[collectorArity];
    for (int i = 0; i < collectorArity; i++) {
        newParams[i] = new Name(pos + i, argType);
    }
    Name callCombiner = new Name(arrayCollector, (Object[]) /*...*/
    newParams);
    // insert the new expression
    int exprPos = lambdaForm.arity();
    buf.insertExpression(exprPos, callCombiner);
    // insert new arguments
    // skip result parameter
    int argPos = pos + 1;
    for (Name newParam : newParams) {
        buf.insertParameter(argPos++, newParam);
    }
    assert (buf.lastIndexOf(callCombiner) == exprPos + newParams.length);
    buf.replaceParameterByCopy(pos, exprPos + newParams.length);
    form = buf.endEdit();
    return putInCache(key, form);
}