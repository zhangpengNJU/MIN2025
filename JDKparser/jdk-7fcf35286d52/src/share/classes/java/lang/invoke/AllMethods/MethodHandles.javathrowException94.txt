/**
 * Produces a method handle which will throw exceptions of the given {@code exType}.
 * The method handle will accept a single argument of {@code exType},
 * and immediately throw it as an exception.
 * The method type will nominally specify a return of {@code returnType}.
 * The return type may be anything convenient:  It doesn't matter to the
 * method handle's behavior, since it will never return normally.
 * @param returnType the return type of the desired method handle
 * @param exType the parameter type of the desired method handle
 * @return method handle which can throw the given exceptions
 * @throws NullPointerException if either argument is null
 */
public static MethodHandle throwException(Class<?> returnType, Class<? extends Throwable> exType) {
    if (!Throwable.class.isAssignableFrom(exType))
        throw new ClassCastException(exType.getName());
    return MethodHandleImpl.throwException(MethodType.methodType(returnType, exType));
}