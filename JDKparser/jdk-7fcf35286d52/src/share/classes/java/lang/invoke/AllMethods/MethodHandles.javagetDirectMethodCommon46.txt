/**
 * Common code for all methods; do not call directly except from immediately above.
 */
private MethodHandle getDirectMethodCommon(byte refKind, Class<?> refc, MemberName method, boolean checkSecurity, boolean doRestrict, Class<?> callerClass) throws IllegalAccessException {
    checkMethod(refKind, refc, method);
    // Optionally check with the security manager; this isn't needed for unreflect* calls.
    if (checkSecurity)
        checkSecurityManager(refc, method);
    assert (!method.isMethodHandleInvoke());
    if (refKind == REF_invokeSpecial && refc != lookupClass() && !refc.isInterface() && refc != lookupClass().getSuperclass() && refc.isAssignableFrom(lookupClass())) {
        // not this code path
        assert (!method.getName().equals("<init>"));
        // Per JVMS 6.5, desc. of invokespecial instruction:
        // If the method is in a superclass of the LC,
        // and if our original search was above LC.super,
        // repeat the search (symbolic lookup) from LC.super
        // and continue with the direct superclass of that class,
        // and so forth, until a match is found or no further superclasses exist.
        // FIXME: MemberName.resolve should handle this instead.
        Class<?> refcAsSuper = lookupClass();
        MemberName m2;
        do {
            refcAsSuper = refcAsSuper.getSuperclass();
            m2 = new MemberName(refcAsSuper, method.getName(), method.getMethodType(), REF_invokeSpecial);
            m2 = IMPL_NAMES.resolveOrNull(refKind, m2, lookupClassOrNull());
        } while (// no method is found yet
        m2 == null && // search up to refc
        refc != refcAsSuper);
        if (m2 == null)
            throw new InternalError(method.toString());
        method = m2;
        refc = refcAsSuper;
        // redo basic checks
        checkMethod(refKind, refc, method);
    }
    DirectMethodHandle dmh = DirectMethodHandle.make(refKind, refc, method);
    MethodHandle mh = dmh;
    // Optionally narrow the receiver argument to refc using restrictReceiver.
    if (doRestrict && (refKind == REF_invokeSpecial || (MethodHandleNatives.refKindHasReceiver(refKind) && restrictProtectedReceiver(method)))) {
        mh = restrictReceiver(method, dmh, lookupClass());
    }
    mh = maybeBindCaller(method, mh, callerClass);
    mh = mh.setVarargs(method);
    return mh;
}