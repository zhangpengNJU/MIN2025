/**
 * Produces a method handle giving write access to a reflected field.
 * The type of the method handle will have a void return type.
 * If the field is static, the method handle will take a single
 * argument, of the field's value type, the value to be stored.
 * Otherwise, the two arguments will be the instance containing
 * the field, and the value to be stored.
 * If the field's {@code accessible} flag is not set,
 * access checking is performed immediately on behalf of the lookup class.
 * <p>
 * If the field is static, and
 * if the returned method handle is invoked, the field's class will
 * be initialized, if it has not already been initialized.
 * @param f the reflected field
 * @return a method handle which can store values into the reflected field
 * @throws IllegalAccessException if access checking fails
 * @throws NullPointerException if the argument is null
 */
public MethodHandle unreflectSetter(Field f) throws IllegalAccessException {
    return unreflectField(f, true);
}