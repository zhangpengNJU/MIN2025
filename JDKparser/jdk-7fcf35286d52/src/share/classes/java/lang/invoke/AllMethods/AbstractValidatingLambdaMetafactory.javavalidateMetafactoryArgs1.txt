/**
 * Check the meta-factory arguments for errors
 * @throws LambdaConversionException if there are improper conversions
 */
void validateMetafactoryArgs() throws LambdaConversionException {
    switch(implKind) {
        case MethodHandleInfo.REF_invokeInterface:
        case MethodHandleInfo.REF_invokeVirtual:
        case MethodHandleInfo.REF_invokeStatic:
        case MethodHandleInfo.REF_newInvokeSpecial:
        case MethodHandleInfo.REF_invokeSpecial:
            break;
        default:
            throw new LambdaConversionException(String.format("Unsupported MethodHandle kind: %s", implInfo));
    }
    // Check arity: optional-receiver + captured + SAM == impl
    final int implArity = implMethodType.parameterCount();
    final int receiverArity = implIsInstanceMethod ? 1 : 0;
    final int capturedArity = invokedType.parameterCount();
    final int samArity = samMethodType.parameterCount();
    final int instantiatedArity = instantiatedMethodType.parameterCount();
    if (implArity + receiverArity != capturedArity + samArity) {
        throw new LambdaConversionException(String.format("Incorrect number of parameters for %s method %s; %d captured parameters, %d functional interface method parameters, %d implementation parameters", implIsInstanceMethod ? "instance" : "static", implInfo, capturedArity, samArity, implArity));
    }
    if (instantiatedArity != samArity) {
        throw new LambdaConversionException(String.format("Incorrect number of parameters for %s method %s; %d instantiated parameters, %d functional interface method parameters", implIsInstanceMethod ? "instance" : "static", implInfo, instantiatedArity, samArity));
    }
    for (MethodType bridgeMT : additionalBridges) {
        if (bridgeMT.parameterCount() != samArity) {
            throw new LambdaConversionException(String.format("Incorrect number of parameters for bridge signature %s; incompatible with %s", bridgeMT, samMethodType));
        }
    }
    // If instance: first captured arg (receiver) must be subtype of class where impl method is defined
    final int capturedStart;
    final int samStart;
    if (implIsInstanceMethod) {
        final Class<?> receiverClass;
        // implementation is an instance method, adjust for receiver in captured variables / SAM arguments
        if (capturedArity == 0) {
            // receiver is function parameter
            capturedStart = 0;
            samStart = 1;
            receiverClass = instantiatedMethodType.parameterType(0);
        } else {
            // receiver is a captured variable
            capturedStart = 1;
            samStart = 0;
            receiverClass = invokedType.parameterType(0);
        }
        // check receiver type
        if (!implDefiningClass.isAssignableFrom(receiverClass)) {
            throw new LambdaConversionException(String.format("Invalid receiver type %s; not a subtype of implementation type %s", receiverClass, implDefiningClass));
        }
        Class<?> implReceiverClass = implMethod.type().parameterType(0);
        if (implReceiverClass != implDefiningClass && !implReceiverClass.isAssignableFrom(receiverClass)) {
            throw new LambdaConversionException(String.format("Invalid receiver type %s; not a subtype of implementation receiver type %s", receiverClass, implReceiverClass));
        }
    } else {
        // no receiver
        capturedStart = 0;
        samStart = 0;
    }
    // Check for exact match on non-receiver captured arguments
    final int implFromCaptured = capturedArity - capturedStart;
    for (int i = 0; i < implFromCaptured; i++) {
        Class<?> implParamType = implMethodType.parameterType(i);
        Class<?> capturedParamType = invokedType.parameterType(i + capturedStart);
        if (!capturedParamType.equals(implParamType)) {
            throw new LambdaConversionException(String.format("Type mismatch in captured lambda parameter %d: expecting %s, found %s", i, capturedParamType, implParamType));
        }
    }
    // Check for adaptation match on SAM arguments
    final int samOffset = samStart - implFromCaptured;
    for (int i = implFromCaptured; i < implArity; i++) {
        Class<?> implParamType = implMethodType.parameterType(i);
        Class<?> instantiatedParamType = instantiatedMethodType.parameterType(i + samOffset);
        if (!isAdaptableTo(instantiatedParamType, implParamType, true)) {
            throw new LambdaConversionException(String.format("Type mismatch for lambda argument %d: %s is not convertible to %s", i, instantiatedParamType, implParamType));
        }
    }
    // Adaptation match: return type
    Class<?> expectedType = instantiatedMethodType.returnType();
    Class<?> actualReturnType = (implKind == MethodHandleInfo.REF_newInvokeSpecial) ? implDefiningClass : implMethodType.returnType();
    Class<?> samReturnType = samMethodType.returnType();
    if (!isAdaptableToAsReturn(actualReturnType, expectedType)) {
        throw new LambdaConversionException(String.format("Type mismatch for lambda return: %s is not convertible to %s", actualReturnType, expectedType));
    }
    if (!isAdaptableToAsReturnStrict(expectedType, samReturnType)) {
        throw new LambdaConversionException(String.format("Type mismatch for lambda expected return: %s is not convertible to %s", expectedType, samReturnType));
    }
    for (MethodType bridgeMT : additionalBridges) {
        if (!isAdaptableToAsReturnStrict(expectedType, bridgeMT.returnType())) {
            throw new LambdaConversionException(String.format("Type mismatch for lambda expected return: %s is not convertible to %s", expectedType, bridgeMT.returnType()));
        }
    }
}