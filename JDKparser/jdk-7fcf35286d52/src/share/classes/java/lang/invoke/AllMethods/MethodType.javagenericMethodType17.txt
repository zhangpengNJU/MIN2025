/**
 * Finds or creates a method type whose components are {@code Object} with an optional trailing {@code Object[]} array.
 * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
 * All parameters and the return type will be {@code Object},
 * except the final array parameter if any, which will be {@code Object[]}.
 * @param objectArgCount number of parameters (excluding the final array parameter if any)
 * @param finalArray whether there will be a trailing array parameter, of type {@code Object[]}
 * @return a generally applicable method type, for all calls of the given fixed argument count and a collected array of further arguments
 * @throws IllegalArgumentException if {@code objectArgCount} is negative or greater than 255 (or 254, if {@code finalArray} is true)
 * @see #genericMethodType(int)
 */
public static MethodType genericMethodType(int objectArgCount, boolean finalArray) {
    MethodType mt;
    checkSlotCount(objectArgCount);
    int ivarargs = (!finalArray ? 0 : 1);
    int ootIndex = objectArgCount * 2 + ivarargs;
    if (ootIndex < objectOnlyTypes.length) {
        mt = objectOnlyTypes[ootIndex];
        if (mt != null)
            return mt;
    }
    Class<?>[] ptypes = new Class<?>[objectArgCount + ivarargs];
    Arrays.fill(ptypes, Object.class);
    if (ivarargs != 0)
        ptypes[objectArgCount] = Object[].class;
    mt = makeImpl(Object.class, ptypes, true);
    if (ootIndex < objectOnlyTypes.length) {
        // cache it here also!
        objectOnlyTypes[ootIndex] = mt;
    }
    return mt;
}