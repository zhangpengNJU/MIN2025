/**
 * Returns a string describing this {@code Method}, including
 * type parameters.  The string is formatted as the method access
 * modifiers, if any, followed by an angle-bracketed
 * comma-separated list of the method's type parameters, if any,
 * followed by the method's generic return type, followed by a
 * space, followed by the class declaring the method, followed by
 * a period, followed by the method name, followed by a
 * parenthesized, comma-separated list of the method's generic
 * formal parameter types.
 *
 * If this method was declared to take a variable number of
 * arguments, instead of denoting the last parameter as
 * "<tt><i>Type</i>[]</tt>", it is denoted as
 * "<tt><i>Type</i>...</tt>".
 *
 * A space is used to separate access modifiers from one another
 * and from the type parameters or return type.  If there are no
 * type parameters, the type parameter list is elided; if the type
 * parameter list is present, a space separates the list from the
 * class name.  If the method is declared to throw exceptions, the
 * parameter list is followed by a space, followed by the word
 * throws followed by a comma-separated list of the generic thrown
 * exception types.
 *
 * <p>The access modifiers are placed in canonical order as
 * specified by "The Java Language Specification".  This is
 * {@code public}, {@code protected} or {@code private} first,
 * and then other modifiers in the following order:
 * {@code abstract}, {@code default}, {@code static}, {@code final},
 * {@code synchronized}, {@code native}, {@code strictfp}.
 *
 * @return a string describing this {@code Method},
 * include type parameters
 *
 * @since 1.5
 *
 * @jls 8.4.3 Method Modifiers
 */
@Override
public String toGenericString() {
    return sharedToGenericString(Modifier.methodModifiers(), isDefault());
}