/**
 * Returns a string describing this {@code Field}, including
 * its generic type.  The format is the access modifiers for the
 * field, if any, followed by the generic field type, followed by
 * a space, followed by the fully-qualified name of the class
 * declaring the field, followed by a period, followed by the name
 * of the field.
 *
 * <p>The modifiers are placed in canonical order as specified by
 * "The Java Language Specification".  This is {@code public},
 * {@code protected} or {@code private} first, and then other
 * modifiers in the following order: {@code static}, {@code final},
 * {@code transient}, {@code volatile}.
 *
 * @return a string describing this {@code Field}, including
 * its generic type
 *
 * @since 1.5
 * @jls 8.3.1 Field Modifiers
 */
public String toGenericString() {
    int mod = getModifiers();
    Type fieldType = getGenericType();
    return (((mod == 0) ? "" : (Modifier.toString(mod) + " ")) + fieldType.getTypeName() + " " + getDeclaringClass().getTypeName() + "." + getName());
}