/**
 * Returns an {@code AnnotatedType} object that represents the use of a
 * type to specify the receiver type of the method/constructor represented
 * by this Executable object. The receiver type of a method/constructor is
 * available only if the method/constructor has a <em>receiver
 * parameter</em> (JLS 8.4.1).
 *
 * If this {@code Executable} object represents a constructor or instance
 * method that does not have a receiver parameter, or has a receiver
 * parameter with no annotations on its type, then the return value is an
 * {@code AnnotatedType} object representing an element with no
 * annotations.
 *
 * If this {@code Executable} object represents a static method, then the
 * return value is null.
 *
 * @return an object representing the receiver type of the method or
 * constructor represented by this {@code Executable}
 */
public AnnotatedType getAnnotatedReceiverType() {
    if (Modifier.isStatic(this.getModifiers()))
        return null;
    return TypeAnnotationParser.buildAnnotatedType(getTypeAnnotationBytes0(), sun.misc.SharedSecrets.getJavaLangAccess().getConstantPool(getDeclaringClass()), this, getDeclaringClass(), getDeclaringClass(), TypeAnnotation.TypeAnnotationTarget.METHOD_RECEIVER);
}