String sharedToGenericString(int modifierMask, boolean isDefault) {
    try {
        StringBuilder sb = new StringBuilder();
        printModifiersIfNonzero(sb, modifierMask, isDefault);
        TypeVariable<?>[] typeparms = getTypeParameters();
        if (typeparms.length > 0) {
            boolean first = true;
            sb.append('<');
            for (TypeVariable<?> typeparm : typeparms) {
                if (!first)
                    sb.append(',');
                // Class objects can't occur here; no need to test
                // and call Class.getName().
                sb.append(typeparm.toString());
                first = false;
            }
            sb.append("> ");
        }
        specificToGenericStringHeader(sb);
        sb.append('(');
        Type[] params = getGenericParameterTypes();
        for (int j = 0; j < params.length; j++) {
            String param = params[j].getTypeName();
            if (// replace T[] with T...
            isVarArgs() && (j == params.length - 1))
                param = param.replaceFirst("\\[\\]$", "...");
            sb.append(param);
            if (j < (params.length - 1))
                sb.append(',');
        }
        sb.append(')');
        Type[] exceptions = getGenericExceptionTypes();
        if (exceptions.length > 0) {
            sb.append(" throws ");
            for (int k = 0; k < exceptions.length; k++) {
                sb.append((exceptions[k] instanceof Class) ? ((Class) exceptions[k]).getName() : exceptions[k].toString());
                if (k < (exceptions.length - 1))
                    sb.append(',');
            }
        }
        return sb.toString();
    } catch (Exception e) {
        return "<" + e + ">";
    }
}