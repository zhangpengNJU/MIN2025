/**
 * Returns annotations that are <em>associated</em> with this element.
 *
 * If there are no annotations <em>associated</em> with this element, the return
 * value is an array of length 0.
 *
 * The difference between this method and {@link #getAnnotation(Class)}
 * is that this method detects if its argument is a <em>repeatable
 * annotation type</em> (JLS 9.6), and if so, attempts to find one or
 * more annotations of that type by "looking through" a container
 * annotation.
 *
 * The caller of this method is free to modify the returned array; it will
 * have no effect on the arrays returned to other callers.
 *
 * @implSpec The default implementation first calls {@link
 * #getDeclaredAnnotationsByType(Class)} passing {@code
 * annotationClass} as the argument. If the returned array has
 * length greater than zero, the array is returned. If the returned
 * array is zero-length and this {@code AnnotatedElement} is a
 * class and the argument type is an inheritable annotation type,
 * and the superclass of this {@code AnnotatedElement} is non-null,
 * then the returned result is the result of calling {@link
 * #getAnnotationsByType(Class)} on the superclass with {@code
 * annotationClass} as the argument. Otherwise, a zero-length
 * array is returned.
 *
 * @param <T> the type of the annotation to query for and return if present
 * @param annotationClass the Class object corresponding to the
 *        annotation type
 * @return all this element's annotations for the specified annotation type if
 *     associated with this element, else an array of length zero
 * @throws NullPointerException if the given annotation class is null
 * @since 1.8
 */
default <T extends Annotation> T[] getAnnotationsByType(Class<T> annotationClass) {
    /*
          * Definition of associated: directly or indirectly present OR
          * neither directly nor indirectly present AND the element is
          * a Class, the annotation type is inheritable, and the
          * annotation type is associated with the superclass of the
          * element.
          */
    T[] result = getDeclaredAnnotationsByType(annotationClass);
    if (// Neither directly nor indirectly present
    result.length == 0 && // the element is a class
    this instanceof Class && AnnotationType.getInstance(annotationClass).isInherited()) {
        // Inheritable
        Class<?> superClass = ((Class<?>) this).getSuperclass();
        if (superClass != null) {
            // Determine if the annotation is associated with the
            // superclass
            result = superClass.getAnnotationsByType(annotationClass);
        }
    }
    return result;
}