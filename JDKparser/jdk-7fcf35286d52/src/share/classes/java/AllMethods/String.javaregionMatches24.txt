/**
 * Tests if two string regions are equal.
 * <p>
 * A substring of this {@code String} object is compared to a substring
 * of the argument {@code other}. The result is {@code true} if these
 * substrings represent character sequences that are the same, ignoring
 * case if and only if {@code ignoreCase} is true. The substring of
 * this {@code String} object to be compared begins at index
 * {@code toffset} and has length {@code len}. The substring of
 * {@code other} to be compared begins at index {@code ooffset} and
 * has length {@code len}. The result is {@code false} if and only if
 * at least one of the following is true:
 * <ul><li>{@code toffset} is negative.
 * <li>{@code ooffset} is negative.
 * <li>{@code toffset+len} is greater than the length of this
 * {@code String} object.
 * <li>{@code ooffset+len} is greater than the length of the other
 * argument.
 * <li>{@code ignoreCase} is {@code false} and there is some nonnegative
 * integer <i>k</i> less than {@code len} such that:
 * <blockquote><pre>
 * this.charAt(toffset+k) != other.charAt(ooffset+k)
 * </pre></blockquote>
 * <li>{@code ignoreCase} is {@code true} and there is some nonnegative
 * integer <i>k</i> less than {@code len} such that:
 * <blockquote><pre>
 * Character.toLowerCase(this.charAt(toffset+k)) !=
 *     Character.toLowerCase(other.charAt(ooffset+k))
 * </pre></blockquote>
 * and:
 * <blockquote><pre>
 * Character.toUpperCase(this.charAt(toffset+k)) !=
 *         Character.toUpperCase(other.charAt(ooffset+k))
 * </pre></blockquote>
 * </ul>
 *
 * @param   ignoreCase   if {@code true}, ignore case when comparing
 *                       characters.
 * @param   toffset      the starting offset of the subregion in this
 *                       string.
 * @param   other        the string argument.
 * @param   ooffset      the starting offset of the subregion in the string
 *                       argument.
 * @param   len          the number of characters to compare.
 * @return  {@code true} if the specified subregion of this string
 *          matches the specified subregion of the string argument;
 *          {@code false} otherwise. Whether the matching is exact
 *          or case insensitive depends on the {@code ignoreCase}
 *          argument.
 */
public boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len) {
    char[] ta = value;
    int to = toffset;
    char[] pa = other.value;
    int po = ooffset;
    // Note: toffset, ooffset, or len might be near -1>>>1.
    if ((ooffset < 0) || (toffset < 0) || (toffset > (long) value.length - len) || (ooffset > (long) other.value.length - len)) {
        return false;
    }
    while (len-- > 0) {
        char c1 = ta[to++];
        char c2 = pa[po++];
        if (c1 == c2) {
            continue;
        }
        if (ignoreCase) {
            // If characters don't match but case may be ignored,
            // try converting both characters to uppercase.
            // If the results match, then the comparison scan should
            // continue.
            char u1 = Character.toUpperCase(c1);
            char u2 = Character.toUpperCase(c2);
            if (u1 == u2) {
                continue;
            }
            // Unfortunately, conversion to uppercase does not work properly
            // for the Georgian alphabet, which has strange rules about case
            // conversion.  So we need to make one last check before
            // exiting.
            if (Character.toLowerCase(u1) == Character.toLowerCase(u2)) {
                continue;
            }
        }
        return false;
    }
    return true;
}