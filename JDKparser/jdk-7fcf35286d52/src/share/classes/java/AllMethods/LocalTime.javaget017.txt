private int get0(TemporalField field) {
    switch((ChronoField) field) {
        case NANO_OF_SECOND:
            return nano;
        case NANO_OF_DAY:
            throw new UnsupportedTemporalTypeException("Invalid field 'NanoOfDay' for get() method, use getLong() instead");
        case MICRO_OF_SECOND:
            return nano / 1000;
        case MICRO_OF_DAY:
            throw new UnsupportedTemporalTypeException("Invalid field 'MicroOfDay' for get() method, use getLong() instead");
        case MILLI_OF_SECOND:
            return nano / 1000_000;
        case MILLI_OF_DAY:
            return (int) (toNanoOfDay() / 1000_000);
        case SECOND_OF_MINUTE:
            return second;
        case SECOND_OF_DAY:
            return toSecondOfDay();
        case MINUTE_OF_HOUR:
            return minute;
        case MINUTE_OF_DAY:
            return hour * 60 + minute;
        case HOUR_OF_AMPM:
            return hour % 12;
        case CLOCK_HOUR_OF_AMPM:
            int ham = hour % 12;
            return (ham % 12 == 0 ? 12 : ham);
        case HOUR_OF_DAY:
            return hour;
        case CLOCK_HOUR_OF_DAY:
            return (hour == 0 ? 24 : hour);
        case AMPM_OF_DAY:
            return hour / 12;
    }
    throw new UnsupportedTemporalTypeException("Unsupported field: " + field);
}