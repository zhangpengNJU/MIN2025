/**
 * Returns <tt>true</tt> if the two specified arrays of doubles are
 * <i>equal</i> to one another.  Two arrays are considered equal if both
 * arrays contain the same number of elements, and all corresponding pairs
 * of elements in the two arrays are equal.  In other words, two arrays
 * are equal if they contain the same elements in the same order.  Also,
 * two array references are considered equal if both are <tt>null</tt>.<p>
 *
 * Two doubles <tt>d1</tt> and <tt>d2</tt> are considered equal if:
 * <pre>    <tt>new Double(d1).equals(new Double(d2))</tt></pre>
 * (Unlike the <tt>==</tt> operator, this method considers
 * <tt>NaN</tt> equals to itself, and 0.0d unequal to -0.0d.)
 *
 * @param a one array to be tested for equality
 * @param a2 the other array to be tested for equality
 * @return <tt>true</tt> if the two arrays are equal
 * @see Double#equals(Object)
 */
public static boolean equals(double[] a, double[] a2) {
    if (a == a2)
        return true;
    if (a == null || a2 == null)
        return false;
    int length = a.length;
    if (a2.length != length)
        return false;
    for (int i = 0; i < length; i++) if (Double.doubleToLongBits(a[i]) != Double.doubleToLongBits(a2[i]))
        return false;
    return true;
}