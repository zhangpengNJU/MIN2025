/**
 * Returns an AlgorithmParameterGenerator object for generating
 * a set of parameters to be used with the specified algorithm.
 *
 * <p> A new AlgorithmParameterGenerator object encapsulating the
 * AlgorithmParameterGeneratorSpi implementation from the specified Provider
 * object is returned.  Note that the specified Provider object
 * does not have to be registered in the provider list.
 *
 * @param algorithm the string name of the algorithm this
 * parameter generator is associated with.
 * See the AlgorithmParameterGenerator section in the <a href=
 * "{@docRoot}/../technotes/guides/security/StandardNames.html#AlgorithmParameterGenerator">
 * Java Cryptography Architecture Standard Algorithm Name Documentation</a>
 * for information about standard algorithm names.
 *
 * @param provider the Provider object.
 *
 * @return the new AlgorithmParameterGenerator object.
 *
 * @exception NoSuchAlgorithmException if an AlgorithmParameterGeneratorSpi
 *          implementation for the specified algorithm is not available
 *          from the specified Provider object.
 *
 * @exception IllegalArgumentException if the specified provider is null.
 *
 * @see Provider
 *
 * @since 1.4
 */
public static AlgorithmParameterGenerator getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException {
    if (provider == null)
        throw new IllegalArgumentException("missing provider");
    Object[] objs = Security.getImpl(algorithm, "AlgorithmParameterGenerator", provider);
    return new AlgorithmParameterGenerator((AlgorithmParameterGeneratorSpi) objs[0], (Provider) objs[1], algorithm);
}