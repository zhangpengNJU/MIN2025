/**
 * Returns an array of all of the color/alpha components in normalized
 * form, given a pixel in this <code>ColorModel</code>.  The pixel
 * value is specified by an array of data elements of type transferType
 * passed in as an object reference.  If pixel is not a primitive array
 * of type transferType, a <code>ClassCastException</code> is thrown.
 * An <code>ArrayIndexOutOfBoundsException</code> is thrown if
 * <code>pixel</code> is not large enough to hold a pixel value for this
 * <code>ColorModel</code>.
 * Normalized components are float values between a per component minimum
 * and maximum specified by the <code>ColorSpace</code> object for this
 * <code>ColorModel</code>.  If the
 * <code>normComponents</code> array is <code>null</code>, a new array
 * will be allocated.  The <code>normComponents</code> array
 * will be returned.  Color/alpha components are stored in the
 * <code>normComponents</code> array starting at
 * <code>normOffset</code> (even if the array is allocated by this
 * method).  An <code>ArrayIndexOutOfBoundsException</code> is thrown
 * if the <code>normComponents</code> array is not <code>null</code>
 * and is not large enough to hold all the color and alpha components
 * (starting at <code>normOffset</code>).
 * <p>
 * This method must be overridden by a subclass if that subclass
 * is designed to translate pixel sample values to color component values
 * in a non-default way.  The default translations implemented by this
 * class is described in the class comments.  Any subclass implementing
 * a non-default translation must follow the constraints on allowable
 * translations defined there.
 * @param pixel the specified pixel
 * @param normComponents an array to receive the normalized components
 * @param normOffset the offset into the <code>normComponents</code>
 * array at which to start storing normalized components
 * @return an array containing normalized color and alpha
 * components.
 * @throws ClassCastException if <code>pixel</code> is not a primitive
 *          array of type transferType
 * @throws ArrayIndexOutOfBoundsException if
 *          <code>normComponents</code> is not large enough to hold all
 *          color and alpha components starting at <code>normOffset</code>
 * @throws ArrayIndexOutOfBoundsException if
 *          <code>pixel</code> is not large enough to hold a pixel
 *          value for this <code>ColorModel</code>.
 * @since 1.4
 */
public float[] getNormalizedComponents(Object pixel, float[] normComponents, int normOffset) {
    if (normComponents == null) {
        normComponents = new float[numComponents + normOffset];
    }
    switch(transferType) {
        case DataBuffer.TYPE_BYTE:
            byte[] bpixel = (byte[]) pixel;
            for (int c = 0, nc = normOffset; c < numComponents; c++, nc++) {
                normComponents[nc] = ((float) (bpixel[c] & 0xff)) / ((float) ((1 << nBits[c]) - 1));
            }
            break;
        case DataBuffer.TYPE_USHORT:
            short[] uspixel = (short[]) pixel;
            for (int c = 0, nc = normOffset; c < numComponents; c++, nc++) {
                normComponents[nc] = ((float) (uspixel[c] & 0xffff)) / ((float) ((1 << nBits[c]) - 1));
            }
            break;
        case DataBuffer.TYPE_INT:
            int[] ipixel = (int[]) pixel;
            for (int c = 0, nc = normOffset; c < numComponents; c++, nc++) {
                normComponents[nc] = ((float) ipixel[c]) / ((float) ((1 << nBits[c]) - 1));
            }
            break;
        case DataBuffer.TYPE_SHORT:
            short[] spixel = (short[]) pixel;
            for (int c = 0, nc = normOffset; c < numComponents; c++, nc++) {
                normComponents[nc] = ((float) spixel[c]) / 32767.0f;
            }
            break;
        case DataBuffer.TYPE_FLOAT:
            float[] fpixel = (float[]) pixel;
            for (int c = 0, nc = normOffset; c < numComponents; c++, nc++) {
                normComponents[nc] = fpixel[c];
            }
            break;
        case DataBuffer.TYPE_DOUBLE:
            double[] dpixel = (double[]) pixel;
            for (int c = 0, nc = normOffset; c < numComponents; c++, nc++) {
                normComponents[nc] = (float) dpixel[c];
            }
            break;
        default:
            throw new UnsupportedOperationException("This method has not been " + "implemented for transferType " + transferType);
    }
    if (supportsAlpha && isAlphaPremultiplied) {
        float alpha = normComponents[numColorComponents + normOffset];
        if (alpha != 0.0f) {
            float invAlpha = 1.0f / alpha;
            for (int c = normOffset; c < numColorComponents + normOffset; c++) {
                normComponents[c] *= invAlpha;
            }
        }
    }
    if (min != null) {
        // Normally (i.e. when this class is not subclassed to override
        // this method), the test (min != null) will be equivalent to
        // the test (nonStdScale).  However, there is an unlikely, but
        // possible case, in which this method is overridden, nonStdScale
        // is set true by initScale(), the subclass method for some
        // reason calls this superclass method, but the min and
        // diffMinMax arrays were never initialized by setupLUTs().  In
        // that case, the right thing to do is follow the intended
        // semantics of this method, and rescale the color components
        // only if the ColorSpace min/max were detected to be other
        // than 0.0/1.0 by setupLUTs().  Note that this implies the
        // transferType is byte, ushort, int, or short - i.e. components
        // derived from float and double pixel data are never rescaled.
        for (int c = 0; c < numColorComponents; c++) {
            normComponents[c + normOffset] = min[c] + diffMinMax[c] * normComponents[c + normOffset];
        }
    }
    return normComponents;
}