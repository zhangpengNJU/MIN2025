/**
 * Returns a new {@code Collector} described by the given {@code supplier},
 * {@code accumulator}, and {@code combiner} functions.  The resulting
 * {@code Collector} has the {@code Collector.Characteristics.IDENTITY_FINISH}
 * characteristic.
 *
 * @param supplier The supplier function for the new collector
 * @param accumulator The accumulator function for the new collector
 * @param combiner The combiner function for the new collector
 * @param characteristics The collector characteristics for the new
 *                        collector
 * @param <T> The type of input elements for the new collector
 * @param <R> The type of intermediate accumulation result, and final result,
 *           for the new collector
 * @throws NullPointerException if any argument is null
 * @return the new {@code Collector}
 */
public static <T, R> Collector<T, R, R> of(Supplier<R> supplier, BiConsumer<R, T> accumulator, BinaryOperator<R> combiner, Characteristics... characteristics) {
    Objects.requireNonNull(supplier);
    Objects.requireNonNull(accumulator);
    Objects.requireNonNull(combiner);
    Objects.requireNonNull(characteristics);
    Set<Characteristics> cs = (characteristics.length == 0) ? Collectors.CH_ID : Collections.unmodifiableSet(EnumSet.of(Collector.Characteristics.IDENTITY_FINISH, characteristics));
    return new Collectors.CollectorImpl<>(supplier, accumulator, combiner, cs);
}