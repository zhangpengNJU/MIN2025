/**
 * Copies all elements from one block of memory to another block,
 * *unconditionally* byte swapping the elements on the fly.
 *
 * <p>This method determines each block's base address by means of two parameters,
 * and so it provides (in effect) a <em>double-register</em> addressing mode,
 * as discussed in {@link sun.misc.Unsafe#getInt(Object,long)}.  When the
 * object reference is null, the offset supplies an absolute base address.
 *
 * @since 8u201
 */
private static void copySwapMemory(Object srcBase, long srcOffset, Object destBase, long destOffset, long bytes, long elemSize) {
    if (bytes < 0) {
        throw new IllegalArgumentException();
    }
    if (elemSize != 2 && elemSize != 4 && elemSize != 8) {
        throw new IllegalArgumentException();
    }
    if (bytes % elemSize != 0) {
        throw new IllegalArgumentException();
    }
    if ((srcBase == null && srcOffset == 0) || (destBase == null && destOffset == 0)) {
        throw new NullPointerException();
    }
    // Must be off-heap, or primitive heap arrays
    if (srcBase != null && (srcOffset < 0 || !isPrimitiveArray(srcBase.getClass()))) {
        throw new IllegalArgumentException();
    }
    if (destBase != null && (destOffset < 0 || !isPrimitiveArray(destBase.getClass()))) {
        throw new IllegalArgumentException();
    }
    // Sanity check size and offsets on 32-bit platforms. Most
    // significant 32 bits must be zero.
    if (unsafe.addressSize() == 4 && (bytes >>> 32 != 0 || srcOffset >>> 32 != 0 || destOffset >>> 32 != 0)) {
        throw new IllegalArgumentException();
    }
    if (bytes == 0) {
        return;
    }
    copySwapMemory0(srcBase, srcOffset, destBase, destOffset, bytes, elemSize);
}