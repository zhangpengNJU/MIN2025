/**
 * Receives a datagram packet from this socket. When this method
 * returns, the {@code DatagramPacket}'s buffer is filled with
 * the data received. The datagram packet also contains the sender's
 * IP address, and the port number on the sender's machine.
 * <p>
 * This method blocks until a datagram is received. The
 * {@code length} field of the datagram packet object contains
 * the length of the received message. If the message is longer than
 * the packet's length, the message is truncated.
 * <p>
 * If there is a security manager, a packet cannot be received if the
 * security manager's {@code checkAccept} method
 * does not allow it.
 *
 * @param      p   the {@code DatagramPacket} into which to place
 *                 the incoming data.
 * @exception  IOException  if an I/O error occurs.
 * @exception  SocketTimeoutException  if setSoTimeout was previously called
 *                 and the timeout has expired.
 * @exception  PortUnreachableException may be thrown if the socket is connected
 *             to a currently unreachable destination. Note, there is no guarantee that the
 *             exception will be thrown.
 * @exception  java.nio.channels.IllegalBlockingModeException
 *             if this socket has an associated channel,
 *             and the channel is in non-blocking mode.
 * @see        java.net.DatagramPacket
 * @see        java.net.DatagramSocket
 * @revised 1.4
 * @spec JSR-51
 */
public synchronized void receive(DatagramPacket p) throws IOException {
    synchronized (p) {
        if (!isBound())
            bind(new InetSocketAddress(0));
        if (connectState == ST_NOT_CONNECTED) {
            // check the address is ok with the security manager before every recv.
            SecurityManager security = System.getSecurityManager();
            if (security != null) {
                while (true) {
                    String peekAd = null;
                    int peekPort = 0;
                    // peek at the packet to see who it is from.
                    if (!oldImpl) {
                        // We can use the new peekData() API
                        DatagramPacket peekPacket = new DatagramPacket(new byte[1], 1);
                        peekPort = getImpl().peekData(peekPacket);
                        peekAd = peekPacket.getAddress().getHostAddress();
                    } else {
                        InetAddress adr = new InetAddress();
                        peekPort = getImpl().peek(adr);
                        peekAd = adr.getHostAddress();
                    }
                    try {
                        security.checkAccept(peekAd, peekPort);
                        // security check succeeded - so now break
                        // and recv the packet.
                        break;
                    } catch (SecurityException se) {
                        // Throw away the offending packet by consuming
                        // it in a tmp buffer.
                        DatagramPacket tmp = new DatagramPacket(new byte[1], 1);
                        getImpl().receive(tmp);
                        // silently discard the offending packet
                        // and continue: unknown/malicious
                        // entities on nets should not make
                        // runtime throw security exception and
                        // disrupt the applet by sending random
                        // datagram packets.
                        continue;
                    }
                }
            // end of while
            }
        }
        DatagramPacket tmp = null;
        if ((connectState == ST_CONNECTED_NO_IMPL) || explicitFilter) {
            // We have to do the filtering the old fashioned way since
            // the native impl doesn't support connect or the connect
            // via the impl failed, or .. "explicitFilter" may be set when
            // a socket is connected via the impl, for a period of time
            // when packets from other sources might be queued on socket.
            boolean stop = false;
            while (!stop) {
                InetAddress peekAddress = null;
                int peekPort = -1;
                // peek at the packet to see who it is from.
                if (!oldImpl) {
                    // We can use the new peekData() API
                    DatagramPacket peekPacket = new DatagramPacket(new byte[1], 1);
                    peekPort = getImpl().peekData(peekPacket);
                    peekAddress = peekPacket.getAddress();
                } else {
                    // this api only works for IPv4
                    peekAddress = new InetAddress();
                    peekPort = getImpl().peek(peekAddress);
                }
                if ((!connectedAddress.equals(peekAddress)) || (connectedPort != peekPort)) {
                    // throw the packet away and silently continue
                    tmp = new DatagramPacket(new byte[1024], 1024);
                    getImpl().receive(tmp);
                    if (explicitFilter) {
                        if (checkFiltering(tmp)) {
                            stop = true;
                        }
                    }
                } else {
                    stop = true;
                }
            }
        }
        // If the security check succeeds, or the datagram is
        // connected then receive the packet
        getImpl().receive(p);
        if (explicitFilter && tmp == null) {
            // packet was not filtered, account for it here
            checkFiltering(p);
        }
    }
}