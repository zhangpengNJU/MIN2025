/**
 * Specifies, for jobs using these attributes, the ranges of pages to be
 * printed, if a range of pages is to be printed. All range numbers are
 * inclusive. If this attribute is not specified, then the values from the
 * fromPage and toPages attributes are used. If pageRanges and either or
 * both of fromPage and toPage are specified, pageRanges takes precedence.
 * Specifying none of pageRanges, fromPage, or toPage is equivalent to
 * calling setPageRanges(new int[][] { new int[] { <i>minPage</i>,
 *                                                 <i>minPage</i> } });
 *
 * @param   pageRanges an array of integer arrays of 2 elements. An array
 *          is interpreted as a range spanning all pages including and
 *          between the specified pages. Ranges must be in ascending
 *          order and must not overlap. Specified page numbers cannot be
 *          less than <i>minPage</i> nor greater than <i>maxPage</i>.
 *          For example:
 *          (new int[][] { new int[] { 1, 3 }, new int[] { 5, 5 },
 *                         new int[] { 15, 19 } }),
 *          specifies pages 1, 2, 3, 5, 15, 16, 17, 18, and 19. Note that
 *          (new int[][] { new int[] { 1, 1 }, new int[] { 1, 2 } }),
 *          is an invalid set of page ranges because the two ranges
 *          overlap.
 * @throws  IllegalArgumentException if one or more of the above
 *          conditions is violated.
 */
public void setPageRanges(int[][] pageRanges) {
    String xcp = "Invalid value for attribute pageRanges";
    int first = 0;
    int last = 0;
    if (pageRanges == null) {
        throw new IllegalArgumentException(xcp);
    }
    for (int i = 0; i < pageRanges.length; i++) {
        if (pageRanges[i] == null || pageRanges[i].length != 2 || pageRanges[i][0] <= last || pageRanges[i][1] < pageRanges[i][0]) {
            throw new IllegalArgumentException(xcp);
        }
        last = pageRanges[i][1];
        if (first == 0) {
            first = pageRanges[i][0];
        }
    }
    if (first < minPage || last > maxPage) {
        throw new IllegalArgumentException(xcp);
    }
    // Store a copy because otherwise client code could circumvent the
    // the checks made above by holding a reference to the array and
    // modifying it after calling setPageRanges.
    int[][] copy = new int[pageRanges.length][2];
    for (int i = 0; i < pageRanges.length; i++) {
        copy[i][0] = pageRanges[i][0];
        copy[i][1] = pageRanges[i][1];
    }
    this.pageRanges = copy;
    this.prFirst = first;
    this.prLast = last;
}