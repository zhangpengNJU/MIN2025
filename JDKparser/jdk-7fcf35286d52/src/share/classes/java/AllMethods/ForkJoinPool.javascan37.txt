/**
 * Scans for and tries to steal a top-level task. Scans start at a
 * random location, randomly moving on apparent contention,
 * otherwise continuing linearly until reaching two consecutive
 * empty passes over all queues with the same checksum (summing
 * each base index of each queue, that moves on each steal), at
 * which point the worker tries to inactivate and then re-scans,
 * attempting to re-activate (itself or some other worker) if
 * finding a task; otherwise returning null to await work.  Scans
 * otherwise touch as little memory as possible, to reduce
 * disruption on other scanning threads.
 *
 * @param w the worker (via its WorkQueue)
 * @param r a random seed
 * @return a task, or null if none found
 */
private ForkJoinTask<?> scan(WorkQueue w, int r) {
    WorkQueue[] ws;
    int m;
    if ((ws = workQueues) != null && (m = ws.length - 1) > 0 && w != null) {
        // initially non-negative
        int ss = w.scanState;
        for (int origin = r & m, k = origin, oldSum = 0, checkSum = 0; ; ) {
            WorkQueue q;
            ForkJoinTask<?>[] a;
            ForkJoinTask<?> t;
            int b, n;
            long c;
            if ((q = ws[k]) != null) {
                if ((n = (b = q.base) - q.top) < 0 && (a = q.array) != null) {
                    // non-empty
                    long i = (((a.length - 1) & b) << ASHIFT) + ABASE;
                    if ((t = ((ForkJoinTask<?>) U.getObjectVolatile(a, i))) != null && q.base == b) {
                        if (ss >= 0) {
                            if (U.compareAndSwapObject(a, i, t, null)) {
                                q.base = b + 1;
                                if (// signal others
                                n < -1)
                                    signalWork(ws, q);
                                return t;
                            }
                        } else if (// try to activate
                        oldSum == 0 && w.scanState < 0)
                            tryRelease(c = ctl, ws[m & (int) c], AC_UNIT);
                    }
                    if (// refresh
                    ss < 0)
                        ss = w.scanState;
                    r ^= r << 1;
                    r ^= r >>> 3;
                    r ^= r << 10;
                    // move and rescan
                    origin = k = r & m;
                    oldSum = checkSum = 0;
                    continue;
                }
                checkSum += b;
            }
            if ((k = (k + 1) & m) == origin) {
                // continue until stable
                if ((ss >= 0 || (ss == (ss = w.scanState))) && oldSum == (oldSum = checkSum)) {
                    if (// already inactive
                    ss < 0 || w.qlock < 0)
                        break;
                    // try to inactivate
                    int ns = ss | INACTIVE;
                    long nc = ((SP_MASK & ns) | (UC_MASK & ((c = ctl) - AC_UNIT)));
                    // hold prev stack top
                    w.stackPred = (int) c;
                    U.putInt(w, QSCANSTATE, ns);
                    if (U.compareAndSwapLong(this, CTL, c, nc))
                        ss = ns;
                    else
                        // back out
                        w.scanState = ss;
                }
                checkSum = 0;
            }
        }
    }
    return null;
}