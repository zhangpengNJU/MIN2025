/**
 * Returns a {@code BigDecimal} whose value is {@code (xs /
 * ys)}, with rounding according to the context settings.
 */
private static BigDecimal divide(long xs, int xscale, BigInteger ys, int yscale, long preferredScale, MathContext mc) {
    // Normalize dividend & divisor so that both fall into [0.1, 0.999...]
    if (compareMagnitudeNormalized(xs, xscale, ys, yscale) > 0) {
        // satisfy constraint (b)
        // [that is, divisor *= 10]
        yscale -= 1;
    }
    int mcp = mc.precision;
    int roundingMode = mc.roundingMode.oldMode;
    // In order to find out whether the divide generates the exact result,
    // we avoid calling the above divide method. 'quotient' holds the
    // return BigDecimal object whose scale will be set to 'scl'.
    BigDecimal quotient;
    int scl = checkScaleNonZero(preferredScale + yscale - xscale + mcp);
    if (checkScaleNonZero((long) mcp + yscale - xscale) > 0) {
        int raise = checkScaleNonZero((long) mcp + yscale - xscale);
        BigInteger rb = bigMultiplyPowerTen(xs, raise);
        quotient = divideAndRound(rb, ys, scl, roundingMode, checkScaleNonZero(preferredScale));
    } else {
        int newScale = checkScaleNonZero((long) xscale - mcp);
        int raise = checkScaleNonZero((long) newScale - yscale);
        BigInteger rb = bigMultiplyPowerTen(ys, raise);
        quotient = divideAndRound(BigInteger.valueOf(xs), rb, scl, roundingMode, checkScaleNonZero(preferredScale));
    }
    // doRound, here, only affects 1000000000 case.
    return doRound(quotient, mc);
}