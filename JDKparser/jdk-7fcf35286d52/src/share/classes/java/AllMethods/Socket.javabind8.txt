/**
 * Binds the socket to a local address.
 * <P>
 * If the address is {@code null}, then the system will pick up
 * an ephemeral port and a valid local address to bind the socket.
 *
 * @param   bindpoint the {@code SocketAddress} to bind to
 * @throws  IOException if the bind operation fails, or if the socket
 *                     is already bound.
 * @throws  IllegalArgumentException if bindpoint is a
 *          SocketAddress subclass not supported by this socket
 * @throws  SecurityException  if a security manager exists and its
 *          {@code checkListen} method doesn't allow the bind
 *          to the local port.
 *
 * @since   1.4
 * @see #isBound
 */
public void bind(SocketAddress bindpoint) throws IOException {
    if (isClosed())
        throw new SocketException("Socket is closed");
    if (!oldImpl && isBound())
        throw new SocketException("Already bound");
    if (bindpoint != null && (!(bindpoint instanceof InetSocketAddress)))
        throw new IllegalArgumentException("Unsupported address type");
    InetSocketAddress epoint = (InetSocketAddress) bindpoint;
    if (epoint != null && epoint.isUnresolved())
        throw new SocketException("Unresolved address");
    if (epoint == null) {
        epoint = new InetSocketAddress(0);
    }
    InetAddress addr = epoint.getAddress();
    int port = epoint.getPort();
    checkAddress(addr, "bind");
    SecurityManager security = System.getSecurityManager();
    if (security != null) {
        security.checkListen(port);
    }
    getImpl().bind(addr, port);
    bound = true;
}