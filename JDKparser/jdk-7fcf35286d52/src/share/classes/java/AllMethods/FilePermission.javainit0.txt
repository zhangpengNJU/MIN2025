/**
 * initialize a FilePermission object. Common to all constructors.
 * Also called during de-serialization.
 *
 * @param mask the actions mask to use.
 */
private void init(int mask) {
    if ((mask & ALL) != mask)
        throw new IllegalArgumentException("invalid actions mask");
    if (mask == NONE)
        throw new IllegalArgumentException("invalid actions mask");
    if ((cpath = getName()) == null)
        throw new NullPointerException("name can't be null");
    this.mask = mask;
    if (cpath.equals("<<ALL FILES>>")) {
        allFiles = true;
        directory = true;
        recursive = true;
        cpath = "";
        return;
    }
    // Validate path by platform's default file system
    // Note: this check does not apply during FilePermission
    // class initialization.
    if (builtInFS != null) {
        try {
            String name = cpath.endsWith("*") ? cpath.substring(0, cpath.length() - 1) + "-" : cpath;
            builtInFS.getPath(new File(name).getPath());
        } catch (InvalidPathException ipe) {
            invalid = true;
            return;
        }
    }
    // store only the canonical cpath if possible
    cpath = AccessController.doPrivileged(new PrivilegedAction<String>() {

        public String run() {
            try {
                String path = cpath;
                if (cpath.endsWith("*")) {
                    // call getCanonicalPath with a path with wildcard character
                    // replaced to avoid calling it with paths that are
                    // intended to match all entries in a directory
                    path = path.substring(0, path.length() - 1) + "-";
                    path = new File(path).getCanonicalPath();
                    return path.substring(0, path.length() - 1) + "*";
                } else {
                    return new File(path).getCanonicalPath();
                }
            } catch (IOException ioe) {
                return cpath;
            }
        }
    });
    int len = cpath.length();
    char last = ((len > 0) ? cpath.charAt(len - 1) : 0);
    if (last == RECURSIVE_CHAR && cpath.charAt(len - 2) == File.separatorChar) {
        directory = true;
        recursive = true;
        cpath = cpath.substring(0, --len);
    } else if (last == WILD_CHAR && cpath.charAt(len - 2) == File.separatorChar) {
        directory = true;
        // recursive = false;
        cpath = cpath.substring(0, --len);
    } else {
    // overkill since they are initialized to false, but
    // commented out here to remind us...
    // directory = false;
    // recursive = false;
    }
// XXX: at this point the path should be absolute. die if it isn't?
}