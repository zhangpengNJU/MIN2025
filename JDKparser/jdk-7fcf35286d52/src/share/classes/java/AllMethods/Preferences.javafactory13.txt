private static PreferencesFactory factory1() {
    // 2. Try service provider interface
    Iterator<PreferencesFactory> itr = ServiceLoader.load(PreferencesFactory.class, ClassLoader.getSystemClassLoader()).iterator();
    // choose first provider instance
    while (itr.hasNext()) {
        try {
            return itr.next();
        } catch (ServiceConfigurationError sce) {
            if (sce.getCause() instanceof SecurityException) {
                // Ignore the security exception, try the next provider
                continue;
            }
            throw sce;
        }
    }
    // 3. Use platform-specific system-wide default
    String osName = System.getProperty("os.name");
    String platformFactory;
    if (osName.startsWith("Windows")) {
        platformFactory = "java.util.prefs.WindowsPreferencesFactory";
    } else if (osName.contains("OS X")) {
        platformFactory = "java.util.prefs.MacOSXPreferencesFactory";
    } else {
        platformFactory = "java.util.prefs.FileSystemPreferencesFactory";
    }
    try {
        return (PreferencesFactory) Class.forName(platformFactory, false, Preferences.class.getClassLoader()).newInstance();
    } catch (Exception e) {
        throw new InternalError("Can't instantiate platform default Preferences factory " + platformFactory, e);
    }
}