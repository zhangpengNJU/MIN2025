/**
 * Converts calendar field values to the time value (millisecond
 * offset from the <a href="Calendar.html#Epoch">Epoch</a>).
 *
 * @exception IllegalArgumentException if any calendar fields are invalid.
 */
protected void computeTime() {
    // In non-lenient mode, perform brief checking of calendar
    // fields which have been set externally. Through this
    // checking, the field values are stored in originalFields[]
    // to see if any of them are normalized later.
    if (!isLenient()) {
        if (originalFields == null) {
            originalFields = new int[FIELD_COUNT];
        }
        for (int field = 0; field < FIELD_COUNT; field++) {
            int value = internalGet(field);
            if (isExternallySet(field)) {
                // Quick validation for any out of range values
                if (value < getMinimum(field) || value > getMaximum(field)) {
                    throw new IllegalArgumentException(getFieldName(field));
                }
            }
            originalFields[field] = value;
        }
    }
    // Let the super class determine which calendar fields to be
    // used to calculate the time.
    int fieldMask = selectFields();
    int year;
    int era;
    if (isSet(ERA)) {
        era = internalGet(ERA);
        year = isSet(YEAR) ? internalGet(YEAR) : 1;
    } else {
        if (isSet(YEAR)) {
            era = currentEra;
            year = internalGet(YEAR);
        } else {
            // Equivalent to 1970 (Gregorian)
            era = SHOWA;
            year = 45;
        }
    }
    // Calculate the time of day. We rely on the convention that
    // an UNSET field has 0.
    long timeOfDay = 0;
    if (isFieldSet(fieldMask, HOUR_OF_DAY)) {
        timeOfDay += (long) internalGet(HOUR_OF_DAY);
    } else {
        timeOfDay += internalGet(HOUR);
        // The default value of AM_PM is 0 which designates AM.
        if (isFieldSet(fieldMask, AM_PM)) {
            timeOfDay += 12 * internalGet(AM_PM);
        }
    }
    timeOfDay *= 60;
    timeOfDay += internalGet(MINUTE);
    timeOfDay *= 60;
    timeOfDay += internalGet(SECOND);
    timeOfDay *= 1000;
    timeOfDay += internalGet(MILLISECOND);
    // Convert the time of day to the number of days and the
    // millisecond offset from midnight.
    long fixedDate = timeOfDay / ONE_DAY;
    timeOfDay %= ONE_DAY;
    while (timeOfDay < 0) {
        timeOfDay += ONE_DAY;
        --fixedDate;
    }
    // Calculate the fixed date since January 1, 1 (Gregorian).
    fixedDate += getFixedDate(era, year, fieldMask);
    // millis represents local wall-clock time in milliseconds.
    long millis = (fixedDate - EPOCH_OFFSET) * ONE_DAY + timeOfDay;
    // Compute the time zone offset and DST offset.  There are two potential
    // ambiguities here.  We'll assume a 2:00 am (wall time) switchover time
    // for discussion purposes here.
    // 1. The transition into DST.  Here, a designated time of 2:00 am - 2:59 am
    // can be in standard or in DST depending.  However, 2:00 am is an invalid
    // representation (the representation jumps from 1:59:59 am Std to 3:00:00 am DST).
    // We assume standard time.
    // 2. The transition out of DST.  Here, a designated time of 1:00 am - 1:59 am
    // can be in standard or DST.  Both are valid representations (the rep
    // jumps from 1:59:59 DST to 1:00:00 Std).
    // Again, we assume standard time.
    // We use the TimeZone object, unless the user has explicitly set the ZONE_OFFSET
    // or DST_OFFSET fields; then we use those fields.
    TimeZone zone = getZone();
    if (zoneOffsets == null) {
        zoneOffsets = new int[2];
    }
    int tzMask = fieldMask & (ZONE_OFFSET_MASK | DST_OFFSET_MASK);
    if (tzMask != (ZONE_OFFSET_MASK | DST_OFFSET_MASK)) {
        if (zone instanceof ZoneInfo) {
            ((ZoneInfo) zone).getOffsetsByWall(millis, zoneOffsets);
        } else {
            zone.getOffsets(millis - zone.getRawOffset(), zoneOffsets);
        }
    }
    if (tzMask != 0) {
        if (isFieldSet(tzMask, ZONE_OFFSET)) {
            zoneOffsets[0] = internalGet(ZONE_OFFSET);
        }
        if (isFieldSet(tzMask, DST_OFFSET)) {
            zoneOffsets[1] = internalGet(DST_OFFSET);
        }
    }
    // Adjust the time zone offset values to get the UTC time.
    millis -= zoneOffsets[0] + zoneOffsets[1];
    // Set this calendar's time in milliseconds
    time = millis;
    int mask = computeFields(fieldMask | getSetStateFields(), tzMask);
    if (!isLenient()) {
        for (int field = 0; field < FIELD_COUNT; field++) {
            if (!isExternallySet(field)) {
                continue;
            }
            if (originalFields[field] != internalGet(field)) {
                int wrongValue = internalGet(field);
                // Restore the original field values
                System.arraycopy(originalFields, 0, fields, 0, fields.length);
                throw new IllegalArgumentException(getFieldName(field) + "=" + wrongValue + ", expected " + originalFields[field]);
            }
        }
    }
    setFieldsNormalized(mask);
}