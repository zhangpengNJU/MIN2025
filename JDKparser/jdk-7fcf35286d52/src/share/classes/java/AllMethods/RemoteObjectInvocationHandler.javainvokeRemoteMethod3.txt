/**
 * Handles remote methods.
 */
private Object invokeRemoteMethod(Object proxy, Method method, Object[] args) throws Exception {
    try {
        if (!(proxy instanceof Remote)) {
            throw new IllegalArgumentException("proxy not Remote instance");
        }
        // Verify that the method is declared on an interface that extends Remote
        Class<?> decl = method.getDeclaringClass();
        if (!Remote.class.isAssignableFrom(decl)) {
            throw new RemoteException("Method is not Remote: " + decl + "::" + method);
        }
        return ref.invoke((Remote) proxy, method, args, getMethodHash(method));
    } catch (Exception e) {
        if (!(e instanceof RuntimeException)) {
            Class<?> cl = proxy.getClass();
            try {
                method = cl.getMethod(method.getName(), method.getParameterTypes());
            } catch (NoSuchMethodException nsme) {
                throw (IllegalArgumentException) new IllegalArgumentException().initCause(nsme);
            }
            Class<?> thrownType = e.getClass();
            for (Class<?> declaredType : method.getExceptionTypes()) {
                if (declaredType.isAssignableFrom(thrownType)) {
                    throw e;
                }
            }
            e = new UnexpectedException("unexpected exception", e);
        }
        throw e;
    }
}