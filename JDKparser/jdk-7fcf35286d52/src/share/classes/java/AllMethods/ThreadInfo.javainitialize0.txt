/**
 * Initialize ThreadInfo object
 *
 * @param t             Thread
 * @param state         Thread state
 * @param lockObj       Object on which the thread is blocked
 * @param lockOwner     the thread holding the lock
 * @param blockedCount  Number of times blocked to enter a lock
 * @param blockedTime   Approx time blocked to enter a lock
 * @param waitedCount   Number of times waited on a lock
 * @param waitedTime    Approx time waited on a lock
 * @param stackTrace    Thread stack trace
 * @param lockedMonitors List of locked monitors
 * @param lockedSynchronizers List of locked synchronizers
 */
private void initialize(Thread t, int state, Object lockObj, Thread lockOwner, long blockedCount, long blockedTime, long waitedCount, long waitedTime, StackTraceElement[] stackTrace, MonitorInfo[] lockedMonitors, LockInfo[] lockedSynchronizers) {
    this.threadId = t.getId();
    this.threadName = t.getName();
    this.threadState = ManagementFactoryHelper.toThreadState(state);
    this.suspended = ManagementFactoryHelper.isThreadSuspended(state);
    this.inNative = ManagementFactoryHelper.isThreadRunningNative(state);
    this.blockedCount = blockedCount;
    this.blockedTime = blockedTime;
    this.waitedCount = waitedCount;
    this.waitedTime = waitedTime;
    if (lockObj == null) {
        this.lock = null;
        this.lockName = null;
    } else {
        this.lock = new LockInfo(lockObj);
        this.lockName = lock.getClassName() + '@' + Integer.toHexString(lock.getIdentityHashCode());
    }
    if (lockOwner == null) {
        this.lockOwnerId = -1;
        this.lockOwnerName = null;
    } else {
        this.lockOwnerId = lockOwner.getId();
        this.lockOwnerName = lockOwner.getName();
    }
    if (stackTrace == null) {
        this.stackTrace = NO_STACK_TRACE;
    } else {
        this.stackTrace = stackTrace;
    }
    this.lockedMonitors = lockedMonitors;
    this.lockedSynchronizers = lockedSynchronizers;
}