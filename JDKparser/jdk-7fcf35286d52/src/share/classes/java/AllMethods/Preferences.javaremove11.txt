/**
 * Removes the value associated with the specified key in this preference
 * node, if any.
 *
 * <p>If this implementation supports <i>stored defaults</i>, and there is
 * such a default for the specified preference, the stored default will be
 * "exposed" by this call, in the sense that it will be returned
 * by a succeeding call to <tt>get</tt>.
 *
 * @param key key whose mapping is to be removed from the preference node.
 * @throws NullPointerException if <tt>key</tt> is <tt>null</tt>.
 * @throws IllegalStateException if this node (or an ancestor) has been
 *         removed with the {@link #removeNode()} method.
 */
public abstract void remove(String key);