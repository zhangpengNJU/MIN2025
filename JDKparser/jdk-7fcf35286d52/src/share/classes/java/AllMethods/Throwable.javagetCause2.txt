/**
 * Returns the cause of this throwable or {@code null} if the
 * cause is nonexistent or unknown.  (The cause is the throwable that
 * caused this throwable to get thrown.)
 *
 * <p>This implementation returns the cause that was supplied via one of
 * the constructors requiring a {@code Throwable}, or that was set after
 * creation with the {@link #initCause(Throwable)} method.  While it is
 * typically unnecessary to override this method, a subclass can override
 * it to return a cause set by some other means.  This is appropriate for
 * a "legacy chained throwable" that predates the addition of chained
 * exceptions to {@code Throwable}.  Note that it is <i>not</i>
 * necessary to override any of the {@code PrintStackTrace} methods,
 * all of which invoke the {@code getCause} method to determine the
 * cause of a throwable.
 *
 * @return  the cause of this throwable or {@code null} if the
 *          cause is nonexistent or unknown.
 * @since 1.4
 */
public synchronized Throwable getCause() {
    return (cause == this ? null : cause);
}