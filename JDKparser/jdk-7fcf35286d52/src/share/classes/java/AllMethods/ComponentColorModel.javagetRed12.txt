/**
 * Returns the red color component for the specified pixel, scaled
 * from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
 * is done if necessary.  The <CODE>pixel</CODE> value is specified by an array
 * of data elements of type <CODE>transferType</CODE> passed in as an object
 * reference. The returned value will be a non pre-multiplied value. If the
 * alpha is premultiplied, this method divides it out before returning
 * the value (if the alpha value is 0, the red value will be 0). Since
 * <code>ComponentColorModel</code> can be subclassed, subclasses
 * inherit the implementation of this method and if they don't override
 * it then they throw an exception if they use an unsupported
 * <code>transferType</code>.
 *
 * @param inData The pixel from which you want to get the red color component,
 * specified by an array of data elements of type <CODE>transferType</CODE>.
 *
 * @return The red color component for the specified pixel, as an int.
 *
 * @throws ClassCastException If <CODE>inData</CODE> is not a primitive array
 * of type <CODE>transferType</CODE>.
 * @throws ArrayIndexOutOfBoundsException if <CODE>inData</CODE> is not
 * large enough to hold a pixel value for this
 * <CODE>ColorModel</CODE>.
 * @throws UnsupportedOperationException If the transfer type of
 * this <CODE>ComponentColorModel</CODE>
 * is not one of the supported transfer types:
 * <CODE>DataBuffer.TYPE_BYTE</CODE>, <CODE>DataBuffer.TYPE_USHORT</CODE>,
 * <CODE>DataBuffer.TYPE_INT</CODE>, <CODE>DataBuffer.TYPE_SHORT</CODE>,
 * <CODE>DataBuffer.TYPE_FLOAT</CODE>, or <CODE>DataBuffer.TYPE_DOUBLE</CODE>.
 */
public int getRed(Object inData) {
    return getRGBComponent(inData, 0);
}