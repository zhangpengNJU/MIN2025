/**
 * Returns an iterator object that iterates along the
 * <code>Shape</code> boundary and provides access to the geometry of the
 * <code>Shape</code> outline.  If an optional {@link AffineTransform}
 * is specified, the coordinates returned in the iteration are
 * transformed accordingly.
 * <p>
 * Each call to this method returns a fresh <code>PathIterator</code>
 * object that traverses the geometry of the <code>Shape</code> object
 * independently from any other <code>PathIterator</code> objects in use
 * at the same time.
 * <p>
 * It is recommended, but not guaranteed, that objects
 * implementing the <code>Shape</code> interface isolate iterations
 * that are in process from any changes that might occur to the original
 * object's geometry during such iterations.
 *
 * @param at an optional <code>AffineTransform</code> to be applied to the
 *          coordinates as they are returned in the iteration, or
 *          <code>null</code> if untransformed coordinates are desired
 * @return a new <code>PathIterator</code> object, which independently
 *          traverses the geometry of the <code>Shape</code>.
 * @since 1.2
 */
public PathIterator getPathIterator(AffineTransform at);