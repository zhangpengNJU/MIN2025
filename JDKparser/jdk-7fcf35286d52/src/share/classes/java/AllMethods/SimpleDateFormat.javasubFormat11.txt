/**
 * Private member function that does the real date/time formatting.
 */
private void subFormat(int patternCharIndex, int count, FieldDelegate delegate, StringBuffer buffer, boolean useDateFormatSymbols) {
    int maxIntCount = Integer.MAX_VALUE;
    String current = null;
    int beginOffset = buffer.length();
    int field = PATTERN_INDEX_TO_CALENDAR_FIELD[patternCharIndex];
    int value;
    if (field == CalendarBuilder.WEEK_YEAR) {
        if (calendar.isWeekDateSupported()) {
            value = calendar.getWeekYear();
        } else {
            // use calendar year 'y' instead
            patternCharIndex = PATTERN_YEAR;
            field = PATTERN_INDEX_TO_CALENDAR_FIELD[patternCharIndex];
            value = calendar.get(field);
        }
    } else if (field == CalendarBuilder.ISO_DAY_OF_WEEK) {
        value = CalendarBuilder.toISODayOfWeek(calendar.get(Calendar.DAY_OF_WEEK));
    } else {
        value = calendar.get(field);
    }
    int style = (count >= 4) ? Calendar.LONG : Calendar.SHORT;
    if (!useDateFormatSymbols && field < Calendar.ZONE_OFFSET && patternCharIndex != PATTERN_MONTH_STANDALONE) {
        current = calendar.getDisplayName(field, style, locale);
    }
    // Note: zeroPaddingNumber() assumes that maxDigits is either
    // 2 or maxIntCount. If we make any changes to this,
    // zeroPaddingNumber() must be fixed.
    switch(patternCharIndex) {
        case // 'G'
        PATTERN_ERA:
            if (useDateFormatSymbols) {
                String[] eras = formatData.getEras();
                if (value < eras.length) {
                    current = eras[value];
                }
            }
            if (current == null) {
                current = "";
            }
            break;
        // 'Y'
        case PATTERN_WEEK_YEAR:
        case // 'y'
        PATTERN_YEAR:
            if (calendar instanceof GregorianCalendar) {
                if (count != 2) {
                    zeroPaddingNumber(value, count, maxIntCount, buffer);
                } else {
                    zeroPaddingNumber(value, 2, 2, buffer);
                }
            // clip 1996 to 96
            } else {
                if (current == null) {
                    zeroPaddingNumber(value, style == Calendar.LONG ? 1 : count, maxIntCount, buffer);
                }
            }
            break;
        case // 'M' (context seinsive)
        PATTERN_MONTH:
            if (useDateFormatSymbols) {
                String[] months;
                if (count >= 4) {
                    months = formatData.getMonths();
                    current = months[value];
                } else if (count == 3) {
                    months = formatData.getShortMonths();
                    current = months[value];
                }
            } else {
                if (count < 3) {
                    current = null;
                } else if (forceStandaloneForm) {
                    current = calendar.getDisplayName(field, style | 0x8000, locale);
                    if (current == null) {
                        current = calendar.getDisplayName(field, style, locale);
                    }
                }
            }
            if (current == null) {
                zeroPaddingNumber(value + 1, count, maxIntCount, buffer);
            }
            break;
        case // 'L'
        PATTERN_MONTH_STANDALONE:
            assert current == null;
            if (locale == null) {
                String[] months;
                if (count >= 4) {
                    months = formatData.getMonths();
                    current = months[value];
                } else if (count == 3) {
                    months = formatData.getShortMonths();
                    current = months[value];
                }
            } else {
                if (count >= 3) {
                    current = calendar.getDisplayName(field, style | 0x8000, locale);
                }
            }
            if (current == null) {
                zeroPaddingNumber(value + 1, count, maxIntCount, buffer);
            }
            break;
        case // 'k' 1-based.  eg, 23:59 + 1 hour =>> 24:59
        PATTERN_HOUR_OF_DAY1:
            if (current == null) {
                if (value == 0) {
                    zeroPaddingNumber(calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1, count, maxIntCount, buffer);
                } else {
                    zeroPaddingNumber(value, count, maxIntCount, buffer);
                }
            }
            break;
        case // 'E'
        PATTERN_DAY_OF_WEEK:
            if (useDateFormatSymbols) {
                String[] weekdays;
                if (count >= 4) {
                    weekdays = formatData.getWeekdays();
                    current = weekdays[value];
                } else {
                    // count < 4, use abbreviated form if exists
                    weekdays = formatData.getShortWeekdays();
                    current = weekdays[value];
                }
            }
            break;
        case // 'a'
        PATTERN_AM_PM:
            if (useDateFormatSymbols) {
                String[] ampm = formatData.getAmPmStrings();
                current = ampm[value];
            }
            break;
        case // 'h' 1-based.  eg, 11PM + 1 hour =>> 12 AM
        PATTERN_HOUR1:
            if (current == null) {
                if (value == 0) {
                    zeroPaddingNumber(calendar.getLeastMaximum(Calendar.HOUR) + 1, count, maxIntCount, buffer);
                } else {
                    zeroPaddingNumber(value, count, maxIntCount, buffer);
                }
            }
            break;
        case // 'z'
        PATTERN_ZONE_NAME:
            if (current == null) {
                if (formatData.locale == null || formatData.isZoneStringsSet) {
                    int zoneIndex = formatData.getZoneIndex(calendar.getTimeZone().getID());
                    if (zoneIndex == -1) {
                        value = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);
                        buffer.append(ZoneInfoFile.toCustomID(value));
                    } else {
                        int index = (calendar.get(Calendar.DST_OFFSET) == 0) ? 1 : 3;
                        if (count < 4) {
                            // Use the short name
                            index++;
                        }
                        String[][] zoneStrings = formatData.getZoneStringsWrapper();
                        buffer.append(zoneStrings[zoneIndex][index]);
                    }
                } else {
                    TimeZone tz = calendar.getTimeZone();
                    boolean daylight = (calendar.get(Calendar.DST_OFFSET) != 0);
                    int tzstyle = (count < 4 ? TimeZone.SHORT : TimeZone.LONG);
                    buffer.append(tz.getDisplayName(daylight, tzstyle, formatData.locale));
                }
            }
            break;
        case // 'Z' ("-/+hhmm" form)
        PATTERN_ZONE_VALUE:
            value = (calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET)) / 60000;
            int width = 4;
            if (value >= 0) {
                buffer.append('+');
            } else {
                width++;
            }
            int num = (value / 60) * 100 + (value % 60);
            CalendarUtils.sprintf0d(buffer, num, width);
            break;
        case // 'X'
        PATTERN_ISO_ZONE:
            value = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);
            if (value == 0) {
                buffer.append('Z');
                break;
            }
            value /= 60000;
            if (value >= 0) {
                buffer.append('+');
            } else {
                buffer.append('-');
                value = -value;
            }
            CalendarUtils.sprintf0d(buffer, value / 60, 2);
            if (count == 1) {
                break;
            }
            if (count == 3) {
                buffer.append(':');
            }
            CalendarUtils.sprintf0d(buffer, value % 60, 2);
            break;
        default:
            // case PATTERN_DAY_OF_MONTH:         // 'd'
            // case PATTERN_HOUR_OF_DAY0:         // 'H' 0-based.  eg, 23:59 + 1 hour =>> 00:59
            // case PATTERN_MINUTE:               // 'm'
            // case PATTERN_SECOND:               // 's'
            // case PATTERN_MILLISECOND:          // 'S'
            // case PATTERN_DAY_OF_YEAR:          // 'D'
            // case PATTERN_DAY_OF_WEEK_IN_MONTH: // 'F'
            // case PATTERN_WEEK_OF_YEAR:         // 'w'
            // case PATTERN_WEEK_OF_MONTH:        // 'W'
            // case PATTERN_HOUR0:                // 'K' eg, 11PM + 1 hour =>> 0 AM
            // case PATTERN_ISO_DAY_OF_WEEK:      // 'u' pseudo field, Monday = 1, ..., Sunday = 7
            if (current == null) {
                zeroPaddingNumber(value, count, maxIntCount, buffer);
            }
            break;
    }
    // switch (patternCharIndex)
    if (current != null) {
        buffer.append(current);
    }
    int fieldID = PATTERN_INDEX_TO_DATE_FORMAT_FIELD[patternCharIndex];
    Field f = PATTERN_INDEX_TO_DATE_FORMAT_FIELD_ID[patternCharIndex];
    delegate.formatted(fieldID, f, f, beginOffset, buffer.length(), buffer);
}