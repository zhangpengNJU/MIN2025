/**
 * Finds or creates a method type with the given components.
 * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
 * The leading parameter type is prepended to the remaining array.
 * @param rtype  the return type
 * @param ptype0 the first parameter type
 * @param ptypes the remaining parameter types
 * @return a method type with the given components
 * @throws NullPointerException if {@code rtype} or {@code ptype0} or {@code ptypes} or any element of {@code ptypes} is null
 * @throws IllegalArgumentException if {@code ptype0} or {@code ptypes} or any element of {@code ptypes} is {@code void.class}
 */
public static MethodType methodType(Class<?> rtype, Class<?> ptype0, Class<?>... ptypes) {
    Class<?>[] ptypes1 = new Class<?>[1 + ptypes.length];
    ptypes1[0] = ptype0;
    System.arraycopy(ptypes, 0, ptypes1, 1, ptypes.length);
    return makeImpl(rtype, ptypes1, true);
}