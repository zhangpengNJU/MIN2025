// -----------------------------------------------------------------------
/**
 * Returns an object of the same type as this object with an amount subtracted.
 * <p>
 * This adjusts this temporal, subtracting according to the rules of the specified amount.
 * The amount is typically a {@link java.time.Period} but may be any other type implementing
 * the {@link TemporalAmount} interface, such as {@link java.time.Duration}.
 * <p>
 * Some example code indicating how and why this method is used:
 * <pre>
 *  date = date.minus(period);               // subtract a Period instance
 *  date = date.minus(duration);             // subtract a Duration instance
 *  date = date.minus(workingDays(6));       // example user-written workingDays method
 * </pre>
 * <p>
 * Note that calling {@code plus} followed by {@code minus} is not guaranteed to
 * return the same date-time.
 *
 * @implSpec
 * <p>
 * Implementations must not alter either this object or the specified temporal object.
 * Instead, an adjusted copy of the original must be returned.
 * This provides equivalent, safe behavior for immutable and mutable implementations.
 * <p>
 * The default implementation must behave equivalent to this code:
 * <pre>
 *  return amount.subtractFrom(this);
 * </pre>
 *
 * @param amount  the amount to subtract, not null
 * @return an object of the same type with the specified adjustment made, not null
 * @throws DateTimeException if the subtraction cannot be made
 * @throws ArithmeticException if numeric overflow occurs
 */
default Temporal minus(TemporalAmount amount) {
    return amount.subtractFrom(this);
}