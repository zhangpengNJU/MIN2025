/**
 * Sets the permanent focus owner. The operation will be cancelled if the
 * Component is not focusable. The permanent focus owner is defined as the
 * last Component in an application to receive a permanent FOCUS_GAINED
 * event. The focus owner and permanent focus owner are equivalent unless
 * a temporary focus change is currently in effect. In such a situation,
 * the permanent focus owner will again be the focus owner when the
 * temporary focus change ends.
 * <p>
 * This method does not actually set the focus to the specified Component.
 * It merely stores the value to be subsequently returned by
 * <code>getPermanentFocusOwner()</code>. Use
 * <code>Component.requestFocus()</code> or
 * <code>Component.requestFocusInWindow()</code> to change the focus owner,
 * subject to platform limitations.
 *
 * @param permanentFocusOwner the permanent focus owner
 * @see #getPermanentFocusOwner
 * @see #getGlobalPermanentFocusOwner
 * @see Component#requestFocus()
 * @see Component#requestFocusInWindow()
 * @see Component#isFocusable
 * @throws SecurityException if this KeyboardFocusManager is not the
 *         current KeyboardFocusManager for the calling thread's context
 *         and if the calling thread does not have "replaceKeyboardFocusManager"
 *         permission
 * @beaninfo
 *       bound: true
 */
protected void setGlobalPermanentFocusOwner(Component permanentFocusOwner) throws SecurityException {
    Component oldPermanentFocusOwner = null;
    boolean shouldFire = false;
    if (permanentFocusOwner == null || permanentFocusOwner.isFocusable()) {
        synchronized (KeyboardFocusManager.class) {
            checkKFMSecurity();
            oldPermanentFocusOwner = getPermanentFocusOwner();
            try {
                fireVetoableChange("permanentFocusOwner", oldPermanentFocusOwner, permanentFocusOwner);
            } catch (PropertyVetoException e) {
                // rejected
                return;
            }
            KeyboardFocusManager.permanentFocusOwner = permanentFocusOwner;
            KeyboardFocusManager.setMostRecentFocusOwner(permanentFocusOwner);
            shouldFire = true;
        }
    }
    if (shouldFire) {
        firePropertyChange("permanentFocusOwner", oldPermanentFocusOwner, permanentFocusOwner);
    }
}