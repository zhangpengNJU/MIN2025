/**
 * Returns a BigInteger whose value is {@code (this >> n)}. The shift
 * distance, {@code n}, is considered unsigned.
 * (Computes <tt>floor(this * 2<sup>-n</sup>)</tt>.)
 *
 * @param  n unsigned shift distance, in bits.
 * @return {@code this >> n}
 */
private BigInteger shiftRightImpl(int n) {
    int nInts = n >>> 5;
    int nBits = n & 0x1f;
    int magLen = mag.length;
    int[] newMag = null;
    // Special case: entire contents shifted off the end
    if (nInts >= magLen)
        return (signum >= 0 ? ZERO : negConst[1]);
    if (nBits == 0) {
        int newMagLen = magLen - nInts;
        newMag = Arrays.copyOf(mag, newMagLen);
    } else {
        int i = 0;
        int highBits = mag[0] >>> nBits;
        if (highBits != 0) {
            newMag = new int[magLen - nInts];
            newMag[i++] = highBits;
        } else {
            newMag = new int[magLen - nInts - 1];
        }
        int nBits2 = 32 - nBits;
        int j = 0;
        while (j < magLen - nInts - 1) newMag[i++] = (mag[j++] << nBits2) | (mag[j] >>> nBits);
    }
    if (signum < 0) {
        // Find out whether any one-bits were shifted off the end.
        boolean onesLost = false;
        for (int i = magLen - 1, j = magLen - nInts; i >= j && !onesLost; i--) onesLost = (mag[i] != 0);
        if (!onesLost && nBits != 0)
            onesLost = (mag[magLen - nInts - 1] << (32 - nBits) != 0);
        if (onesLost)
            newMag = javaIncrement(newMag);
    }
    return new BigInteger(newMag, signum);
}