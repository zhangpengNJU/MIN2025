/**
 * Obtains the current date from the specified clock.
 * <p>
 * This will query the specified clock to obtain the current date - today.
 * Using this method allows the use of an alternate clock for testing.
 * The alternate clock may be introduced using {@link Clock dependency injection}.
 *
 * @param clock  the clock to use, not null
 * @return the current date, not null
 */
public static LocalDate now(Clock clock) {
    Objects.requireNonNull(clock, "clock");
    // inline to avoid creating object and Instant checks
    // called once
    final Instant now = clock.instant();
    ZoneOffset offset = clock.getZone().getRules().getOffset(now);
    // overflow caught later
    long epochSec = now.getEpochSecond() + offset.getTotalSeconds();
    long epochDay = Math.floorDiv(epochSec, SECONDS_PER_DAY);
    return LocalDate.ofEpochDay(epochDay);
}