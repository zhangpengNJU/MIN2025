/**
 * Opens or creates a file for reading and/or writing, returning an
 * asynchronous file channel to access the file.
 *
 * <p> An invocation of this method behaves in exactly the same way as the
 * invocation
 * <pre>
 *     ch.{@link #open(Path,Set,ExecutorService,FileAttribute[])
 *       open}(file, opts, null, new FileAttribute&lt;?&gt;[0]);
 * </pre>
 * where {@code opts} is a {@code Set} containing the options specified to
 * this method.
 *
 * <p> The resulting channel is associated with default thread pool to which
 * tasks are submitted to handle I/O events and dispatch to completion
 * handlers that consume the result of asynchronous operations performed on
 * the resulting channel.
 *
 * @param   file
 *          The path of the file to open or create
 * @param   options
 *          Options specifying how the file is opened
 *
 * @return  A new asynchronous file channel
 *
 * @throws  IllegalArgumentException
 *          If the set contains an invalid combination of options
 * @throws  UnsupportedOperationException
 *          If the {@code file} is associated with a provider that does not
 *          support creating file channels, or an unsupported open option is
 *          specified
 * @throws  IOException
 *          If an I/O error occurs
 * @throws  SecurityException
 *          If a security manager is installed and it denies an
 *          unspecified permission required by the implementation.
 *          In the case of the default provider, the {@link
 *          SecurityManager#checkRead(String)} method is invoked to check
 *          read access if the file is opened for reading. The {@link
 *          SecurityManager#checkWrite(String)} method is invoked to check
 *          write access if the file is opened for writing
 */
public static AsynchronousFileChannel open(Path file, OpenOption... options) throws IOException {
    Set<OpenOption> set = new HashSet<OpenOption>(options.length);
    Collections.addAll(set, options);
    return open(file, set, null, NO_ATTRIBUTES);
}