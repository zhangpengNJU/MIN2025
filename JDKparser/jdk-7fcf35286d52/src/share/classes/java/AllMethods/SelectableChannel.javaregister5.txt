// 
// sync(regLock) {
// sync(keySet) { look for selector }
// if (channel found) { set interest ops -- may block in selector;
// return key; }
// create new key -- may block somewhere in selector;
// sync(keySet) { add key; }
// attach(attachment);
// return key;
// }
/**
 * Registers this channel with the given selector, returning a selection
 * key.
 *
 * <p> An invocation of this convenience method of the form
 *
 * <blockquote><tt>sc.register(sel, ops)</tt></blockquote>
 *
 * behaves in exactly the same way as the invocation
 *
 * <blockquote><tt>sc.{@link
 * #register(java.nio.channels.Selector,int,java.lang.Object)
 * register}(sel, ops, null)</tt></blockquote>
 *
 * @param  sel
 *         The selector with which this channel is to be registered
 *
 * @param  ops
 *         The interest set for the resulting key
 *
 * @throws  ClosedChannelException
 *          If this channel is closed
 *
 * @throws  ClosedSelectorException
 *          If the selector is closed
 *
 * @throws  IllegalBlockingModeException
 *          If this channel is in blocking mode
 *
 * @throws  IllegalSelectorException
 *          If this channel was not created by the same provider
 *          as the given selector
 *
 * @throws  CancelledKeyException
 *          If this channel is currently registered with the given selector
 *          but the corresponding key has already been cancelled
 *
 * @throws  IllegalArgumentException
 *          If a bit in <tt>ops</tt> does not correspond to an operation
 *          that is supported by this channel, that is, if {@code set &
 *          ~validOps() != 0}
 *
 * @return  A key representing the registration of this channel with
 *          the given selector
 */
public final SelectionKey register(Selector sel, int ops) throws ClosedChannelException {
    return register(sel, ops, null);
}