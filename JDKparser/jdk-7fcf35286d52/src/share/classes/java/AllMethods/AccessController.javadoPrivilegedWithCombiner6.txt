/**
 * Performs the specified {@code PrivilegedExceptionAction} with
 * privileges enabled.  The action is performed with <i>all</i> of the
 * permissions possessed by the caller's protection domain.
 *
 * <p> If the action's {@code run} method throws an <i>unchecked</i>
 * exception, it will propagate through this method.
 *
 * <p> This method preserves the current AccessControlContext's
 * DomainCombiner (which may be null) while the action is performed.
 *
 * @param <T> the type of the value returned by the
 *                  PrivilegedExceptionAction's {@code run} method.
 *
 * @param action the action to be performed.
 *
 * @return the value returned by the action's {@code run} method
 *
 * @exception PrivilegedActionException if the specified action's
 *         {@code run} method threw a <i>checked</i> exception
 * @exception NullPointerException if the action is {@code null}
 *
 * @see #doPrivileged(PrivilegedAction)
 * @see #doPrivileged(PrivilegedExceptionAction,AccessControlContext)
 * @see java.security.DomainCombiner
 *
 * @since 1.6
 */
@CallerSensitive
public static <T> T doPrivilegedWithCombiner(PrivilegedExceptionAction<T> action) throws PrivilegedActionException {
    AccessControlContext acc = getStackAccessControlContext();
    if (acc == null) {
        return AccessController.doPrivileged(action);
    }
    DomainCombiner dc = acc.getAssignedCombiner();
    return AccessController.doPrivileged(action, preserveCombiner(dc, Reflection.getCallerClass()));
}