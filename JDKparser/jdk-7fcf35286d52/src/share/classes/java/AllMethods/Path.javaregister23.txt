/**
 * Registers the file located by this path with a watch service.
 *
 * <p> An invocation of this method behaves in exactly the same way as the
 * invocation
 * <pre>
 *     watchable.{@link #register(WatchService,WatchEvent.Kind[],WatchEvent.Modifier[]) register}(watcher, events, new WatchEvent.Modifier[0]);
 * </pre>
 *
 * <p> <b>Usage Example:</b>
 * Suppose we wish to register a directory for entry create, delete, and modify
 * events:
 * <pre>
 *     Path dir = ...
 *     WatchService watcher = ...
 *
 *     WatchKey key = dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);
 * </pre>
 * @param   watcher
 *          The watch service to which this object is to be registered
 * @param   events
 *          The events for which this object should be registered
 *
 * @return  A key representing the registration of this object with the
 *          given watch service
 *
 * @throws  UnsupportedOperationException
 *          If unsupported events are specified
 * @throws  IllegalArgumentException
 *          If an invalid combination of events is specified
 * @throws  ClosedWatchServiceException
 *          If the watch service is closed
 * @throws  NotDirectoryException
 *          If the file is registered to watch the entries in a directory
 *          and the file is not a directory  <i>(optional specific exception)</i>
 * @throws  IOException
 *          If an I/O error occurs
 * @throws  SecurityException
 *          In the case of the default provider, and a security manager is
 *          installed, the {@link SecurityManager#checkRead(String) checkRead}
 *          method is invoked to check read access to the file.
 */
@Override
WatchKey register(WatchService watcher, WatchEvent.Kind<?>... events) throws IOException;