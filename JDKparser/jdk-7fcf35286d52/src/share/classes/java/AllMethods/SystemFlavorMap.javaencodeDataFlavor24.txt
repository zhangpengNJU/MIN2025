/**
 * Encodes a <code>DataFlavor</code> for use as a <code>String</code>
 * native. The format of an encoded <code>DataFlavor</code> is
 * implementation-dependent. The only restrictions are:
 * <ul>
 * <li>The encoded representation is <code>null</code> if and only if the
 * specified <code>DataFlavor</code> is <code>null</code> or its MIME type
 * <code>String</code> is <code>null</code>.</li>
 * <li>The encoded representations for two non-<code>null</code>
 * <code>DataFlavor</code>s with non-<code>null</code> MIME type
 * <code>String</code>s are equal if and only if the MIME type
 * <code>String</code>s of these <code>DataFlavor</code>s are equal
 * according to <code>String.equals(Object)</code>.</li>
 * </ul>
 * <p>
 * The reference implementation of this method returns the MIME type
 * <code>String</code> of the specified <code>DataFlavor</code> prefixed
 * with <code>JAVA_DATAFLAVOR:</code>.
 *
 * @param flav the <code>DataFlavor</code> to encode
 * @return the encoded <code>String</code>, or <code>null</code> if
 *         flav is <code>null</code> or has a <code>null</code> MIME type
 */
public static String encodeDataFlavor(DataFlavor flav) {
    return (flav != null) ? SystemFlavorMap.encodeJavaMIMEType(flav.getMimeType()) : null;
}