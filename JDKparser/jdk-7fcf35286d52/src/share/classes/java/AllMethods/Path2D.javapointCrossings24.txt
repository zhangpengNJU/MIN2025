int pointCrossings(double px, double py) {
    if (numTypes == 0) {
        return 0;
    }
    double movx, movy, curx, cury, endx, endy;
    float[] coords = floatCoords;
    curx = movx = coords[0];
    cury = movy = coords[1];
    int crossings = 0;
    int ci = 2;
    for (int i = 1; i < numTypes; i++) {
        switch(pointTypes[i]) {
            case PathIterator.SEG_MOVETO:
                if (cury != movy) {
                    crossings += Curve.pointCrossingsForLine(px, py, curx, cury, movx, movy);
                }
                movx = curx = coords[ci++];
                movy = cury = coords[ci++];
                break;
            case PathIterator.SEG_LINETO:
                crossings += Curve.pointCrossingsForLine(px, py, curx, cury, endx = coords[ci++], endy = coords[ci++]);
                curx = endx;
                cury = endy;
                break;
            case PathIterator.SEG_QUADTO:
                crossings += Curve.pointCrossingsForQuad(px, py, curx, cury, coords[ci++], coords[ci++], endx = coords[ci++], endy = coords[ci++], 0);
                curx = endx;
                cury = endy;
                break;
            case PathIterator.SEG_CUBICTO:
                crossings += Curve.pointCrossingsForCubic(px, py, curx, cury, coords[ci++], coords[ci++], coords[ci++], coords[ci++], endx = coords[ci++], endy = coords[ci++], 0);
                curx = endx;
                cury = endy;
                break;
            case PathIterator.SEG_CLOSE:
                if (cury != movy) {
                    crossings += Curve.pointCrossingsForLine(px, py, curx, cury, movx, movy);
                }
                curx = movx;
                cury = movy;
                break;
        }
    }
    if (cury != movy) {
        crossings += Curve.pointCrossingsForLine(px, py, curx, cury, movx, movy);
    }
    return crossings;
}