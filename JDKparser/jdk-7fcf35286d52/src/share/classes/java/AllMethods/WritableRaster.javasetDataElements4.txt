/**
 * Sets the data for a rectangle of pixels from an input Raster.
 * The input Raster must be compatible with this WritableRaster
 * in that they must have the same number of bands, corresponding bands
 * must have the same number of bits per sample, the TransferTypes
 * and NumDataElements must be the same, and the packing used by
 * the getDataElements/setDataElements must be identical.
 * An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 * not in bounds.
 * However, explicit bounds checking is not guaranteed.
 * @param x        The X coordinate of the pixel location.
 * @param y        The Y coordinate of the pixel location.
 * @param inRaster Raster containing data to place at x,y.
 *
 * @throws NullPointerException if inRaster is null.
 * @throws ArrayIndexOutOfBoundsException if the coordinates are not
 * in bounds.
 */
public void setDataElements(int x, int y, Raster inRaster) {
    int dstOffX = x + inRaster.getMinX();
    int dstOffY = y + inRaster.getMinY();
    int width = inRaster.getWidth();
    int height = inRaster.getHeight();
    if ((dstOffX < this.minX) || (dstOffY < this.minY) || (dstOffX + width > this.minX + this.width) || (dstOffY + height > this.minY + this.height)) {
        throw new ArrayIndexOutOfBoundsException("Coordinate out of bounds!");
    }
    int srcOffX = inRaster.getMinX();
    int srcOffY = inRaster.getMinY();
    Object tdata = null;
    for (int startY = 0; startY < height; startY++) {
        tdata = inRaster.getDataElements(srcOffX, srcOffY + startY, width, 1, tdata);
        setDataElements(dstOffX, dstOffY + startY, width, 1, tdata);
    }
}