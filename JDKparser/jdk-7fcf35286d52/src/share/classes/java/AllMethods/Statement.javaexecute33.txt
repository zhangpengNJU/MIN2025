/**
 *  Executes the given SQL statement, which may return multiple results,
 *  and signals the driver that any
 *  auto-generated keys should be made available
 *  for retrieval.  The driver will ignore this signal if the SQL statement
 *  is not an <code>INSERT</code> statement, or an SQL statement able to return
 *  auto-generated keys (the list of such statements is vendor-specific).
 *  <P>
 *  In some (uncommon) situations, a single SQL statement may return
 *  multiple result sets and/or update counts.  Normally you can ignore
 *  this unless you are (1) executing a stored procedure that you know may
 *  return multiple results or (2) you are dynamically executing an
 *  unknown SQL string.
 *  <P>
 *  The <code>execute</code> method executes an SQL statement and indicates the
 *  form of the first result.  You must then use the methods
 *  <code>getResultSet</code> or <code>getUpdateCount</code>
 *  to retrieve the result, and <code>getMoreResults</code> to
 *  move to any subsequent result(s).
 * <p>
 * <strong>Note:</strong>This method cannot be called on a
 *  <code>PreparedStatement</code> or <code>CallableStatement</code>.
 *  @param sql any SQL statement
 *  @param autoGeneratedKeys a constant indicating whether auto-generated
 *         keys should be made available for retrieval using the method
 *         <code>getGeneratedKeys</code>; one of the following constants:
 *         <code>Statement.RETURN_GENERATED_KEYS</code> or
 *         <code>Statement.NO_GENERATED_KEYS</code>
 *  @return <code>true</code> if the first result is a <code>ResultSet</code>
 *          object; <code>false</code> if it is an update count or there are
 *          no results
 *  @exception SQLException if a database access error occurs,
 *  this method is called on a closed <code>Statement</code>, the second
 *          parameter supplied to this method is not
 *          <code>Statement.RETURN_GENERATED_KEYS</code> or
 *          <code>Statement.NO_GENERATED_KEYS</code>,
 *  the method is called on a
 *  <code>PreparedStatement</code> or <code>CallableStatement</code>
 *  @exception SQLFeatureNotSupportedException if the JDBC driver does not support
 *  this method with a constant of Statement.RETURN_GENERATED_KEYS
 *  @throws SQLTimeoutException when the driver has determined that the
 *  timeout value that was specified by the {@code setQueryTimeout}
 *  method has been exceeded and has at least attempted to cancel
 *  the currently running {@code Statement}
 *  @see #getResultSet
 *  @see #getUpdateCount
 *  @see #getMoreResults
 *  @see #getGeneratedKeys
 *
 *  @since 1.4
 */
boolean execute(String sql, int autoGeneratedKeys) throws SQLException;