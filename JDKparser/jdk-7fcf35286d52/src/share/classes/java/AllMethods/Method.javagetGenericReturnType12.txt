/**
 * Returns a {@code Type} object that represents the formal return
 * type of the method represented by this {@code Method} object.
 *
 * <p>If the return type is a parameterized type,
 * the {@code Type} object returned must accurately reflect
 * the actual type parameters used in the source code.
 *
 * <p>If the return type is a type variable or a parameterized type, it
 * is created. Otherwise, it is resolved.
 *
 * @return  a {@code Type} object that represents the formal return
 *     type of the underlying  method
 * @throws GenericSignatureFormatError
 *     if the generic method signature does not conform to the format
 *     specified in
 *     <cite>The Java&trade; Virtual Machine Specification</cite>
 * @throws TypeNotPresentException if the underlying method's
 *     return type refers to a non-existent type declaration
 * @throws MalformedParameterizedTypeException if the
 *     underlying method's return typed refers to a parameterized
 *     type that cannot be instantiated for any reason
 * @since 1.5
 */
public Type getGenericReturnType() {
    if (getGenericSignature() != null) {
        return getGenericInfo().getReturnType();
    } else {
        return getReturnType();
    }
}