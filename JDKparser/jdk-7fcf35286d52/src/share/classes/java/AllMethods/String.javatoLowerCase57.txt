/**
 * Converts all of the characters in this {@code String} to lower
 * case using the rules of the given {@code Locale}.  Case mapping is based
 * on the Unicode Standard version specified by the {@link java.lang.Character Character}
 * class. Since case mappings are not always 1:1 char mappings, the resulting
 * {@code String} may be a different length than the original {@code String}.
 * <p>
 * Examples of lowercase  mappings are in the following table:
 * <table border="1" summary="Lowercase mapping examples showing language code of locale, upper case, lower case, and description">
 * <tr>
 *   <th>Language Code of Locale</th>
 *   <th>Upper Case</th>
 *   <th>Lower Case</th>
 *   <th>Description</th>
 * </tr>
 * <tr>
 *   <td>tr (Turkish)</td>
 *   <td>&#92;u0130</td>
 *   <td>&#92;u0069</td>
 *   <td>capital letter I with dot above -&gt; small letter i</td>
 * </tr>
 * <tr>
 *   <td>tr (Turkish)</td>
 *   <td>&#92;u0049</td>
 *   <td>&#92;u0131</td>
 *   <td>capital letter I -&gt; small letter dotless i </td>
 * </tr>
 * <tr>
 *   <td>(all)</td>
 *   <td>French Fries</td>
 *   <td>french fries</td>
 *   <td>lowercased all chars in String</td>
 * </tr>
 * <tr>
 *   <td>(all)</td>
 *   <td><img src="doc-files/capiota.gif" alt="capiota"><img src="doc-files/capchi.gif" alt="capchi">
 *       <img src="doc-files/captheta.gif" alt="captheta"><img src="doc-files/capupsil.gif" alt="capupsil">
 *       <img src="doc-files/capsigma.gif" alt="capsigma"></td>
 *   <td><img src="doc-files/iota.gif" alt="iota"><img src="doc-files/chi.gif" alt="chi">
 *       <img src="doc-files/theta.gif" alt="theta"><img src="doc-files/upsilon.gif" alt="upsilon">
 *       <img src="doc-files/sigma1.gif" alt="sigma"></td>
 *   <td>lowercased all chars in String</td>
 * </tr>
 * </table>
 *
 * @param locale use the case transformation rules for this locale
 * @return the {@code String}, converted to lowercase.
 * @see     java.lang.String#toLowerCase()
 * @see     java.lang.String#toUpperCase()
 * @see     java.lang.String#toUpperCase(Locale)
 * @since   1.1
 */
public String toLowerCase(Locale locale) {
    if (locale == null) {
        throw new NullPointerException();
    }
    int firstUpper;
    final int len = value.length;
    /* Now check if there are any characters that need to be changed. */
    scan: {
        for (firstUpper = 0; firstUpper < len; ) {
            char c = value[firstUpper];
            if ((c >= Character.MIN_HIGH_SURROGATE) && (c <= Character.MAX_HIGH_SURROGATE)) {
                int supplChar = codePointAt(firstUpper);
                if (supplChar != Character.toLowerCase(supplChar)) {
                    break scan;
                }
                firstUpper += Character.charCount(supplChar);
            } else {
                if (c != Character.toLowerCase(c)) {
                    break scan;
                }
                firstUpper++;
            }
        }
        return this;
    }
    char[] result = new char[len];
    int resultOffset = 0;
    /* result may grow, so i+resultOffset
                                * is the write location in result */
    /* Just copy the first few lowerCase characters. */
    System.arraycopy(value, 0, result, 0, firstUpper);
    String lang = locale.getLanguage();
    boolean localeDependent = (lang == "tr" || lang == "az" || lang == "lt");
    char[] lowerCharArray;
    int lowerChar;
    int srcChar;
    int srcCount;
    for (int i = firstUpper; i < len; i += srcCount) {
        srcChar = (int) value[i];
        if ((char) srcChar >= Character.MIN_HIGH_SURROGATE && (char) srcChar <= Character.MAX_HIGH_SURROGATE) {
            srcChar = codePointAt(i);
            srcCount = Character.charCount(srcChar);
        } else {
            srcCount = 1;
        }
        if (localeDependent || // GREEK CAPITAL LETTER SIGMA
        srcChar == '\u03A3' || srcChar == '\u0130') {
            // LATIN CAPITAL LETTER I WITH DOT ABOVE
            lowerChar = ConditionalSpecialCasing.toLowerCaseEx(this, i, locale);
        } else {
            lowerChar = Character.toLowerCase(srcChar);
        }
        if ((lowerChar == Character.ERROR) || (lowerChar >= Character.MIN_SUPPLEMENTARY_CODE_POINT)) {
            if (lowerChar == Character.ERROR) {
                lowerCharArray = ConditionalSpecialCasing.toLowerCaseCharArray(this, i, locale);
            } else if (srcCount == 2) {
                resultOffset += Character.toChars(lowerChar, result, i + resultOffset) - srcCount;
                continue;
            } else {
                lowerCharArray = Character.toChars(lowerChar);
            }
            /* Grow result if needed */
            int mapLen = lowerCharArray.length;
            if (mapLen > srcCount) {
                char[] result2 = new char[result.length + mapLen - srcCount];
                System.arraycopy(result, 0, result2, 0, i + resultOffset);
                result = result2;
            }
            for (int x = 0; x < mapLen; ++x) {
                result[i + resultOffset + x] = lowerCharArray[x];
            }
            resultOffset += (mapLen - srcCount);
        } else {
            result[i + resultOffset] = (char) lowerChar;
        }
    }
    return new String(result, 0, len + resultOffset);
}