/**
 * If the specified key is not already associated with a value (or
 * is mapped to {@code null}), attempts to compute its value using
 * the given mapping function and enters it into this map unless
 * {@code null}.
 *
 * <p>If a security manager is enabled, its {@code checkSecurityAccess}
 * method is called with the strings {@code "putProviderProperty."+name}
 * and {@code "removeProviderProperty."+name}, where {@code name} is the
 * provider name, to see if it's ok to set this provider's property values
 * and remove this provider's properties.
 *
 * @throws  SecurityException
 *          if a security manager exists and its {@link
 *          java.lang.SecurityManager#checkSecurityAccess} method
 *          denies access to set property values and remove properties.
 *
 * @since 1.8
 */
@Override
public synchronized Object computeIfAbsent(Object key, Function<? super Object, ? extends Object> mappingFunction) {
    check("putProviderProperty." + name);
    check("removeProviderProperty" + name);
    if (debug != null) {
        debug.println("ComputeIfAbsent " + name + " provider property " + key);
    }
    return implComputeIfAbsent(key, mappingFunction);
}