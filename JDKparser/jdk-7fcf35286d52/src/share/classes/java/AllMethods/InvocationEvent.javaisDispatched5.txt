/**
 * Returns {@code true} if the event is dispatched or any exception is
 * thrown while dispatching, {@code false} otherwise. The method should
 * be called by a waiting thread that calls the {@code notifier.wait()} method.
 * Since spurious wakeups are possible (as explained in {@link Object#wait()}),
 * this method should be used in a waiting loop to ensure that the event
 * got dispatched:
 * <pre>
 *     while (!event.isDispatched()) {
 *         notifier.wait();
 *     }
 * </pre>
 * If the waiting thread wakes up without dispatching the event,
 * the {@code isDispatched()} method returns {@code false}, and
 * the {@code while} loop executes once more, thus, causing
 * the awakened thread to revert to the waiting mode.
 * <p>
 * If the {@code notifier.notifyAll()} happens before the waiting thread
 * enters the {@code notifier.wait()} method, the {@code while} loop ensures
 * that the waiting thread will not enter the {@code notifier.wait()} method.
 * Otherwise, there is no guarantee that the waiting thread will ever be woken
 * from the wait.
 *
 * @return {@code true} if the event has been dispatched, or any exception
 * has been thrown while dispatching, {@code false} otherwise
 * @see #dispatch
 * @see #notifier
 * @see #catchExceptions
 * @since 1.7
 */
public boolean isDispatched() {
    return dispatched;
}