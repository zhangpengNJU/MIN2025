/**
 * Transfers bytes from this channel's file to the given writable byte
 * channel.
 *
 * <p> An attempt is made to read up to <tt>count</tt> bytes starting at
 * the given <tt>position</tt> in this channel's file and write them to the
 * target channel.  An invocation of this method may or may not transfer
 * all of the requested bytes; whether or not it does so depends upon the
 * natures and states of the channels.  Fewer than the requested number of
 * bytes are transferred if this channel's file contains fewer than
 * <tt>count</tt> bytes starting at the given <tt>position</tt>, or if the
 * target channel is non-blocking and it has fewer than <tt>count</tt>
 * bytes free in its output buffer.
 *
 * <p> This method does not modify this channel's position.  If the given
 * position is greater than the file's current size then no bytes are
 * transferred.  If the target channel has a position then bytes are
 * written starting at that position and then the position is incremented
 * by the number of bytes written.
 *
 * <p> This method is potentially much more efficient than a simple loop
 * that reads from this channel and writes to the target channel.  Many
 * operating systems can transfer bytes directly from the filesystem cache
 * to the target channel without actually copying them.  </p>
 *
 * @param  position
 *         The position within the file at which the transfer is to begin;
 *         must be non-negative
 *
 * @param  count
 *         The maximum number of bytes to be transferred; must be
 *         non-negative
 *
 * @param  target
 *         The target channel
 *
 * @return  The number of bytes, possibly zero,
 *          that were actually transferred
 *
 * @throws IllegalArgumentException
 *         If the preconditions on the parameters do not hold
 *
 * @throws  NonReadableChannelException
 *          If this channel was not opened for reading
 *
 * @throws  NonWritableChannelException
 *          If the target channel was not opened for writing
 *
 * @throws  ClosedChannelException
 *          If either this channel or the target channel is closed
 *
 * @throws  AsynchronousCloseException
 *          If another thread closes either channel
 *          while the transfer is in progress
 *
 * @throws  ClosedByInterruptException
 *          If another thread interrupts the current thread while the
 *          transfer is in progress, thereby closing both channels and
 *          setting the current thread's interrupt status
 *
 * @throws  IOException
 *          If some other I/O error occurs
 */
public abstract long transferTo(long position, long count, WritableByteChannel target) throws IOException;