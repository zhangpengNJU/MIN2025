/**
 * Repositions this stream to the position at the time the
 * {@code mark} method was last called on this input stream.
 * <p>
 * The {@code reset} method of
 * {@code LineNumberInputStream} resets the line number to be
 * the line number at the time the {@code mark} method was
 * called, and then calls the {@code reset} method of the
 * underlying input stream.
 * <p>
 * Stream marks are intended to be used in
 * situations where you need to read ahead a little to see what's in
 * the stream. Often this is most easily done by invoking some
 * general parser. If the stream is of the type handled by the
 * parser, it just chugs along happily. If the stream is not of
 * that type, the parser should toss an exception when it fails,
 * which, if it happens within readlimit bytes, allows the outer
 * code to reset the stream and try another parser.
 *
 * @exception  IOException  if an I/O error occurs.
 * @see        java.io.FilterInputStream#in
 * @see        java.io.LineNumberInputStream#mark(int)
 */
public void reset() throws IOException {
    lineNumber = markLineNumber;
    pushBack = markPushBack;
    in.reset();
}