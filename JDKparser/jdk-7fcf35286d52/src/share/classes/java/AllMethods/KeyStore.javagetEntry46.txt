/**
 * Gets a keystore {@code Entry} for the specified alias
 * with the specified protection parameter.
 *
 * @param alias get the keystore {@code Entry} for this alias
 * @param protParam the {@code ProtectionParameter}
 *          used to protect the {@code Entry},
 *          which may be {@code null}
 *
 * @return the keystore {@code Entry} for the specified alias,
 *          or {@code null} if there is no such entry
 *
 * @exception NullPointerException if
 *          {@code alias} is {@code null}
 * @exception NoSuchAlgorithmException if the algorithm for recovering the
 *          entry cannot be found
 * @exception UnrecoverableEntryException if the specified
 *          {@code protParam} were insufficient or invalid
 * @exception UnrecoverableKeyException if the entry is a
 *          {@code PrivateKeyEntry} or {@code SecretKeyEntry}
 *          and the specified {@code protParam} does not contain
 *          the information needed to recover the key (e.g. wrong password)
 * @exception KeyStoreException if the keystore has not been initialized
 *          (loaded).
 * @see #setEntry(String, KeyStore.Entry, KeyStore.ProtectionParameter)
 *
 * @since 1.5
 */
public final Entry getEntry(String alias, ProtectionParameter protParam) throws NoSuchAlgorithmException, UnrecoverableEntryException, KeyStoreException {
    if (alias == null) {
        throw new NullPointerException("invalid null input");
    }
    if (!initialized) {
        throw new KeyStoreException("Uninitialized keystore");
    }
    return keyStoreSpi.engineGetEntry(alias, protParam);
}