/**
 * Finds a bundle in the cache. Any expired bundles are marked as
 * `expired' and removed from the cache upon return.
 *
 * @param cacheKey the key to look up the cache
 * @param control the Control to be used for the expiration control
 * @return the cached bundle, or null if the bundle is not found in the
 * cache or its parent has expired. <code>bundle.expire</code> is true
 * upon return if the bundle in the cache has expired.
 */
private static ResourceBundle findBundleInCache(CacheKey cacheKey, Control control) {
    BundleReference bundleRef = cacheList.get(cacheKey);
    if (bundleRef == null) {
        return null;
    }
    ResourceBundle bundle = bundleRef.get();
    if (bundle == null) {
        return null;
    }
    ResourceBundle p = bundle.parent;
    assert p != NONEXISTENT_BUNDLE;
    // If the parent has expired, then this one must also expire. We
    // check only the immediate parent because the actual loading is
    // done from the root (base) to leaf (child) and the purpose of
    // checking is to propagate expiration towards the leaf. For
    // example, if the requested locale is ja_JP_JP and there are
    // bundles for all of the candidates in the cache, we have a list,
    // 
    // base <- ja <- ja_JP <- ja_JP_JP
    // 
    // If ja has expired, then it will reload ja and the list becomes a
    // tree.
    // 
    // base <- ja (new)
    // "   <- ja (expired) <- ja_JP <- ja_JP_JP
    // 
    // When looking up ja_JP in the cache, it finds ja_JP in the cache
    // which references to the expired ja. Then, ja_JP is marked as
    // expired and removed from the cache. This will be propagated to
    // ja_JP_JP.
    // 
    // Now, it's possible, for example, that while loading new ja_JP,
    // someone else has started loading the same bundle and finds the
    // base bundle has expired. Then, what we get from the first
    // getBundle call includes the expired base bundle. However, if
    // someone else didn't start its loading, we wouldn't know if the
    // base bundle has expired at the end of the loading process. The
    // expiration control doesn't guarantee that the returned bundle and
    // its parents haven't expired.
    // 
    // We could check the entire parent chain to see if there's any in
    // the chain that has expired. But this process may never end. An
    // extreme case would be that getTimeToLive returns 0 and
    // needsReload always returns true.
    if (p != null && p.expired) {
        assert bundle != NONEXISTENT_BUNDLE;
        bundle.expired = true;
        bundle.cacheKey = null;
        cacheList.remove(cacheKey, bundleRef);
        bundle = null;
    } else {
        CacheKey key = bundleRef.getCacheKey();
        long expirationTime = key.expirationTime;
        if (!bundle.expired && expirationTime >= 0 && expirationTime <= System.currentTimeMillis()) {
            // its TTL period has expired.
            if (bundle != NONEXISTENT_BUNDLE) {
                // Synchronize here to call needsReload to avoid
                // redundant concurrent calls for the same bundle.
                synchronized (bundle) {
                    expirationTime = key.expirationTime;
                    if (!bundle.expired && expirationTime >= 0 && expirationTime <= System.currentTimeMillis()) {
                        try {
                            bundle.expired = control.needsReload(key.getName(), key.getLocale(), key.getFormat(), key.getLoader(), bundle, key.loadTime);
                        } catch (Exception e) {
                            cacheKey.setCause(e);
                        }
                        if (bundle.expired) {
                            // If the bundle needs to be reloaded, then
                            // remove the bundle from the cache, but
                            // return the bundle with the expired flag
                            // on.
                            bundle.cacheKey = null;
                            cacheList.remove(cacheKey, bundleRef);
                        } else {
                            // Update the expiration control info. and reuse
                            // the same bundle instance
                            setExpirationTime(key, control);
                        }
                    }
                }
            } else {
                // We just remove NONEXISTENT_BUNDLE from the cache.
                cacheList.remove(cacheKey, bundleRef);
                bundle = null;
            }
        }
    }
    return bundle;
}