/**
 * Returns a BigInteger whose value is <tt>(this<sup>exponent</sup>)</tt>.
 * Note that {@code exponent} is an integer rather than a BigInteger.
 *
 * @param  exponent exponent to which this BigInteger is to be raised.
 * @return <tt>this<sup>exponent</sup></tt>
 * @throws ArithmeticException {@code exponent} is negative.  (This would
 *         cause the operation to yield a non-integer value.)
 */
public BigInteger pow(int exponent) {
    if (exponent < 0) {
        throw new ArithmeticException("Negative exponent");
    }
    if (signum == 0) {
        return (exponent == 0 ? ONE : this);
    }
    BigInteger partToSquare = this.abs();
    // Factor out powers of two from the base, as the exponentiation of
    // these can be done by left shifts only.
    // The remaining part can then be exponentiated faster.  The
    // powers of two will be multiplied back at the end.
    int powersOfTwo = partToSquare.getLowestSetBit();
    long bitsToShiftLong = (long) powersOfTwo * exponent;
    if (bitsToShiftLong > Integer.MAX_VALUE) {
        reportOverflow();
    }
    int bitsToShift = (int) bitsToShiftLong;
    int remainingBits;
    // Factor the powers of two out quickly by shifting right, if needed.
    if (powersOfTwo > 0) {
        partToSquare = partToSquare.shiftRight(powersOfTwo);
        remainingBits = partToSquare.bitLength();
        if (remainingBits == 1) {
            // Nothing left but +/- 1?
            if (signum < 0 && (exponent & 1) == 1) {
                return NEGATIVE_ONE.shiftLeft(bitsToShift);
            } else {
                return ONE.shiftLeft(bitsToShift);
            }
        }
    } else {
        remainingBits = partToSquare.bitLength();
        if (remainingBits == 1) {
            // Nothing left but +/- 1?
            if (signum < 0 && (exponent & 1) == 1) {
                return NEGATIVE_ONE;
            } else {
                return ONE;
            }
        }
    }
    // This is a quick way to approximate the size of the result,
    // similar to doing log2[n] * exponent.  This will give an upper bound
    // of how big the result can be, and which algorithm to use.
    long scaleFactor = (long) remainingBits * exponent;
    // Use slightly different algorithms for small and large operands.
    // See if the result will safely fit into a long. (Largest 2^63-1)
    if (partToSquare.mag.length == 1 && scaleFactor <= 62) {
        // Small number algorithm.  Everything fits into a long.
        int newSign = (signum < 0 && (exponent & 1) == 1 ? -1 : 1);
        long result = 1;
        long baseToPow2 = partToSquare.mag[0] & LONG_MASK;
        int workingExponent = exponent;
        // Perform exponentiation using repeated squaring trick
        while (workingExponent != 0) {
            if ((workingExponent & 1) == 1) {
                result = result * baseToPow2;
            }
            if ((workingExponent >>>= 1) != 0) {
                baseToPow2 = baseToPow2 * baseToPow2;
            }
        }
        // Multiply back the powers of two (quickly, by shifting left)
        if (powersOfTwo > 0) {
            if (bitsToShift + scaleFactor <= 62) {
                // Fits in long?
                return valueOf((result << bitsToShift) * newSign);
            } else {
                return valueOf(result * newSign).shiftLeft(bitsToShift);
            }
        } else {
            return valueOf(result * newSign);
        }
    } else {
        if ((long) bitLength() * exponent / Integer.SIZE > MAX_MAG_LENGTH) {
            reportOverflow();
        }
        // Large number algorithm.  This is basically identical to
        // the algorithm above, but calls multiply() and square()
        // which may use more efficient algorithms for large numbers.
        BigInteger answer = ONE;
        int workingExponent = exponent;
        // Perform exponentiation using repeated squaring trick
        while (workingExponent != 0) {
            if ((workingExponent & 1) == 1) {
                answer = answer.multiply(partToSquare);
            }
            if ((workingExponent >>>= 1) != 0) {
                partToSquare = partToSquare.square();
            }
        }
        // Multiply back the (exponentiated) powers of two (quickly,
        // by shifting left)
        if (powersOfTwo > 0) {
            answer = answer.shiftLeft(bitsToShift);
        }
        if (signum < 0 && (exponent & 1) == 1) {
            return answer.negate();
        } else {
            return answer;
        }
    }
}