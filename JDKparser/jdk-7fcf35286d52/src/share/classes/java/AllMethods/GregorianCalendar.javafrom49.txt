/**
 * Obtains an instance of {@code GregorianCalendar} with the default locale
 * from a {@code ZonedDateTime} object.
 * <p>
 * Since {@code ZonedDateTime} does not support a Julian-Gregorian cutover
 * date and uses ISO calendar system, the return GregorianCalendar is a pure
 * Gregorian calendar and uses ISO 8601 standard for week definitions,
 * which has {@code MONDAY} as the {@link Calendar#getFirstDayOfWeek()
 * FirstDayOfWeek} and {@code 4} as the value of the
 * {@link Calendar#getMinimalDaysInFirstWeek() MinimalDaysInFirstWeek}.
 * <p>
 * {@code ZoneDateTime} can store points on the time-line further in the
 * future and further in the past than {@code GregorianCalendar}. In this
 * scenario, this method will throw an {@code IllegalArgumentException}
 * exception.
 *
 * @param zdt  the zoned date-time object to convert
 * @return  the gregorian calendar representing the same point on the
 *  time-line as the zoned date-time provided
 * @exception NullPointerException if {@code zdt} is null
 * @exception IllegalArgumentException if the zoned date-time is too
 * large to represent as a {@code GregorianCalendar}
 * @since 1.8
 */
public static GregorianCalendar from(ZonedDateTime zdt) {
    GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(zdt.getZone()));
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setFirstDayOfWeek(MONDAY);
    cal.setMinimalDaysInFirstWeek(4);
    try {
        cal.setTimeInMillis(Math.addExact(Math.multiplyExact(zdt.toEpochSecond(), 1000), zdt.get(ChronoField.MILLI_OF_SECOND)));
    } catch (ArithmeticException ex) {
        throw new IllegalArgumentException(ex);
    }
    return cal;
}