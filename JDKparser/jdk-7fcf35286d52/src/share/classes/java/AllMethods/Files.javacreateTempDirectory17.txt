/**
 * Creates a new directory in the specified directory, using the given
 * prefix to generate its name.  The resulting {@code Path} is associated
 * with the same {@code FileSystem} as the given directory.
 *
 * <p> The details as to how the name of the directory is constructed is
 * implementation dependent and therefore not specified. Where possible
 * the {@code prefix} is used to construct candidate names.
 *
 * <p> As with the {@code createTempFile} methods, this method is only
 * part of a temporary-file facility. A {@link Runtime#addShutdownHook
 * shutdown-hook}, or the {@link java.io.File#deleteOnExit} mechanism may be
 * used to delete the directory automatically.
 *
 * <p> The {@code attrs} parameter is optional {@link FileAttribute
 * file-attributes} to set atomically when creating the directory. Each
 * attribute is identified by its {@link FileAttribute#name name}. If more
 * than one attribute of the same name is included in the array then all but
 * the last occurrence is ignored.
 *
 * @param   dir
 *          the path to directory in which to create the directory
 * @param   prefix
 *          the prefix string to be used in generating the directory's name;
 *          may be {@code null}
 * @param   attrs
 *          an optional list of file attributes to set atomically when
 *          creating the directory
 *
 * @return  the path to the newly created directory that did not exist before
 *          this method was invoked
 *
 * @throws  IllegalArgumentException
 *          if the prefix cannot be used to generate a candidate directory name
 * @throws  UnsupportedOperationException
 *          if the array contains an attribute that cannot be set atomically
 *          when creating the directory
 * @throws  IOException
 *          if an I/O error occurs or {@code dir} does not exist
 * @throws  SecurityException
 *          In the case of the default provider, and a security manager is
 *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}
 *          method is invoked to check write access when creating the
 *          directory.
 */
public static Path createTempDirectory(Path dir, String prefix, FileAttribute<?>... attrs) throws IOException {
    return TempFileHelper.createTempDirectory(Objects.requireNonNull(dir), prefix, attrs);
}