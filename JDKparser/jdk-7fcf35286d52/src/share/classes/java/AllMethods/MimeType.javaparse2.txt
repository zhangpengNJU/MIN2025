// equals()
/**
 * A routine for parsing the MIME type out of a String.
 *
 * @throws NullPointerException if <code>rawdata</code> is null
 */
private void parse(String rawdata) throws MimeTypeParseException {
    int slashIndex = rawdata.indexOf('/');
    int semIndex = rawdata.indexOf(';');
    if ((slashIndex < 0) && (semIndex < 0)) {
        // neither character is present, so treat it
        // as an error
        throw new MimeTypeParseException("Unable to find a sub type.");
    } else if ((slashIndex < 0) && (semIndex >= 0)) {
        // we have a ';' (and therefore a parameter list),
        // but no '/' indicating a sub type is present
        throw new MimeTypeParseException("Unable to find a sub type.");
    } else if ((slashIndex >= 0) && (semIndex < 0)) {
        // we have a primary and sub type but no parameter list
        primaryType = rawdata.substring(0, slashIndex).trim().toLowerCase(Locale.ENGLISH);
        subType = rawdata.substring(slashIndex + 1).trim().toLowerCase(Locale.ENGLISH);
        parameters = new MimeTypeParameterList();
    } else if (slashIndex < semIndex) {
        // we have all three items in the proper sequence
        primaryType = rawdata.substring(0, slashIndex).trim().toLowerCase(Locale.ENGLISH);
        subType = rawdata.substring(slashIndex + 1, semIndex).trim().toLowerCase(Locale.ENGLISH);
        parameters = new MimeTypeParameterList(rawdata.substring(semIndex));
    } else {
        // we have a ';' lexically before a '/' which means we have a primary type
        // & a parameter list but no sub type
        throw new MimeTypeParseException("Unable to find a sub type.");
    }
    // now validate the primary and sub types
    // check to see if primary is valid
    if (!isValidToken(primaryType)) {
        throw new MimeTypeParseException("Primary type is invalid.");
    }
    // check to see if sub is valid
    if (!isValidToken(subType)) {
        throw new MimeTypeParseException("Sub type is invalid.");
    }
}