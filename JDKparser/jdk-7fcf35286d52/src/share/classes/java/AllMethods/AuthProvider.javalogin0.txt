/**
 * Log in to this provider.
 *
 * <p> The provider relies on a {@code CallbackHandler}
 * to obtain authentication information from the caller
 * (a PIN, for example).  If the caller passes a {@code null}
 * handler to this method, the provider uses the handler set in the
 * {@code setCallbackHandler} method.
 * If no handler was set in that method, the provider queries the
 * <i>auth.login.defaultCallbackHandler</i> security property
 * for the fully qualified class name of a default handler implementation.
 * If the security property is not set,
 * the provider is assumed to have alternative means
 * for obtaining authentication information.
 *
 * @param subject the {@code Subject} which may contain
 *          principals/credentials used for authentication,
 *          or may be populated with additional principals/credentials
 *          after successful authentication has completed.
 *          This parameter may be {@code null}.
 * @param handler the {@code CallbackHandler} used by
 *          this provider to obtain authentication information
 *          from the caller, which may be {@code null}
 *
 * @exception LoginException if the login operation fails
 * @exception SecurityException if the caller does not pass a
 *  security check for
 *  {@code SecurityPermission("authProvider.name")},
 *  where {@code name} is the value returned by
 *  this provider's {@code getName} method
 */
public abstract void login(Subject subject, CallbackHandler handler) throws LoginException;