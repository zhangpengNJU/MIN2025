/**
 * Appends the time-zone region ID, such as 'Europe/Paris', to the formatter,
 * rejecting the zone ID if it is a {@code ZoneOffset}.
 * <p>
 * This appends an instruction to format/parse the zone ID to the builder
 * only if it is a region-based ID.
 * <p>
 * During formatting, the zone is obtained using a mechanism equivalent
 * to querying the temporal with {@link TemporalQueries#zoneId()}.
 * If the zone is a {@code ZoneOffset} or it cannot be obtained then
 * an exception is thrown unless the section of the formatter is optional.
 * If the zone is not an offset, then the zone will be printed using
 * the zone ID from {@link ZoneId#getId()}.
 * <p>
 * During parsing, the text must match a known zone or offset.
 * There are two types of zone ID, offset-based, such as '+01:30' and
 * region-based, such as 'Europe/London'. These are parsed differently.
 * If the parse starts with '+', '-', 'UT', 'UTC' or 'GMT', then the parser
 * expects an offset-based zone and will not match region-based zones.
 * The offset ID, such as '+02:30', may be at the start of the parse,
 * or prefixed by  'UT', 'UTC' or 'GMT'. The offset ID parsing is
 * equivalent to using {@link #appendOffset(String, String)} using the
 * arguments 'HH:MM:ss' and the no offset string '0'.
 * If the parse starts with 'UT', 'UTC' or 'GMT', and the parser cannot
 * match a following offset ID, then {@link ZoneOffset#UTC} is selected.
 * In all other cases, the list of known region-based zones is used to
 * find the longest available match. If no match is found, and the parse
 * starts with 'Z', then {@code ZoneOffset.UTC} is selected.
 * The parser uses the {@linkplain #parseCaseInsensitive() case sensitive} setting.
 * <p>
 * For example, the following will parse:
 * <pre>
 *   "Europe/London"           -- ZoneId.of("Europe/London")
 *   "Z"                       -- ZoneOffset.UTC
 *   "UT"                      -- ZoneId.of("UT")
 *   "UTC"                     -- ZoneId.of("UTC")
 *   "GMT"                     -- ZoneId.of("GMT")
 *   "+01:30"                  -- ZoneOffset.of("+01:30")
 *   "UT+01:30"                -- ZoneOffset.of("+01:30")
 *   "UTC+01:30"               -- ZoneOffset.of("+01:30")
 *   "GMT+01:30"               -- ZoneOffset.of("+01:30")
 * </pre>
 * <p>
 * Note that this method is identical to {@code appendZoneId()} except
 * in the mechanism used to obtain the zone.
 * Note also that parsing accepts offsets, whereas formatting will never
 * produce one.
 *
 * @return this, for chaining, not null
 * @see #appendZoneId()
 */
public DateTimeFormatterBuilder appendZoneRegionId() {
    appendInternal(new ZoneIdPrinterParser(QUERY_REGION_ONLY, "ZoneRegionId()"));
    return this;
}