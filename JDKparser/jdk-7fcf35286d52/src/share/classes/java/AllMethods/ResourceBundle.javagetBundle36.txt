/**
 * Returns a resource bundle using the specified base name, target
 * locale, class loader and control. Unlike the {@linkplain
 * #getBundle(String, Locale, ClassLoader) <code>getBundle</code>
 * factory methods with no <code>control</code> argument}, the given
 * <code>control</code> specifies how to locate and instantiate resource
 * bundles. Conceptually, the bundle loading process with the given
 * <code>control</code> is performed in the following steps.
 *
 * <ol>
 * <li>This factory method looks up the resource bundle in the cache for
 * the specified <code>baseName</code>, <code>targetLocale</code> and
 * <code>loader</code>.  If the requested resource bundle instance is
 * found in the cache and the time-to-live periods of the instance and
 * all of its parent instances have not expired, the instance is returned
 * to the caller. Otherwise, this factory method proceeds with the
 * loading process below.</li>
 *
 * <li>The {@link ResourceBundle.Control#getFormats(String)
 * control.getFormats} method is called to get resource bundle formats
 * to produce bundle or resource names. The strings
 * <code>"java.class"</code> and <code>"java.properties"</code>
 * designate class-based and {@linkplain PropertyResourceBundle
 * property}-based resource bundles, respectively. Other strings
 * starting with <code>"java."</code> are reserved for future extensions
 * and must not be used for application-defined formats. Other strings
 * designate application-defined formats.</li>
 *
 * <li>The {@link ResourceBundle.Control#getCandidateLocales(String,
 * Locale) control.getCandidateLocales} method is called with the target
 * locale to get a list of <em>candidate <code>Locale</code>s</em> for
 * which resource bundles are searched.</li>
 *
 * <li>The {@link ResourceBundle.Control#newBundle(String, Locale,
 * String, ClassLoader, boolean) control.newBundle} method is called to
 * instantiate a <code>ResourceBundle</code> for the base bundle name, a
 * candidate locale, and a format. (Refer to the note on the cache
 * lookup below.) This step is iterated over all combinations of the
 * candidate locales and formats until the <code>newBundle</code> method
 * returns a <code>ResourceBundle</code> instance or the iteration has
 * used up all the combinations. For example, if the candidate locales
 * are <code>Locale("de", "DE")</code>, <code>Locale("de")</code> and
 * <code>Locale("")</code> and the formats are <code>"java.class"</code>
 * and <code>"java.properties"</code>, then the following is the
 * sequence of locale-format combinations to be used to call
 * <code>control.newBundle</code>.
 *
 * <table style="width: 50%; text-align: left; margin-left: 40px;"
 *  border="0" cellpadding="2" cellspacing="2" summary="locale-format combinations for newBundle">
 * <tbody>
 * <tr>
 * <td
 * style="vertical-align: top; text-align: left; font-weight: bold; width: 50%;"><code>Locale</code><br>
 * </td>
 * <td
 * style="vertical-align: top; text-align: left; font-weight: bold; width: 50%;"><code>format</code><br>
 * </td>
 * </tr>
 * <tr>
 * <td style="vertical-align: top; width: 50%;"><code>Locale("de", "DE")</code><br>
 * </td>
 * <td style="vertical-align: top; width: 50%;"><code>java.class</code><br>
 * </td>
 * </tr>
 * <tr>
 * <td style="vertical-align: top; width: 50%;"><code>Locale("de", "DE")</code></td>
 * <td style="vertical-align: top; width: 50%;"><code>java.properties</code><br>
 * </td>
 * </tr>
 * <tr>
 * <td style="vertical-align: top; width: 50%;"><code>Locale("de")</code></td>
 * <td style="vertical-align: top; width: 50%;"><code>java.class</code></td>
 * </tr>
 * <tr>
 * <td style="vertical-align: top; width: 50%;"><code>Locale("de")</code></td>
 * <td style="vertical-align: top; width: 50%;"><code>java.properties</code></td>
 * </tr>
 * <tr>
 * <td style="vertical-align: top; width: 50%;"><code>Locale("")</code><br>
 * </td>
 * <td style="vertical-align: top; width: 50%;"><code>java.class</code></td>
 * </tr>
 * <tr>
 * <td style="vertical-align: top; width: 50%;"><code>Locale("")</code></td>
 * <td style="vertical-align: top; width: 50%;"><code>java.properties</code></td>
 * </tr>
 * </tbody>
 * </table>
 * </li>
 *
 * <li>If the previous step has found no resource bundle, proceed to
 * Step 6. If a bundle has been found that is a base bundle (a bundle
 * for <code>Locale("")</code>), and the candidate locale list only contained
 * <code>Locale("")</code>, return the bundle to the caller. If a bundle
 * has been found that is a base bundle, but the candidate locale list
 * contained locales other than Locale(""), put the bundle on hold and
 * proceed to Step 6. If a bundle has been found that is not a base
 * bundle, proceed to Step 7.</li>
 *
 * <li>The {@link ResourceBundle.Control#getFallbackLocale(String,
 * Locale) control.getFallbackLocale} method is called to get a fallback
 * locale (alternative to the current target locale) to try further
 * finding a resource bundle. If the method returns a non-null locale,
 * it becomes the next target locale and the loading process starts over
 * from Step 3. Otherwise, if a base bundle was found and put on hold in
 * a previous Step 5, it is returned to the caller now. Otherwise, a
 * MissingResourceException is thrown.</li>
 *
 * <li>At this point, we have found a resource bundle that's not the
 * base bundle. If this bundle set its parent during its instantiation,
 * it is returned to the caller. Otherwise, its <a
 * href="./ResourceBundle.html#parent_chain">parent chain</a> is
 * instantiated based on the list of candidate locales from which it was
 * found. Finally, the bundle is returned to the caller.</li>
 * </ol>
 *
 * <p>During the resource bundle loading process above, this factory
 * method looks up the cache before calling the {@link
 * Control#newBundle(String, Locale, String, ClassLoader, boolean)
 * control.newBundle} method.  If the time-to-live period of the
 * resource bundle found in the cache has expired, the factory method
 * calls the {@link ResourceBundle.Control#needsReload(String, Locale,
 * String, ClassLoader, ResourceBundle, long) control.needsReload}
 * method to determine whether the resource bundle needs to be reloaded.
 * If reloading is required, the factory method calls
 * <code>control.newBundle</code> to reload the resource bundle.  If
 * <code>control.newBundle</code> returns <code>null</code>, the factory
 * method puts a dummy resource bundle in the cache as a mark of
 * nonexistent resource bundles in order to avoid lookup overhead for
 * subsequent requests. Such dummy resource bundles are under the same
 * expiration control as specified by <code>control</code>.
 *
 * <p>All resource bundles loaded are cached by default. Refer to
 * {@link Control#getTimeToLive(String,Locale)
 * control.getTimeToLive} for details.
 *
 * <p>The following is an example of the bundle loading process with the
 * default <code>ResourceBundle.Control</code> implementation.
 *
 * <p>Conditions:
 * <ul>
 * <li>Base bundle name: <code>foo.bar.Messages</code>
 * <li>Requested <code>Locale</code>: {@link Locale#ITALY}</li>
 * <li>Default <code>Locale</code>: {@link Locale#FRENCH}</li>
 * <li>Available resource bundles:
 * <code>foo/bar/Messages_fr.properties</code> and
 * <code>foo/bar/Messages.properties</code></li>
 * </ul>
 *
 * <p>First, <code>getBundle</code> tries loading a resource bundle in
 * the following sequence.
 *
 * <ul>
 * <li>class <code>foo.bar.Messages_it_IT</code>
 * <li>file <code>foo/bar/Messages_it_IT.properties</code>
 * <li>class <code>foo.bar.Messages_it</code></li>
 * <li>file <code>foo/bar/Messages_it.properties</code></li>
 * <li>class <code>foo.bar.Messages</code></li>
 * <li>file <code>foo/bar/Messages.properties</code></li>
 * </ul>
 *
 * <p>At this point, <code>getBundle</code> finds
 * <code>foo/bar/Messages.properties</code>, which is put on hold
 * because it's the base bundle.  <code>getBundle</code> calls {@link
 * Control#getFallbackLocale(String, Locale)
 * control.getFallbackLocale("foo.bar.Messages", Locale.ITALY)} which
 * returns <code>Locale.FRENCH</code>. Next, <code>getBundle</code>
 * tries loading a bundle in the following sequence.
 *
 * <ul>
 * <li>class <code>foo.bar.Messages_fr</code></li>
 * <li>file <code>foo/bar/Messages_fr.properties</code></li>
 * <li>class <code>foo.bar.Messages</code></li>
 * <li>file <code>foo/bar/Messages.properties</code></li>
 * </ul>
 *
 * <p><code>getBundle</code> finds
 * <code>foo/bar/Messages_fr.properties</code> and creates a
 * <code>ResourceBundle</code> instance. Then, <code>getBundle</code>
 * sets up its parent chain from the list of the candidate locales.  Only
 * <code>foo/bar/Messages.properties</code> is found in the list and
 * <code>getBundle</code> creates a <code>ResourceBundle</code> instance
 * that becomes the parent of the instance for
 * <code>foo/bar/Messages_fr.properties</code>.
 *
 * @param baseName
 *        the base name of the resource bundle, a fully qualified
 *        class name
 * @param targetLocale
 *        the locale for which a resource bundle is desired
 * @param loader
 *        the class loader from which to load the resource bundle
 * @param control
 *        the control which gives information for the resource
 *        bundle loading process
 * @return a resource bundle for the given base name and locale
 * @exception NullPointerException
 *        if <code>baseName</code>, <code>targetLocale</code>,
 *        <code>loader</code>, or <code>control</code> is
 *        <code>null</code>
 * @exception MissingResourceException
 *        if no resource bundle for the specified base name can be found
 * @exception IllegalArgumentException
 *        if the given <code>control</code> doesn't perform properly
 *        (e.g., <code>control.getCandidateLocales</code> returns null.)
 *        Note that validation of <code>control</code> is performed as
 *        needed.
 * @since 1.6
 */
public static ResourceBundle getBundle(String baseName, Locale targetLocale, ClassLoader loader, Control control) {
    if (loader == null || control == null) {
        throw new NullPointerException();
    }
    return getBundleImpl(baseName, targetLocale, loader, control);
}