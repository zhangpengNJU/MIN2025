LambdaForm spreadArgumentsForm(int pos, Class<?> arrayType, int arrayLength) {
    Class<?> elementType = arrayType.getComponentType();
    Class<?> erasedArrayType = arrayType;
    if (!elementType.isPrimitive())
        erasedArrayType = Object[].class;
    BasicType bt = basicType(elementType);
    int elementTypeKey = bt.ordinal();
    if (bt.basicTypeClass() != elementType) {
        if (elementType.isPrimitive()) {
            elementTypeKey = TYPE_LIMIT + Wrapper.forPrimitiveType(elementType).ordinal();
        }
    }
    Transform key = Transform.of(Transform.Kind.SPREAD_ARGS, pos, elementTypeKey, arrayLength);
    LambdaForm form = getInCache(key);
    if (form != null) {
        assert (form.arity == lambdaForm.arity - arrayLength + 1);
        return form;
    }
    LambdaFormBuffer buf = buffer();
    buf.startEdit();
    assert (pos <= MethodType.MAX_JVM_ARITY);
    assert (pos + arrayLength <= lambdaForm.arity);
    // cannot spread the MH arg itself
    assert (pos > 0);
    Name spreadParam = new Name(L_TYPE);
    Name checkSpread = new Name(MethodHandleImpl.Lazy.NF_checkSpreadArgument, spreadParam, arrayLength);
    // insert the new expressions
    int exprPos = lambdaForm.arity();
    buf.insertExpression(exprPos++, checkSpread);
    // adjust the arguments
    MethodHandle aload = MethodHandles.arrayElementGetter(erasedArrayType);
    for (int i = 0; i < arrayLength; i++) {
        Name loadArgument = new Name(aload, spreadParam, i);
        buf.insertExpression(exprPos + i, loadArgument);
        buf.replaceParameterByCopy(pos + i, exprPos + i);
    }
    buf.insertParameter(pos, spreadParam);
    form = buf.endEdit();
    return putInCache(key, form);
}