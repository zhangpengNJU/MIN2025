/**
 * Returns a {@code Type} object that represents the declared type for
 * the field represented by this {@code Field} object.
 *
 * <p>If the {@code Type} is a parameterized type, the
 * {@code Type} object returned must accurately reflect the
 * actual type parameters used in the source code.
 *
 * <p>If the type of the underlying field is a type variable or a
 * parameterized type, it is created. Otherwise, it is resolved.
 *
 * @return a {@code Type} object that represents the declared type for
 *     the field represented by this {@code Field} object
 * @throws GenericSignatureFormatError if the generic field
 *     signature does not conform to the format specified in
 *     <cite>The Java&trade; Virtual Machine Specification</cite>
 * @throws TypeNotPresentException if the generic type
 *     signature of the underlying field refers to a non-existent
 *     type declaration
 * @throws MalformedParameterizedTypeException if the generic
 *     signature of the underlying field refers to a parameterized type
 *     that cannot be instantiated for any reason
 * @since 1.5
 */
public Type getGenericType() {
    if (getGenericSignature() != null)
        return getGenericInfo().getGenericType();
    else
        return getType();
}