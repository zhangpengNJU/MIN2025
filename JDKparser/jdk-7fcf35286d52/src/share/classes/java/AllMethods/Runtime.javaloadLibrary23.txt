/**
 * Loads the native library specified by the <code>libname</code>
 * argument.  The <code>libname</code> argument must not contain any platform
 * specific prefix, file extension or path. If a native library
 * called <code>libname</code> is statically linked with the VM, then the
 * JNI_OnLoad_<code>libname</code> function exported by the library is invoked.
 * See the JNI Specification for more details.
 *
 * Otherwise, the libname argument is loaded from a system library
 * location and mapped to a native library image in an implementation-
 * dependent manner.
 * <p>
 * First, if there is a security manager, its <code>checkLink</code>
 * method is called with the <code>libname</code> as its argument.
 * This may result in a security exception.
 * <p>
 * The method {@link System#loadLibrary(String)} is the conventional
 * and convenient means of invoking this method. If native
 * methods are to be used in the implementation of a class, a standard
 * strategy is to put the native code in a library file (call it
 * <code>LibFile</code>) and then to put a static initializer:
 * <blockquote><pre>
 * static { System.loadLibrary("LibFile"); }
 * </pre></blockquote>
 * within the class declaration. When the class is loaded and
 * initialized, the necessary native code implementation for the native
 * methods will then be loaded as well.
 * <p>
 * If this method is called more than once with the same library
 * name, the second and subsequent calls are ignored.
 *
 * @param      libname   the name of the library.
 * @exception  SecurityException  if a security manager exists and its
 *             <code>checkLink</code> method doesn't allow
 *             loading of the specified dynamic library
 * @exception  UnsatisfiedLinkError if either the libname argument
 *             contains a file path, the native library is not statically
 *             linked with the VM,  or the library cannot be mapped to a
 *             native library image by the host system.
 * @exception  NullPointerException if <code>libname</code> is
 *             <code>null</code>
 * @see        java.lang.SecurityException
 * @see        java.lang.SecurityManager#checkLink(java.lang.String)
 */
@CallerSensitive
public void loadLibrary(String libname) {
    loadLibrary0(Reflection.getCallerClass(), libname);
}