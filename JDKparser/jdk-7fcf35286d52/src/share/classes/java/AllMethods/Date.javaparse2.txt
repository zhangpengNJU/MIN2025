/**
 * Attempts to interpret the string <tt>s</tt> as a representation
 * of a date and time. If the attempt is successful, the time
 * indicated is returned represented as the distance, measured in
 * milliseconds, of that time from the epoch (00:00:00 GMT on
 * January 1, 1970). If the attempt fails, an
 * <tt>IllegalArgumentException</tt> is thrown.
 * <p>
 * It accepts many syntaxes; in particular, it recognizes the IETF
 * standard date syntax: "Sat, 12 Aug 1995 13:30:00 GMT". It also
 * understands the continental U.S. time-zone abbreviations, but for
 * general use, a time-zone offset should be used: "Sat, 12 Aug 1995
 * 13:30:00 GMT+0430" (4 hours, 30 minutes west of the Greenwich
 * meridian). If no time zone is specified, the local time zone is
 * assumed. GMT and UTC are considered equivalent.
 * <p>
 * The string <tt>s</tt> is processed from left to right, looking for
 * data of interest. Any material in <tt>s</tt> that is within the
 * ASCII parenthesis characters <tt>(</tt> and <tt>)</tt> is ignored.
 * Parentheses may be nested. Otherwise, the only characters permitted
 * within <tt>s</tt> are these ASCII characters:
 * <blockquote><pre>
 * abcdefghijklmnopqrstuvwxyz
 * ABCDEFGHIJKLMNOPQRSTUVWXYZ
 * 0123456789,+-:/</pre></blockquote>
 * and whitespace characters.<p>
 * A consecutive sequence of decimal digits is treated as a decimal
 * number:<ul>
 * <li>If a number is preceded by <tt>+</tt> or <tt>-</tt> and a year
 *     has already been recognized, then the number is a time-zone
 *     offset. If the number is less than 24, it is an offset measured
 *     in hours. Otherwise, it is regarded as an offset in minutes,
 *     expressed in 24-hour time format without punctuation. A
 *     preceding <tt>-</tt> means a westward offset. Time zone offsets
 *     are always relative to UTC (Greenwich). Thus, for example,
 *     <tt>-5</tt> occurring in the string would mean "five hours west
 *     of Greenwich" and <tt>+0430</tt> would mean "four hours and
 *     thirty minutes east of Greenwich." It is permitted for the
 *     string to specify <tt>GMT</tt>, <tt>UT</tt>, or <tt>UTC</tt>
 *     redundantly-for example, <tt>GMT-5</tt> or <tt>utc+0430</tt>.
 * <li>The number is regarded as a year number if one of the
 *     following conditions is true:
 * <ul>
 *     <li>The number is equal to or greater than 70 and followed by a
 *         space, comma, slash, or end of string
 *     <li>The number is less than 70, and both a month and a day of
 *         the month have already been recognized</li>
 * </ul>
 *     If the recognized year number is less than 100, it is
 *     interpreted as an abbreviated year relative to a century of
 *     which dates are within 80 years before and 19 years after
 *     the time when the Date class is initialized.
 *     After adjusting the year number, 1900 is subtracted from
 *     it. For example, if the current year is 1999 then years in
 *     the range 19 to 99 are assumed to mean 1919 to 1999, while
 *     years from 0 to 18 are assumed to mean 2000 to 2018.  Note
 *     that this is slightly different from the interpretation of
 *     years less than 100 that is used in {@link java.text.SimpleDateFormat}.
 * <li>If the number is followed by a colon, it is regarded as an hour,
 *     unless an hour has already been recognized, in which case it is
 *     regarded as a minute.
 * <li>If the number is followed by a slash, it is regarded as a month
 *     (it is decreased by 1 to produce a number in the range <tt>0</tt>
 *     to <tt>11</tt>), unless a month has already been recognized, in
 *     which case it is regarded as a day of the month.
 * <li>If the number is followed by whitespace, a comma, a hyphen, or
 *     end of string, then if an hour has been recognized but not a
 *     minute, it is regarded as a minute; otherwise, if a minute has
 *     been recognized but not a second, it is regarded as a second;
 *     otherwise, it is regarded as a day of the month. </ul><p>
 * A consecutive sequence of letters is regarded as a word and treated
 * as follows:<ul>
 * <li>A word that matches <tt>AM</tt>, ignoring case, is ignored (but
 *     the parse fails if an hour has not been recognized or is less
 *     than <tt>1</tt> or greater than <tt>12</tt>).
 * <li>A word that matches <tt>PM</tt>, ignoring case, adds <tt>12</tt>
 *     to the hour (but the parse fails if an hour has not been
 *     recognized or is less than <tt>1</tt> or greater than <tt>12</tt>).
 * <li>Any word that matches any prefix of <tt>SUNDAY, MONDAY, TUESDAY,
 *     WEDNESDAY, THURSDAY, FRIDAY</tt>, or <tt>SATURDAY</tt>, ignoring
 *     case, is ignored. For example, <tt>sat, Friday, TUE</tt>, and
 *     <tt>Thurs</tt> are ignored.
 * <li>Otherwise, any word that matches any prefix of <tt>JANUARY,
 *     FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER,
 *     OCTOBER, NOVEMBER</tt>, or <tt>DECEMBER</tt>, ignoring case, and
 *     considering them in the order given here, is recognized as
 *     specifying a month and is converted to a number (<tt>0</tt> to
 *     <tt>11</tt>). For example, <tt>aug, Sept, april</tt>, and
 *     <tt>NOV</tt> are recognized as months. So is <tt>Ma</tt>, which
 *     is recognized as <tt>MARCH</tt>, not <tt>MAY</tt>.
 * <li>Any word that matches <tt>GMT, UT</tt>, or <tt>UTC</tt>, ignoring
 *     case, is treated as referring to UTC.
 * <li>Any word that matches <tt>EST, CST, MST</tt>, or <tt>PST</tt>,
 *     ignoring case, is recognized as referring to the time zone in
 *     North America that is five, six, seven, or eight hours west of
 *     Greenwich, respectively. Any word that matches <tt>EDT, CDT,
 *     MDT</tt>, or <tt>PDT</tt>, ignoring case, is recognized as
 *     referring to the same time zone, respectively, during daylight
 *     saving time.</ul><p>
 * Once the entire string s has been scanned, it is converted to a time
 * result in one of two ways. If a time zone or time-zone offset has been
 * recognized, then the year, month, day of month, hour, minute, and
 * second are interpreted in UTC and then the time-zone offset is
 * applied. Otherwise, the year, month, day of month, hour, minute, and
 * second are interpreted in the local time zone.
 *
 * @param   s   a string to be parsed as a date.
 * @return  the number of milliseconds since January 1, 1970, 00:00:00 GMT
 *          represented by the string argument.
 * @see     java.text.DateFormat
 * @deprecated As of JDK version 1.1,
 * replaced by <code>DateFormat.parse(String s)</code>.
 */
@Deprecated
public static long parse(String s) {
    int year = Integer.MIN_VALUE;
    int mon = -1;
    int mday = -1;
    int hour = -1;
    int min = -1;
    int sec = -1;
    int millis = -1;
    int c = -1;
    int i = 0;
    int n = -1;
    int wst = -1;
    int tzoffset = -1;
    int prevc = 0;
    syntax: {
        if (s == null)
            break syntax;
        int limit = s.length();
        while (i < limit) {
            c = s.charAt(i);
            i++;
            if (c <= ' ' || c == ',')
                continue;
            if (c == '(') {
                // skip comments
                int depth = 1;
                while (i < limit) {
                    c = s.charAt(i);
                    i++;
                    if (c == '(')
                        depth++;
                    else if (c == ')')
                        if (--depth <= 0)
                            break;
                }
                continue;
            }
            if ('0' <= c && c <= '9') {
                n = c - '0';
                while (i < limit && '0' <= (c = s.charAt(i)) && c <= '9') {
                    n = n * 10 + c - '0';
                    i++;
                }
                if (prevc == '+' || prevc == '-' && year != Integer.MIN_VALUE) {
                    // timezone offset
                    if (n < 24)
                        // EG. "GMT-3"
                        n = n * 60;
                    else
                        // eg "GMT-0430"
                        n = n % 100 + n / 100 * 60;
                    if (// plus means east of GMT
                    prevc == '+')
                        n = -n;
                    if (tzoffset != 0 && tzoffset != -1)
                        break syntax;
                    tzoffset = n;
                } else if (n >= 70)
                    if (year != Integer.MIN_VALUE)
                        break syntax;
                    else if (c <= ' ' || c == ',' || c == '/' || i >= limit)
                        // year = n < 1900 ? n : n - 1900;
                        year = n;
                    else
                        break syntax;
                else if (c == ':')
                    if (hour < 0)
                        hour = (byte) n;
                    else if (min < 0)
                        min = (byte) n;
                    else
                        break syntax;
                else if (c == '/')
                    if (mon < 0)
                        mon = (byte) (n - 1);
                    else if (mday < 0)
                        mday = (byte) n;
                    else
                        break syntax;
                else if (i < limit && c != ',' && c > ' ' && c != '-')
                    break syntax;
                else if (hour >= 0 && min < 0)
                    min = (byte) n;
                else if (min >= 0 && sec < 0)
                    sec = (byte) n;
                else if (mday < 0)
                    mday = (byte) n;
                else // Handle two-digit years < 70 (70-99 handled above).
                if (year == Integer.MIN_VALUE && mon >= 0 && mday >= 0)
                    year = n;
                else
                    break syntax;
                prevc = 0;
            } else if (c == '/' || c == ':' || c == '+' || c == '-')
                prevc = c;
            else {
                int st = i - 1;
                while (i < limit) {
                    c = s.charAt(i);
                    if (!('A' <= c && c <= 'Z' || 'a' <= c && c <= 'z'))
                        break;
                    i++;
                }
                if (i <= st + 1)
                    break syntax;
                int k;
                for (k = wtb.length; --k >= 0; ) if (wtb[k].regionMatches(true, 0, s, st, i - st)) {
                    int action = ttb[k];
                    if (action != 0) {
                        if (action == 1) {
                            // pm
                            if (hour > 12 || hour < 1)
                                break syntax;
                            else if (hour < 12)
                                hour += 12;
                        } else if (action == 14) {
                            // am
                            if (hour > 12 || hour < 1)
                                break syntax;
                            else if (hour == 12)
                                hour = 0;
                        } else if (action <= 13) {
                            // month!
                            if (mon < 0)
                                mon = (byte) (action - 2);
                            else
                                break syntax;
                        } else {
                            tzoffset = action - 10000;
                        }
                    }
                    break;
                }
                if (k < 0)
                    break syntax;
                prevc = 0;
            }
        }
        if (year == Integer.MIN_VALUE || mon < 0 || mday < 0)
            break syntax;
        // Parse 2-digit years within the correct default century.
        if (year < 100) {
            synchronized (Date.class) {
                if (defaultCenturyStart == 0) {
                    defaultCenturyStart = gcal.getCalendarDate().getYear() - 80;
                }
            }
            year += (defaultCenturyStart / 100) * 100;
            if (year < defaultCenturyStart)
                year += 100;
        }
        if (sec < 0)
            sec = 0;
        if (min < 0)
            min = 0;
        if (hour < 0)
            hour = 0;
        BaseCalendar cal = getCalendarSystem(year);
        if (tzoffset == -1) {
            // no time zone specified, have to use local
            BaseCalendar.Date ldate = (BaseCalendar.Date) cal.newCalendarDate(TimeZone.getDefaultRef());
            ldate.setDate(year, mon + 1, mday);
            ldate.setTimeOfDay(hour, min, sec, 0);
            return cal.getTime(ldate);
        }
        // no time zone
        BaseCalendar.Date udate = (BaseCalendar.Date) cal.newCalendarDate(null);
        udate.setDate(year, mon + 1, mday);
        udate.setTimeOfDay(hour, min, sec, 0);
        return cal.getTime(udate) + tzoffset * (60 * 1000);
    }
    // syntax error
    throw new IllegalArgumentException();
}