/**
 * Returns a {@link Set} view of the mappings contained in this map.
 * The set is backed by the map, so changes to the map are
 * reflected in the set, and vice-versa.  The set supports element
 * removal, which removes the corresponding mapping from the map,
 * via the {@code Iterator.remove}, {@code Set.remove},
 * {@code removeAll}, {@code retainAll}, and {@code clear}
 * operations.
 *
 * <p>The view's iterators and spliterators are
 * <a href="package-summary.html#Weakly"><i>weakly consistent</i></a>.
 *
 * <p>The view's {@code spliterator} reports {@link Spliterator#CONCURRENT},
 * {@link Spliterator#DISTINCT}, and {@link Spliterator#NONNULL}.
 *
 * @return the set view
 */
public Set<Map.Entry<K, V>> entrySet() {
    EntrySetView<K, V> es;
    return (es = entrySet) != null ? es : (entrySet = new EntrySetView<K, V>(this));
}