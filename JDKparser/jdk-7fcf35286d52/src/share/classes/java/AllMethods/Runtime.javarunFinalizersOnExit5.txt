/**
 * Enable or disable finalization on exit; doing so specifies that the
 * finalizers of all objects that have finalizers that have not yet been
 * automatically invoked are to be run before the Java runtime exits.
 * By default, finalization on exit is disabled.
 *
 * <p>If there is a security manager,
 * its <code>checkExit</code> method is first called
 * with 0 as its argument to ensure the exit is allowed.
 * This could result in a SecurityException.
 *
 * @param value true to enable finalization on exit, false to disable
 * @deprecated  This method is inherently unsafe.  It may result in
 *      finalizers being called on live objects while other threads are
 *      concurrently manipulating those objects, resulting in erratic
 *      behavior or deadlock.
 *
 * @throws  SecurityException
 *        if a security manager exists and its <code>checkExit</code>
 *        method doesn't allow the exit.
 *
 * @see     java.lang.Runtime#exit(int)
 * @see     java.lang.Runtime#gc()
 * @see     java.lang.SecurityManager#checkExit(int)
 * @since   JDK1.1
 */
@Deprecated
public static void runFinalizersOnExit(boolean value) {
    SecurityManager security = System.getSecurityManager();
    if (security != null) {
        try {
            security.checkExit(0);
        } catch (SecurityException e) {
            throw new SecurityException("runFinalizersOnExit");
        }
    }
    Shutdown.setRunFinalizersOnExit(value);
}