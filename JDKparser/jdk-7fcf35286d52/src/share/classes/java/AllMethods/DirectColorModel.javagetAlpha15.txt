/**
 * Returns the alpha component for the specified pixel, scaled
 * from 0 to 255.  The pixel value is specified by an array of data
 * elements of type <code>transferType</code> passed in as an object
 * reference.
 * If <code>inData</code> is not a primitive array of type
 * <code>transferType</code>, a <code>ClassCastException</code> is
 * thrown.  An <code>ArrayIndexOutOfBoundsException</code> is
 * thrown if <code>inData</code> is not large enough to hold a pixel
 * value for this <code>ColorModel</code>.  Since
 * <code>DirectColorModel</code> can be subclassed, subclasses inherit
 * the implementation of this method and if they don't override it
 * then they throw an exception if they use an unsupported
 * <code>transferType</code>.
 * If this <code>transferType</code> is not supported, an
 * <code>UnsupportedOperationException</code> is thrown.
 * @param inData the specified pixel
 * @return the alpha component of the specified pixel, scaled from
 *         0 to 255.
 * @exception ClassCastException if <code>inData</code>
 *  is not a primitive array of type <code>transferType</code>
 * @exception ArrayIndexOutOfBoundsException if
 *  <code>inData</code> is not large enough to hold a pixel value
 *  for this <code>ColorModel</code>
 * @exception UnsupportedOperationException if this
 *  <code>tranferType</code> is not supported by this
 *  <code>ColorModel</code>
 */
public int getAlpha(Object inData) {
    int pixel = 0;
    switch(transferType) {
        case DataBuffer.TYPE_BYTE:
            byte[] bdata = (byte[]) inData;
            pixel = bdata[0] & 0xff;
            break;
        case DataBuffer.TYPE_USHORT:
            short[] sdata = (short[]) inData;
            pixel = sdata[0] & 0xffff;
            break;
        case DataBuffer.TYPE_INT:
            int[] idata = (int[]) inData;
            pixel = idata[0];
            break;
        default:
            throw new UnsupportedOperationException("This method has not been " + "implemented for transferType " + transferType);
    }
    return getAlpha(pixel);
}