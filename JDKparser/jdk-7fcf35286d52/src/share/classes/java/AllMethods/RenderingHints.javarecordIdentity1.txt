private synchronized static void recordIdentity(Key k) {
    Object identity = k.getIdentity();
    Object otherref = identitymap.get(identity);
    if (otherref != null) {
        Key otherkey = (Key) ((WeakReference) otherref).get();
        if (otherkey != null && otherkey.getClass() == k.getClass()) {
            throw new IllegalArgumentException(identity + " already registered");
        }
    // Note that this system can fail in a mostly harmless
    // way.  If we end up generating the same identity
    // String for 2 different classes (a very rare case)
    // then we correctly avoid throwing the exception above,
    // but we are about to drop through to a statement that
    // will replace the entry for the old Key subclass with
    // an entry for the new Key subclass.  At that time the
    // old subclass will be vulnerable to someone generating
    // a duplicate Key instance for it.  We could bail out
    // of the method here and let the old identity keep its
    // record in the map, but we are more likely to see a
    // duplicate key go by for the new class than the old
    // one since the new one is probably still in the
    // initialization stage.  In either case, the probability
    // of loading 2 classes in the same VM with the same name
    // and identityHashCode should be nearly impossible.
    }
    // Note: Use a weak reference to avoid holding on to extra
    // objects and classes after they should be unloaded.
    identitymap.put(identity, new WeakReference<Key>(k));
}