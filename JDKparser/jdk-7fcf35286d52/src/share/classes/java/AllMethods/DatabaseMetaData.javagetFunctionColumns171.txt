/**
 * Retrieves a description of the given catalog's system or user
 * function parameters and return type.
 *
 * <P>Only descriptions matching the schema,  function and
 * parameter name criteria are returned. They are ordered by
 * <code>FUNCTION_CAT</code>, <code>FUNCTION_SCHEM</code>,
 * <code>FUNCTION_NAME</code> and
 * <code>SPECIFIC_ NAME</code>. Within this, the return value,
 * if any, is first. Next are the parameter descriptions in call
 * order. The column descriptions follow in column number order.
 *
 * <P>Each row in the <code>ResultSet</code>
 * is a parameter description, column description or
 * return type description with the following fields:
 *  <OL>
 *  <LI><B>FUNCTION_CAT</B> String {@code =>} function catalog (may be <code>null</code>)
 *  <LI><B>FUNCTION_SCHEM</B> String {@code =>} function schema (may be <code>null</code>)
 *  <LI><B>FUNCTION_NAME</B> String {@code =>} function name.  This is the name
 * used to invoke the function
 *  <LI><B>COLUMN_NAME</B> String {@code =>} column/parameter name
 *  <LI><B>COLUMN_TYPE</B> Short {@code =>} kind of column/parameter:
 *      <UL>
 *      <LI> functionColumnUnknown - nobody knows
 *      <LI> functionColumnIn - IN parameter
 *      <LI> functionColumnInOut - INOUT parameter
 *      <LI> functionColumnOut - OUT parameter
 *      <LI> functionColumnReturn - function return value
 *      <LI> functionColumnResult - Indicates that the parameter or column
 *  is a column in the <code>ResultSet</code>
 *      </UL>
 *  <LI><B>DATA_TYPE</B> int {@code =>} SQL type from java.sql.Types
 *  <LI><B>TYPE_NAME</B> String {@code =>} SQL type name, for a UDT type the
 *  type name is fully qualified
 *  <LI><B>PRECISION</B> int {@code =>} precision
 *  <LI><B>LENGTH</B> int {@code =>} length in bytes of data
 *  <LI><B>SCALE</B> short {@code =>} scale -  null is returned for data types where
 * SCALE is not applicable.
 *  <LI><B>RADIX</B> short {@code =>} radix
 *  <LI><B>NULLABLE</B> short {@code =>} can it contain NULL.
 *      <UL>
 *      <LI> functionNoNulls - does not allow NULL values
 *      <LI> functionNullable - allows NULL values
 *      <LI> functionNullableUnknown - nullability unknown
 *      </UL>
 *  <LI><B>REMARKS</B> String {@code =>} comment describing column/parameter
 *  <LI><B>CHAR_OCTET_LENGTH</B> int  {@code =>} the maximum length of binary
 * and character based parameters or columns.  For any other datatype the returned value
 * is a NULL
 *  <LI><B>ORDINAL_POSITION</B> int  {@code =>} the ordinal position, starting
 * from 1, for the input and output parameters. A value of 0
 * is returned if this row describes the function's return value.
 * For result set columns, it is the
 * ordinal position of the column in the result set starting from 1.
 *  <LI><B>IS_NULLABLE</B> String  {@code =>} ISO rules are used to determine
 * the nullability for a parameter or column.
 *       <UL>
 *       <LI> YES           --- if the parameter or column can include NULLs
 *       <LI> NO            --- if the parameter or column  cannot include NULLs
 *       <LI> empty string  --- if the nullability for the
 * parameter  or column is unknown
 *       </UL>
 *  <LI><B>SPECIFIC_NAME</B> String  {@code =>} the name which uniquely identifies
 * this function within its schema.  This is a user specified, or DBMS
 * generated, name that may be different then the <code>FUNCTION_NAME</code>
 * for example with overload functions
 *  </OL>
 *
 * <p>The PRECISION column represents the specified column size for the given
 * parameter or column.
 * For numeric data, this is the maximum precision.  For character data, this is the length in characters.
 * For datetime datatypes, this is the length in characters of the String representation (assuming the
 * maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,
 * this is the length in bytes. Null is returned for data types where the
 * column size is not applicable.
 * @param catalog a catalog name; must match the catalog name as it
 *        is stored in the database; "" retrieves those without a catalog;
 *        <code>null</code> means that the catalog name should not be used to narrow
 *        the search
 * @param schemaPattern a schema name pattern; must match the schema name
 *        as it is stored in the database; "" retrieves those without a schema;
 *        <code>null</code> means that the schema name should not be used to narrow
 *        the search
 * @param functionNamePattern a procedure name pattern; must match the
 *        function name as it is stored in the database
 * @param columnNamePattern a parameter name pattern; must match the
 * parameter or column name as it is stored in the database
 * @return <code>ResultSet</code> - each row describes a
 * user function parameter, column  or return type
 *
 * @exception SQLException if a database access error occurs
 * @see #getSearchStringEscape
 * @since 1.6
 */
ResultSet getFunctionColumns(String catalog, String schemaPattern, String functionNamePattern, String columnNamePattern) throws SQLException;