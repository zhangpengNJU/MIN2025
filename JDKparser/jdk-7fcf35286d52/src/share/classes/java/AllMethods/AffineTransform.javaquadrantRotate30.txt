/**
 * Concatenates this transform with a transform that rotates
 * coordinates by the specified number of quadrants around
 * the specified anchor point.
 * This method is equivalent to calling:
 * <pre>
 *     rotate(numquadrants * Math.PI / 2.0, anchorx, anchory);
 * </pre>
 * Rotating by a positive number of quadrants rotates points on
 * the positive X axis toward the positive Y axis.
 *
 * @param numquadrants the number of 90 degree arcs to rotate by
 * @param anchorx the X coordinate of the rotation anchor point
 * @param anchory the Y coordinate of the rotation anchor point
 * @since 1.6
 */
public void quadrantRotate(int numquadrants, double anchorx, double anchory) {
    switch(numquadrants & 3) {
        case 0:
            return;
        case 1:
            m02 += anchorx * (m00 - m01) + anchory * (m01 + m00);
            m12 += anchorx * (m10 - m11) + anchory * (m11 + m10);
            rotate90();
            break;
        case 2:
            m02 += anchorx * (m00 + m00) + anchory * (m01 + m01);
            m12 += anchorx * (m10 + m10) + anchory * (m11 + m11);
            rotate180();
            break;
        case 3:
            m02 += anchorx * (m00 + m01) + anchory * (m01 - m00);
            m12 += anchorx * (m10 + m11) + anchory * (m11 - m10);
            rotate270();
            break;
    }
    if (m02 == 0.0 && m12 == 0.0) {
        state &= ~APPLY_TRANSLATE;
    } else {
        state |= APPLY_TRANSLATE;
    }
}