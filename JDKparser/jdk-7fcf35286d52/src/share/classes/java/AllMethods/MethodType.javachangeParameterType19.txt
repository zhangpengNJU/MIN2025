/**
 * Finds or creates a method type with a single different parameter type.
 * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
 * @param num    the index (zero-based) of the parameter type to change
 * @param nptype a new parameter type to replace the old one with
 * @return the same type, except with the selected parameter changed
 * @throws IndexOutOfBoundsException if {@code num} is not a valid index into {@code parameterArray()}
 * @throws IllegalArgumentException if {@code nptype} is {@code void.class}
 * @throws NullPointerException if {@code nptype} is null
 */
public MethodType changeParameterType(int num, Class<?> nptype) {
    if (parameterType(num) == nptype)
        return this;
    checkPtype(nptype);
    Class<?>[] nptypes = ptypes.clone();
    nptypes[num] = nptype;
    return makeImpl(rtype, nptypes, true);
}