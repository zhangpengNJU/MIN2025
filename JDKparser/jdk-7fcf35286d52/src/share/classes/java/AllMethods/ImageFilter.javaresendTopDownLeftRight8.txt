/**
 * Responds to a request for a TopDownLeftRight (TDLR) ordered resend
 * of the pixel data from an <code>ImageConsumer</code>.
 * When an <code>ImageConsumer</code> being fed
 * by an instance of this <code>ImageFilter</code>
 * requests a resend of the data in TDLR order,
 * the <code>FilteredImageSource</code>
 * invokes this method of the <code>ImageFilter</code>.
 *
 * <p>
 *
 * An <code>ImageFilter</code> subclass might override this method or not,
 * depending on if and how it can send data in TDLR order.
 * Three possibilities exist:
 *
 * <ul>
 * <li>
 * Do not override this method.
 * This makes the subclass use the default implementation,
 * which is to
 * forward the request
 * to the indicated <code>ImageProducer</code>
 * using this filter as the requesting <code>ImageConsumer</code>.
 * This behavior
 * is appropriate if the filter can determine
 * that it will forward the pixels
 * in TDLR order if its upstream producer object
 * sends them in TDLR order.
 *
 * <li>
 * Override the method to simply send the data.
 * This is appropriate if the filter can handle the request itself &#151;
 * for example,
 * if the generated pixels have been saved in some sort of buffer.
 *
 * <li>
 * Override the method to do nothing.
 * This is appropriate
 * if the filter cannot produce filtered data in TDLR order.
 * </ul>
 *
 * @see ImageProducer#requestTopDownLeftRightResend
 * @param ip the ImageProducer that is feeding this instance of
 * the filter - also the ImageProducer that the request should be
 * forwarded to if necessary
 * @exception NullPointerException if <code>ip</code> is null
 */
public void resendTopDownLeftRight(ImageProducer ip) {
    ip.requestTopDownLeftRightResend(this);
}