/**
 * Returns an array of all of the color/alpha components in normalized
 * form, given an unnormalized component array.  Unnormalized components
 * are unsigned integral values between 0 and 2<sup>n</sup> - 1, where
 * n is the number of bits for a particular component.  Normalized
 * components are float values between a per component minimum and
 * maximum specified by the <code>ColorSpace</code> object for this
 * <code>ColorModel</code>.  An <code>IllegalArgumentException</code>
 * will be thrown if color component values for this
 * <code>ColorModel</code> are not conveniently representable in the
 * unnormalized form.  If the
 * <code>normComponents</code> array is <code>null</code>, a new array
 * will be allocated.  The <code>normComponents</code> array
 * will be returned.  Color/alpha components are stored in the
 * <code>normComponents</code> array starting at
 * <code>normOffset</code> (even if the array is allocated by this
 * method).  An <code>ArrayIndexOutOfBoundsException</code> is thrown
 * if the <code>normComponents</code> array is not <code>null</code>
 * and is not large enough to hold all the color and alpha components
 * (starting at <code>normOffset</code>).  An
 * <code>IllegalArgumentException</code> is thrown if the
 * <code>components</code> array is not large enough to hold all the
 * color and alpha components starting at <code>offset</code>.
 * @param components an array containing unnormalized components
 * @param offset the offset into the <code>components</code> array at
 * which to start retrieving unnormalized components
 * @param normComponents an array that receives the normalized components
 * @param normOffset the index into <code>normComponents</code> at
 * which to begin storing normalized components
 * @return an array containing normalized color and alpha
 * components.
 * @throws IllegalArgumentException If this
 * <CODE>ComponentColorModel</CODE> does not support the unnormalized form
 */
public float[] getNormalizedComponents(int[] components, int offset, float[] normComponents, int normOffset) {
    if (needScaleInit) {
        initScale();
    }
    if (noUnnorm) {
        throw new IllegalArgumentException("This ColorModel does not support the unnormalized form");
    }
    return super.getNormalizedComponents(components, offset, normComponents, normOffset);
}