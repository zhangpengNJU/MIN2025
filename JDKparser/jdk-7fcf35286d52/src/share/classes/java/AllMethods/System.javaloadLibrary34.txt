/**
 * Loads the native library specified by the <code>libname</code>
 * argument.  The <code>libname</code> argument must not contain any platform
 * specific prefix, file extension or path. If a native library
 * called <code>libname</code> is statically linked with the VM, then the
 * JNI_OnLoad_<code>libname</code> function exported by the library is invoked.
 * See the JNI Specification for more details.
 *
 * Otherwise, the libname argument is loaded from a system library
 * location and mapped to a native library image in an implementation-
 * dependent manner.
 * <p>
 * The call <code>System.loadLibrary(name)</code> is effectively
 * equivalent to the call
 * <blockquote><pre>
 * Runtime.getRuntime().loadLibrary(name)
 * </pre></blockquote>
 *
 * @param      libname   the name of the library.
 * @exception  SecurityException  if a security manager exists and its
 *             <code>checkLink</code> method doesn't allow
 *             loading of the specified dynamic library
 * @exception  UnsatisfiedLinkError if either the libname argument
 *             contains a file path, the native library is not statically
 *             linked with the VM,  or the library cannot be mapped to a
 *             native library image by the host system.
 * @exception  NullPointerException if <code>libname</code> is
 *             <code>null</code>
 * @see        java.lang.Runtime#loadLibrary(java.lang.String)
 * @see        java.lang.SecurityManager#checkLink(java.lang.String)
 */
@CallerSensitive
public static void loadLibrary(String libname) {
    Runtime.getRuntime().loadLibrary0(Reflection.getCallerClass(), libname);
}