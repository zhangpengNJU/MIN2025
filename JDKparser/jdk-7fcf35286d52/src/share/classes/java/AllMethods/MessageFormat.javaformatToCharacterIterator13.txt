/**
 * Formats an array of objects and inserts them into the
 * <code>MessageFormat</code>'s pattern, producing an
 * <code>AttributedCharacterIterator</code>.
 * You can use the returned <code>AttributedCharacterIterator</code>
 * to build the resulting String, as well as to determine information
 * about the resulting String.
 * <p>
 * The text of the returned <code>AttributedCharacterIterator</code> is
 * the same that would be returned by
 * <blockquote>
 *     <code>{@link #format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition) format}(arguments, new StringBuffer(), null).toString()</code>
 * </blockquote>
 * <p>
 * In addition, the <code>AttributedCharacterIterator</code> contains at
 * least attributes indicating where text was generated from an
 * argument in the <code>arguments</code> array. The keys of these attributes are of
 * type <code>MessageFormat.Field</code>, their values are
 * <code>Integer</code> objects indicating the index in the <code>arguments</code>
 * array of the argument from which the text was generated.
 * <p>
 * The attributes/value from the underlying <code>Format</code>
 * instances that <code>MessageFormat</code> uses will also be
 * placed in the resulting <code>AttributedCharacterIterator</code>.
 * This allows you to not only find where an argument is placed in the
 * resulting String, but also which fields it contains in turn.
 *
 * @param arguments an array of objects to be formatted and substituted.
 * @return AttributedCharacterIterator describing the formatted value.
 * @exception NullPointerException if <code>arguments</code> is null.
 * @exception IllegalArgumentException if an argument in the
 *            <code>arguments</code> array is not of the type
 *            expected by the format element(s) that use it.
 * @since 1.4
 */
public AttributedCharacterIterator formatToCharacterIterator(Object arguments) {
    StringBuffer result = new StringBuffer();
    ArrayList<AttributedCharacterIterator> iterators = new ArrayList<>();
    if (arguments == null) {
        throw new NullPointerException("formatToCharacterIterator must be passed non-null object");
    }
    subformat((Object[]) arguments, result, null, iterators);
    if (iterators.size() == 0) {
        return createAttributedCharacterIterator("");
    }
    return createAttributedCharacterIterator(iterators.toArray(new AttributedCharacterIterator[iterators.size()]));
}