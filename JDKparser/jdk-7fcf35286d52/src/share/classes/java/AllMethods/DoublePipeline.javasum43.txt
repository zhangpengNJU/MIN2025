@Override
public final double sum() {
    /*
         * In the arrays allocated for the collect operation, index 0
         * holds the high-order bits of the running sum, index 1 holds
         * the low-order bits of the sum computed via compensated
         * summation, and index 2 holds the simple sum used to compute
         * the proper result if the stream contains infinite values of
         * the same sign.
         */
    double[] summation = collect(() -> new double[3], (ll, d) -> {
        Collectors.sumWithCompensation(ll, d);
        ll[2] += d;
    }, (ll, rr) -> {
        Collectors.sumWithCompensation(ll, rr[0]);
        Collectors.sumWithCompensation(ll, rr[1]);
        ll[2] += rr[2];
    });
    return Collectors.computeFinalSum(summation);
}