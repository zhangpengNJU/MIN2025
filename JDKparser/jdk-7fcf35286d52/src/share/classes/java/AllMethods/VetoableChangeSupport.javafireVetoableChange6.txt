/**
 * Reports a constrained property update to listeners
 * that have been registered to track updates of
 * all properties or a property with the specified name.
 * <p>
 * Any listener can throw a {@code PropertyVetoException} to veto the update.
 * If one of the listeners vetoes the update, this method passes
 * a new "undo" {@code PropertyChangeEvent} that reverts to the old value
 * to all listeners that already confirmed this update
 * and throws the {@code PropertyVetoException} again.
 * <p>
 * No event is fired if old and new values are equal and non-null.
 * <p>
 * This is merely a convenience wrapper around the more general
 * {@link #fireVetoableChange(PropertyChangeEvent)} method.
 *
 * @param propertyName  the programmatic name of the property that is about to change
 * @param oldValue      the old value of the property
 * @param newValue      the new value of the property
 * @throws PropertyVetoException if one of listeners vetoes the property update
 */
public void fireVetoableChange(String propertyName, Object oldValue, Object newValue) throws PropertyVetoException {
    if (oldValue == null || newValue == null || !oldValue.equals(newValue)) {
        fireVetoableChange(new PropertyChangeEvent(this.source, propertyName, oldValue, newValue));
    }
}