/**
 * Accepts a function that extracts a {@link java.lang.Comparable
 * Comparable} sort key from a type {@code T}, and returns a {@code
 * Comparator<T>} that compares by that sort key.
 *
 * <p>The returned comparator is serializable if the specified function
 * is also serializable.
 *
 * @apiNote
 * For example, to obtain a {@code Comparator} that compares {@code
 * Person} objects by their last name,
 *
 * <pre>{@code
 *     Comparator<Person> byLastName = Comparator.comparing(Person::getLastName);
 * }</pre>
 *
 * @param  <T> the type of element to be compared
 * @param  <U> the type of the {@code Comparable} sort key
 * @param  keyExtractor the function used to extract the {@link
 *         Comparable} sort key
 * @return a comparator that compares by an extracted key
 * @throws NullPointerException if the argument is null
 * @since 1.8
 */
public static <T, U extends Comparable<? super U>> Comparator<T> comparing(Function<? super T, ? extends U> keyExtractor) {
    Objects.requireNonNull(keyExtractor);
    return (Comparator<T> & Serializable) (c1, c2) -> keyExtractor.apply(c1).compareTo(keyExtractor.apply(c2));
}