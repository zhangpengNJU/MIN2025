/**
 * Creates a new custom cursor object.
 * If the image to display is invalid, the cursor will be hidden (made
 * completely transparent), and the hotspot will be set to (0, 0).
 *
 * <p>Note that multi-frame images are invalid and may cause this
 * method to hang.
 *
 * @param cursor the image to display when the cursor is activated
 * @param hotSpot the X and Y of the large cursor's hot spot; the
 *   hotSpot values must be less than the Dimension returned by
 *   <code>getBestCursorSize</code>
 * @param     name a localized description of the cursor, for Java Accessibility use
 * @exception IndexOutOfBoundsException if the hotSpot values are outside
 *   the bounds of the cursor
 * @exception HeadlessException if GraphicsEnvironment.isHeadless()
 * returns true
 * @see       java.awt.GraphicsEnvironment#isHeadless
 * @since     1.2
 */
public Cursor createCustomCursor(Image cursor, Point hotSpot, String name) throws IndexOutOfBoundsException, HeadlessException {
    // Override to implement custom cursor support.
    if (this != Toolkit.getDefaultToolkit()) {
        return Toolkit.getDefaultToolkit().createCustomCursor(cursor, hotSpot, name);
    } else {
        return new Cursor(Cursor.DEFAULT_CURSOR);
    }
}