/**
 * Sweeps itrs, looking for and expunging stale iterators.
 * If at least one was found, tries harder to find more.
 * Called only from iterating thread.
 *
 * @param tryHarder whether to start in try-harder mode, because
 * there is known to be at least one iterator to collect
 */
void doSomeSweeping(boolean tryHarder) {
    // assert lock.getHoldCount() == 1;
    // assert head != null;
    int probes = tryHarder ? LONG_SWEEP_PROBES : SHORT_SWEEP_PROBES;
    Node o, p;
    final Node sweeper = this.sweeper;
    // to limit search to one full sweep
    boolean passedGo;
    if (sweeper == null) {
        o = null;
        p = head;
        passedGo = true;
    } else {
        o = sweeper;
        p = o.next;
        passedGo = false;
    }
    for (; probes > 0; probes--) {
        if (p == null) {
            if (passedGo)
                break;
            o = null;
            p = head;
            passedGo = true;
        }
        final Itr it = p.get();
        final Node next = p.next;
        if (it == null || it.isDetached()) {
            // found a discarded/exhausted iterator
            // "try harder"
            probes = LONG_SWEEP_PROBES;
            // unlink p
            p.clear();
            p.next = null;
            if (o == null) {
                head = next;
                if (next == null) {
                    // We've run out of iterators to track; retire
                    itrs = null;
                    return;
                }
            } else
                o.next = next;
        } else {
            o = p;
        }
        p = next;
    }
    this.sweeper = (p == null) ? null : o;
}