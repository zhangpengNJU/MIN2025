// -----------------------------------------------------------------------
/**
 * Obtains an instance of {@code LocalTime} from a second-of-day value.
 * <p>
 * This returns a {@code LocalTime} with the specified second-of-day.
 * The nanosecond field will be set to zero.
 *
 * @param secondOfDay  the second-of-day, from {@code 0} to {@code 24 * 60 * 60 - 1}
 * @return the local time, not null
 * @throws DateTimeException if the second-of-day value is invalid
 */
public static LocalTime ofSecondOfDay(long secondOfDay) {
    SECOND_OF_DAY.checkValidValue(secondOfDay);
    int hours = (int) (secondOfDay / SECONDS_PER_HOUR);
    secondOfDay -= hours * SECONDS_PER_HOUR;
    int minutes = (int) (secondOfDay / SECONDS_PER_MINUTE);
    secondOfDay -= minutes * SECONDS_PER_MINUTE;
    return create(hours, minutes, (int) secondOfDay, 0);
}