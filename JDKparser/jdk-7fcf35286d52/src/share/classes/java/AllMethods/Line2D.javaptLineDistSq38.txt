/**
 * Returns the square of the distance from a point to a line.
 * The distance measured is the distance between the specified
 * point and the closest point on the infinitely-extended line
 * defined by the specified coordinates.  If the specified point
 * intersects the line, this method returns 0.0.
 *
 * @param x1 the X coordinate of the start point of the specified line
 * @param y1 the Y coordinate of the start point of the specified line
 * @param x2 the X coordinate of the end point of the specified line
 * @param y2 the Y coordinate of the end point of the specified line
 * @param px the X coordinate of the specified point being
 *           measured against the specified line
 * @param py the Y coordinate of the specified point being
 *           measured against the specified line
 * @return a double value that is the square of the distance from the
 *                  specified point to the specified line.
 * @see #ptSegDistSq(double, double, double, double, double, double)
 * @since 1.2
 */
public static double ptLineDistSq(double x1, double y1, double x2, double y2, double px, double py) {
    // Adjust vectors relative to x1,y1
    // x2,y2 becomes relative vector from x1,y1 to end of segment
    x2 -= x1;
    y2 -= y1;
    // px,py becomes relative vector from x1,y1 to test point
    px -= x1;
    py -= y1;
    double dotprod = px * x2 + py * y2;
    // dotprod is the length of the px,py vector
    // projected on the x1,y1=>x2,y2 vector times the
    // length of the x1,y1=>x2,y2 vector
    double projlenSq = dotprod * dotprod / (x2 * x2 + y2 * y2);
    // Distance to line is now the length of the relative point
    // vector minus the length of its projection onto the line
    double lenSq = px * px + py * py - projlenSq;
    if (lenSq < 0) {
        lenSq = 0;
    }
    return lenSq;
}