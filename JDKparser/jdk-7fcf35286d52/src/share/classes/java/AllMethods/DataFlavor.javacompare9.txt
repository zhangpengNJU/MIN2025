/**
 * Compares two <code>DataFlavor</code> objects. Returns a negative
 * integer, zero, or a positive integer as the first
 * <code>DataFlavor</code> is worse than, equal to, or better than the
 * second.
 * <p>
 * <code>DataFlavor</code>s are ordered according to the rules outlined
 * for <code>selectBestTextFlavor</code>.
 *
 * @param obj1 the first <code>DataFlavor</code> to be compared
 * @param obj2 the second <code>DataFlavor</code> to be compared
 * @return a negative integer, zero, or a positive integer as the first
 *         argument is worse, equal to, or better than the second
 * @throws ClassCastException if either of the arguments is not an
 *         instance of <code>DataFlavor</code>
 * @throws NullPointerException if either of the arguments is
 *         <code>null</code>
 *
 * @see #selectBestTextFlavor
 */
public int compare(Object obj1, Object obj2) {
    DataFlavor flavor1 = (DataFlavor) obj1;
    DataFlavor flavor2 = (DataFlavor) obj2;
    if (flavor1.isFlavorTextType()) {
        if (flavor2.isFlavorTextType()) {
            return super.compare(obj1, obj2);
        } else {
            return 1;
        }
    } else if (flavor2.isFlavorTextType()) {
        return -1;
    } else {
        return 0;
    }
}