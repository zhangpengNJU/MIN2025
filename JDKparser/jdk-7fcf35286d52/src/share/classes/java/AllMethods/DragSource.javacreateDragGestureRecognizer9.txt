/**
 * Creates a new <code>DragGestureRecognizer</code>
 * that implements the specified
 * abstract subclass of
 * <code>DragGestureRecognizer</code>, and
 * sets the specified <code>Component</code>
 * and <code>DragGestureListener</code> on
 * the newly created object.
 * <P>
 * @param recognizerAbstractClass the requested abstract type
 * @param actions                 the permitted source drag actions
 * @param c                       the <code>Component</code> target
 * @param dgl        the <code>DragGestureListener</code> to notify
 * <P>
 * @return the new <code>DragGestureRecognizer</code> or <code>null</code>
 *    if the <code>Toolkit.createDragGestureRecognizer</code> method
 *    has no implementation available for
 *    the requested <code>DragGestureRecognizer</code>
 *    subclass and returns <code>null</code>
 */
public <T extends DragGestureRecognizer> T createDragGestureRecognizer(Class<T> recognizerAbstractClass, Component c, int actions, DragGestureListener dgl) {
    return Toolkit.getDefaultToolkit().createDragGestureRecognizer(recognizerAbstractClass, this, c, actions, dgl);
}