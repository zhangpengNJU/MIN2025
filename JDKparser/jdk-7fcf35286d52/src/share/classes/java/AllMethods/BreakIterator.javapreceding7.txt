/**
 * Returns the last boundary preceding the specified character offset. If the
 * specified offset equals to the first text boundary, it returns
 * <code>BreakIterator.DONE</code> and the iterator's current position is unchanged.
 * Otherwise, the iterator's current position is set to the returned boundary.
 * The value returned is always less than the offset or the value
 * <code>BreakIterator.DONE</code>.
 * @param offset the character offset to begin scanning.
 * @return The last boundary before the specified offset or
 * <code>BreakIterator.DONE</code> if the first text boundary is passed in
 * as the offset.
 * @exception   IllegalArgumentException if the specified offset is less than
 * the first text boundary or greater than the last text boundary.
 * @since 1.2
 */
public int preceding(int offset) {
    // NOTE:  This implementation is here solely because we can't add new
    // abstract methods to an existing class.  There is almost ALWAYS a
    // better, faster way to do this.
    int pos = following(offset);
    while (pos >= offset && pos != DONE) {
        pos = previous();
    }
    return pos;
}