/**
 * Gets the <code>SystemTray</code> instance that represents the
 * desktop's tray area.  This always returns the same instance per
 * application.  On some platforms the system tray may not be
 * supported.  You may use the {@link #isSupported} method to
 * check if the system tray is supported.
 *
 * <p>If a SecurityManager is installed, the AWTPermission
 * {@code accessSystemTray} must be granted in order to get the
 * {@code SystemTray} instance. Otherwise this method will throw a
 * SecurityException.
 *
 * @return the <code>SystemTray</code> instance that represents
 * the desktop's tray area
 * @throws UnsupportedOperationException if the system tray isn't
 * supported by the current platform
 * @throws HeadlessException if
 * <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>
 * @throws SecurityException if {@code accessSystemTray} permission
 * is not granted
 * @see #add(TrayIcon)
 * @see TrayIcon
 * @see #isSupported
 * @see SecurityManager#checkPermission
 * @see AWTPermission
 */
public static SystemTray getSystemTray() {
    checkSystemTrayAllowed();
    if (GraphicsEnvironment.isHeadless()) {
        throw new HeadlessException();
    }
    initializeSystemTrayIfNeeded();
    if (!isSupported()) {
        throw new UnsupportedOperationException("The system tray is not supported on the current platform.");
    }
    return systemTray;
}