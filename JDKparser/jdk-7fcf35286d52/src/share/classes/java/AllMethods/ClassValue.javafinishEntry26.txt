/**
 * Finish a query.  Overwrite a matching placeholder.  Drop stale incoming values.
 */
synchronized <T> Entry<T> finishEntry(ClassValue<T> classValue, Entry<T> e) {
    // one map has entries for all value types <T>
    @SuppressWarnings("unchecked")
    Entry<T> e0 = (Entry<T>) get(classValue.identity);
    if (e == e0) {
        // We can get here during exception processing, unwinding from computeValue.
        assert (e.isPromise());
        remove(classValue.identity);
        return null;
    } else if (e0 != null && e0.isPromise() && e0.version() == e.version()) {
        // If e0 matches the intended entry, there has not been a remove call
        // between the previous startEntry and now.  So now overwrite e0.
        Version<T> v = classValue.version();
        if (e.version() != v)
            e = e.refreshVersion(v);
        put(classValue.identity, e);
        // Add to the cache, to enable the fast path, next time.
        checkCacheLoad();
        addToCache(classValue, e);
        return e;
    } else {
        // Some sort of mismatch; caller must try again.
        return null;
    }
}