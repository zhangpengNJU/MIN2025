/**
 * Emit bytecode for the guardWithCatch idiom.
 *
 * The pattern looks like (Cf. MethodHandleImpl.makeGuardWithCatch):
 * <blockquote><pre>{@code
 *  guardWithCatch=Lambda(a0:L,a1:L,a2:L,a3:L,a4:L,a5:L,a6:L,a7:L)=>{
 *    t8:L=MethodHandle.invokeBasic(a4:L,a6:L,a7:L);
 *    t9:L=MethodHandleImpl.guardWithCatch(a1:L,a2:L,a3:L,t8:L);
 *   t10:I=MethodHandle.invokeBasic(a5:L,t9:L);t10:I}
 * }</pre></blockquote>
 *
 * It is compiled into bytecode equivalent of the following code:
 * <blockquote><pre>{@code
 *  try {
 *      return a1.invokeBasic(a6, a7);
 *  } catch (Throwable e) {
 *      if (!a2.isInstance(e)) throw e;
 *      return a3.invokeBasic(ex, a6, a7);
 *  }}
 */
private Name emitGuardWithCatch(int pos) {
    Name args = lambdaForm.names[pos];
    Name invoker = lambdaForm.names[pos + 1];
    Name result = lambdaForm.names[pos + 2];
    Label L_startBlock = new Label();
    Label L_endBlock = new Label();
    Label L_handler = new Label();
    Label L_done = new Label();
    Class<?> returnType = result.function.resolvedHandle.type().returnType();
    MethodType type = args.function.resolvedHandle.type().dropParameterTypes(0, 1).changeReturnType(returnType);
    mv.visitTryCatchBlock(L_startBlock, L_endBlock, L_handler, "java/lang/Throwable");
    // Normal case
    mv.visitLabel(L_startBlock);
    // load target
    emitPushArgument(invoker, 0);
    // skip 1st argument: method handle
    emitPushArguments(args, 1);
    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, MH, "invokeBasic", type.basicType().toMethodDescriptorString(), false);
    mv.visitLabel(L_endBlock);
    mv.visitJumpInsn(Opcodes.GOTO, L_done);
    // Exceptional case
    mv.visitLabel(L_handler);
    // Check exception's type
    mv.visitInsn(Opcodes.DUP);
    // load exception class
    emitPushArgument(invoker, 1);
    mv.visitInsn(Opcodes.SWAP);
    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/Class", "isInstance", "(Ljava/lang/Object;)Z", false);
    Label L_rethrow = new Label();
    mv.visitJumpInsn(Opcodes.IFEQ, L_rethrow);
    // Invoke catcher
    // load catcher
    emitPushArgument(invoker, 2);
    mv.visitInsn(Opcodes.SWAP);
    // skip 1st argument: method handle
    emitPushArguments(args, 1);
    MethodType catcherType = type.insertParameterTypes(0, Throwable.class);
    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, MH, "invokeBasic", catcherType.basicType().toMethodDescriptorString(), false);
    mv.visitJumpInsn(Opcodes.GOTO, L_done);
    mv.visitLabel(L_rethrow);
    mv.visitInsn(Opcodes.ATHROW);
    mv.visitLabel(L_done);
    return result;
}