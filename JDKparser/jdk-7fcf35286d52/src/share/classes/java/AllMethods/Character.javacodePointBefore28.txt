/**
 * Returns the code point preceding the given index of the
 * {@code CharSequence}. If the {@code char} value at
 * {@code (index - 1)} in the {@code CharSequence} is in
 * the low-surrogate range, {@code (index - 2)} is not
 * negative, and the {@code char} value at {@code (index - 2)}
 * in the {@code CharSequence} is in the
 * high-surrogate range, then the supplementary code point
 * corresponding to this surrogate pair is returned. Otherwise,
 * the {@code char} value at {@code (index - 1)} is
 * returned.
 *
 * @param seq the {@code CharSequence} instance
 * @param index the index following the code point that should be returned
 * @return the Unicode code point value before the given index.
 * @exception NullPointerException if {@code seq} is null.
 * @exception IndexOutOfBoundsException if the {@code index}
 * argument is less than 1 or greater than {@link
 * CharSequence#length() seq.length()}.
 * @since  1.5
 */
public static int codePointBefore(CharSequence seq, int index) {
    char c2 = seq.charAt(--index);
    if (isLowSurrogate(c2) && index > 0) {
        char c1 = seq.charAt(--index);
        if (isHighSurrogate(c1)) {
            return toCodePoint(c1, c2);
        }
    }
    return c2;
}