/**
 * Determines whether the access request indicated by the
 * specified permission should be allowed or denied, based on
 * the current AccessControlContext and security policy.
 * This method quietly returns if the access request
 * is permitted, or throws an AccessControlException otherwise. The
 * getPermission method of the AccessControlException returns the
 * {@code perm} Permission object instance.
 *
 * @param perm the requested permission.
 *
 * @exception AccessControlException if the specified permission
 *            is not permitted, based on the current security policy.
 * @exception NullPointerException if the specified permission
 *            is {@code null} and is checked based on the
 *            security policy currently in effect.
 */
public static void checkPermission(Permission perm) throws AccessControlException {
    // System.err.println("checkPermission "+perm);
    // Thread.currentThread().dumpStack();
    if (perm == null) {
        throw new NullPointerException("permission can't be null");
    }
    AccessControlContext stack = getStackAccessControlContext();
    // if context is null, we had privileged system code on the stack.
    if (stack == null) {
        Debug debug = AccessControlContext.getDebug();
        boolean dumpDebug = false;
        if (debug != null) {
            dumpDebug = !Debug.isOn("codebase=");
            dumpDebug &= !Debug.isOn("permission=") || Debug.isOn("permission=" + perm.getClass().getCanonicalName());
        }
        if (dumpDebug && Debug.isOn("stack")) {
            Thread.dumpStack();
        }
        if (dumpDebug && Debug.isOn("domain")) {
            debug.println("domain (context is null)");
        }
        if (dumpDebug) {
            debug.println("access allowed " + perm);
        }
        return;
    }
    AccessControlContext acc = stack.optimize();
    acc.checkPermission(perm);
}