/**
 * Returns a BigInteger whose value is
 * <tt>(this<sup>exponent</sup> mod m)</tt>.  (Unlike {@code pow}, this
 * method permits negative exponents.)
 *
 * @param  exponent the exponent.
 * @param  m the modulus.
 * @return <tt>this<sup>exponent</sup> mod m</tt>
 * @throws ArithmeticException {@code m} &le; 0 or the exponent is
 *         negative and this BigInteger is not <i>relatively
 *         prime</i> to {@code m}.
 * @see    #modInverse
 */
public BigInteger modPow(BigInteger exponent, BigInteger m) {
    if (m.signum <= 0)
        throw new ArithmeticException("BigInteger: modulus not positive");
    // Trivial cases
    if (exponent.signum == 0)
        return (m.equals(ONE) ? ZERO : ONE);
    if (this.equals(ONE))
        return (m.equals(ONE) ? ZERO : ONE);
    if (this.equals(ZERO) && exponent.signum >= 0)
        return ZERO;
    if (this.equals(negConst[1]) && (!exponent.testBit(0)))
        return (m.equals(ONE) ? ZERO : ONE);
    boolean invertResult;
    if ((invertResult = (exponent.signum < 0)))
        exponent = exponent.negate();
    BigInteger base = (this.signum < 0 || this.compareTo(m) >= 0 ? this.mod(m) : this);
    BigInteger result;
    if (m.testBit(0)) {
        // odd modulus
        result = base.oddModPow(exponent, m);
    } else {
        /*
             * Even modulus.  Tear it into an "odd part" (m1) and power of two
             * (m2), exponentiate mod m1, manually exponentiate mod m2, and
             * use Chinese Remainder Theorem to combine results.
             */
        // Tear m apart into odd part (m1) and power of 2 (m2)
        // Max pow of 2 that divides m
        int p = m.getLowestSetBit();
        // m/2**p
        BigInteger m1 = m.shiftRight(p);
        // 2**p
        BigInteger m2 = ONE.shiftLeft(p);
        // Calculate new base from m1
        BigInteger base2 = (this.signum < 0 || this.compareTo(m1) >= 0 ? this.mod(m1) : this);
        // Caculate (base ** exponent) mod m1.
        BigInteger a1 = (m1.equals(ONE) ? ZERO : base2.oddModPow(exponent, m1));
        // Calculate (this ** exponent) mod m2
        BigInteger a2 = base.modPow2(exponent, p);
        // Combine results using Chinese Remainder Theorem
        BigInteger y1 = m2.modInverse(m1);
        BigInteger y2 = m1.modInverse(m2);
        if (m.mag.length < MAX_MAG_LENGTH / 2) {
            result = a1.multiply(m2).multiply(y1).add(a2.multiply(m1).multiply(y2)).mod(m);
        } else {
            MutableBigInteger t1 = new MutableBigInteger();
            new MutableBigInteger(a1.multiply(m2)).multiply(new MutableBigInteger(y1), t1);
            MutableBigInteger t2 = new MutableBigInteger();
            new MutableBigInteger(a2.multiply(m1)).multiply(new MutableBigInteger(y2), t2);
            t1.add(t2);
            MutableBigInteger q = new MutableBigInteger();
            result = t1.divide(new MutableBigInteger(m), q).toBigInteger();
        }
    }
    return (invertResult ? result.modInverse(m) : result);
}