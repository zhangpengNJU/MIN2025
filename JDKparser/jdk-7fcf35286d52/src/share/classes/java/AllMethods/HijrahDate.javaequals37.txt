// -------------------------------------------------------------------------
/**
 * Compares this date to another date, including the chronology.
 * <p>
 * Compares this {@code HijrahDate} with another ensuring that the date is the same.
 * <p>
 * Only objects of type {@code HijrahDate} are compared, other types return false.
 * To compare the dates of two {@code TemporalAccessor} instances, including dates
 * in two different chronologies, use {@link ChronoField#EPOCH_DAY} as a comparator.
 *
 * @param obj  the object to check, null returns false
 * @return true if this is equal to the other date and the Chronologies are equal
 */
// override for performance
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj instanceof HijrahDate) {
        HijrahDate otherDate = (HijrahDate) obj;
        return prolepticYear == otherDate.prolepticYear && this.monthOfYear == otherDate.monthOfYear && this.dayOfMonth == otherDate.dayOfMonth && getChronology().equals(otherDate.getChronology());
    }
    return false;
}