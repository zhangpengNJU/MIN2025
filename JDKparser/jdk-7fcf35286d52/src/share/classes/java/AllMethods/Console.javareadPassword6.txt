/**
 * Provides a formatted prompt, then reads a password or passphrase from
 * the console with echoing disabled.
 *
 * @param  fmt
 *         A format string as described in <a
 *         href="../util/Formatter.html#syntax">Format string syntax</a>
 *         for the prompt text.
 *
 * @param  args
 *         Arguments referenced by the format specifiers in the format
 *         string.  If there are more arguments than format specifiers, the
 *         extra arguments are ignored.  The maximum number of arguments is
 *         limited by the maximum dimension of a Java array as defined by
 *         <cite>The Java&trade; Virtual Machine Specification</cite>.
 *
 * @throws  IllegalFormatException
 *          If a format string contains an illegal syntax, a format
 *          specifier that is incompatible with the given arguments,
 *          insufficient arguments given the format string, or other
 *          illegal conditions.  For specification of all possible
 *          formatting errors, see the <a
 *          href="../util/Formatter.html#detail">Details</a>
 *          section of the formatter class specification.
 *
 * @throws IOError
 *         If an I/O error occurs.
 *
 * @return  A character array containing the password or passphrase read
 *          from the console, not including any line-termination characters,
 *          or <tt>null</tt> if an end of stream has been reached.
 */
public char[] readPassword(String fmt, Object... args) {
    char[] passwd = null;
    synchronized (writeLock) {
        synchronized (readLock) {
            try {
                echoOff = echo(false);
            } catch (IOException x) {
                throw new IOError(x);
            }
            IOError ioe = null;
            try {
                if (fmt.length() != 0)
                    pw.format(fmt, args);
                passwd = readline(true);
            } catch (IOException x) {
                ioe = new IOError(x);
            } finally {
                try {
                    echoOff = echo(true);
                } catch (IOException x) {
                    if (ioe == null)
                        ioe = new IOError(x);
                    else
                        ioe.addSuppressed(x);
                }
                if (ioe != null)
                    throw ioe;
            }
            pw.println();
        }
    }
    return passwd;
}