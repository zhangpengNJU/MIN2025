/**
 * Reads a {@code Throwable} from a stream, enforcing
 * well-formedness constraints on fields.  Null entries and
 * self-pointers are not allowed in the list of {@code
 * suppressedExceptions}.  Null entries are not allowed for stack
 * trace elements.  A null stack trace in the serial form results
 * in a zero-length stack element array. A single-element stack
 * trace whose entry is equal to {@code new StackTraceElement("",
 * "", null, Integer.MIN_VALUE)} results in a {@code null} {@code
 * stackTrace} field.
 *
 * Note that there are no constraints on the value the {@code
 * cause} field can hold; both {@code null} and {@code this} are
 * valid values for the field.
 */
private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {
    // read in all fields
    s.defaultReadObject();
    // Set suppressed exceptions and stack trace elements fields
    // to marker values until the contents from the serial stream
    // are validated.
    List<Throwable> candidateSuppressedExceptions = suppressedExceptions;
    suppressedExceptions = SUPPRESSED_SENTINEL;
    StackTraceElement[] candidateStackTrace = stackTrace;
    stackTrace = UNASSIGNED_STACK.clone();
    if (candidateSuppressedExceptions != null) {
        int suppressedSize = validateSuppressedExceptionsList(candidateSuppressedExceptions);
        if (suppressedSize > 0) {
            // Copy valid Throwables to new list
            List<Throwable> suppList = new ArrayList<Throwable>(Math.min(100, suppressedSize));
            for (Throwable t : candidateSuppressedExceptions) {
                // Enforce constraints on suppressed exceptions in
                // case of corrupt or malicious stream.
                if (t == null)
                    throw new NullPointerException(NULL_CAUSE_MESSAGE);
                if (t == this)
                    throw new IllegalArgumentException(SELF_SUPPRESSION_MESSAGE);
                suppList.add(t);
            }
            // If there are any invalid suppressed exceptions,
            // implicitly use the sentinel value assigned earlier.
            suppressedExceptions = suppList;
        }
    } else {
        suppressedExceptions = null;
    }
    /*
         * For zero-length stack traces, use a clone of
         * UNASSIGNED_STACK rather than UNASSIGNED_STACK itself to
         * allow identity comparison against UNASSIGNED_STACK in
         * getOurStackTrace.  The identity of UNASSIGNED_STACK in
         * stackTrace indicates to the getOurStackTrace method that
         * the stackTrace needs to be constructed from the information
         * in backtrace.
         */
    if (candidateStackTrace != null) {
        // Work from a clone of the candidateStackTrace to ensure
        // consistency of checks.
        candidateStackTrace = candidateStackTrace.clone();
        if (candidateStackTrace.length >= 1) {
            if (candidateStackTrace.length == 1 && // Check for the marker of an immutable stack trace
            SentinelHolder.STACK_TRACE_ELEMENT_SENTINEL.equals(candidateStackTrace[0])) {
                stackTrace = null;
            } else {
                // Verify stack trace elements are non-null.
                for (StackTraceElement ste : candidateStackTrace) {
                    if (ste == null)
                        throw new NullPointerException("null StackTraceElement in serial stream.");
                }
                stackTrace = candidateStackTrace;
            }
        }
    }
// A null stackTrace field in the serial form can result from
// an exception serialized without that field in older JDK
// releases; treat such exceptions as having empty stack
// traces by leaving stackTrace assigned to a clone of
// UNASSIGNED_STACK.
}