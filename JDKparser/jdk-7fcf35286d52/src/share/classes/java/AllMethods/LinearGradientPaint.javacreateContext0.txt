/**
 * Creates and returns a {@link PaintContext} used to
 * generate a linear color gradient pattern.
 * See the {@link Paint#createContext specification} of the
 * method in the {@link Paint} interface for information
 * on null parameter handling.
 *
 * @param cm the preferred {@link ColorModel} which represents the most convenient
 *           format for the caller to receive the pixel data, or {@code null}
 *           if there is no preference.
 * @param deviceBounds the device space bounding box
 *                     of the graphics primitive being rendered.
 * @param userBounds the user space bounding box
 *                   of the graphics primitive being rendered.
 * @param transform the {@link AffineTransform} from user
 *              space into device space.
 * @param hints the set of hints that the context object can use to
 *              choose between rendering alternatives.
 * @return the {@code PaintContext} for
 *         generating color patterns.
 * @see Paint
 * @see PaintContext
 * @see ColorModel
 * @see Rectangle
 * @see Rectangle2D
 * @see AffineTransform
 * @see RenderingHints
 */
public PaintContext createContext(ColorModel cm, Rectangle deviceBounds, Rectangle2D userBounds, AffineTransform transform, RenderingHints hints) {
    // avoid modifying the user's transform...
    transform = new AffineTransform(transform);
    // incorporate the gradient transform
    transform.concatenate(gradientTransform);
    if ((fractions.length == 2) && (cycleMethod != CycleMethod.REPEAT) && (colorSpace == ColorSpaceType.SRGB)) {
        // faster to use the basic GradientPaintContext for this
        // common case
        boolean cyclic = (cycleMethod != CycleMethod.NO_CYCLE);
        return new GradientPaintContext(cm, start, end, transform, colors[0], colors[1], cyclic);
    } else {
        return new LinearGradientPaintContext(this, cm, deviceBounds, userBounds, transform, hints, start, end, fractions, colors, cycleMethod, colorSpace);
    }
}