/**
 * Returns an array of strings naming the files and directories in the
 * directory denoted by this abstract pathname that satisfy the specified
 * filter.  The behavior of this method is the same as that of the
 * {@link #list()} method, except that the strings in the returned array
 * must satisfy the filter.  If the given {@code filter} is {@code null}
 * then all names are accepted.  Otherwise, a name satisfies the filter if
 * and only if the value {@code true} results when the {@link
 * FilenameFilter#accept FilenameFilter.accept(File,&nbsp;String)} method
 * of the filter is invoked on this abstract pathname and the name of a
 * file or directory in the directory that it denotes.
 *
 * @param  filter
 *         A filename filter
 *
 * @return  An array of strings naming the files and directories in the
 *          directory denoted by this abstract pathname that were accepted
 *          by the given {@code filter}.  The array will be empty if the
 *          directory is empty or if no names were accepted by the filter.
 *          Returns {@code null} if this abstract pathname does not denote
 *          a directory, or if an I/O error occurs.
 *
 * @throws  SecurityException
 *          If a security manager exists and its {@link
 *          SecurityManager#checkRead(String)} method denies read access to
 *          the directory
 *
 * @see java.nio.file.Files#newDirectoryStream(Path,String)
 */
public String[] list(FilenameFilter filter) {
    String[] names = normalizedList();
    if ((names == null) || (filter == null)) {
        return names;
    }
    List<String> v = new ArrayList<>();
    for (int i = 0; i < names.length; i++) {
        if (filter.accept(this, names[i])) {
            v.add(names[i]);
        }
    }
    return v.toArray(new String[v.size()]);
}