/**
 * Lays out the container. This method lets each
 * <i>visible</i> component take
 * its preferred size by reshaping the components in the
 * target container in order to satisfy the alignment of
 * this <code>FlowLayout</code> object.
 *
 * @param target the specified component being laid out
 * @see Container
 * @see       java.awt.Container#doLayout
 */
public void layoutContainer(Container target) {
    synchronized (target.getTreeLock()) {
        Insets insets = target.getInsets();
        int maxwidth = target.width - (insets.left + insets.right + hgap * 2);
        int nmembers = target.getComponentCount();
        int x = 0, y = insets.top + vgap;
        int rowh = 0, start = 0;
        boolean ltr = target.getComponentOrientation().isLeftToRight();
        boolean useBaseline = getAlignOnBaseline();
        int[] ascent = null;
        int[] descent = null;
        if (useBaseline) {
            ascent = new int[nmembers];
            descent = new int[nmembers];
        }
        for (int i = 0; i < nmembers; i++) {
            Component m = target.getComponent(i);
            if (m.isVisible()) {
                Dimension d = m.getPreferredSize();
                m.setSize(d.width, d.height);
                if (useBaseline) {
                    int baseline = m.getBaseline(d.width, d.height);
                    if (baseline >= 0) {
                        ascent[i] = baseline;
                        descent[i] = d.height - baseline;
                    } else {
                        ascent[i] = -1;
                    }
                }
                if ((x == 0) || ((x + d.width) <= maxwidth)) {
                    if (x > 0) {
                        x += hgap;
                    }
                    x += d.width;
                    rowh = Math.max(rowh, d.height);
                } else {
                    rowh = moveComponents(target, insets.left + hgap, y, maxwidth - x, rowh, start, i, ltr, useBaseline, ascent, descent);
                    x = d.width;
                    y += vgap + rowh;
                    rowh = d.height;
                    start = i;
                }
            }
        }
        moveComponents(target, insets.left + hgap, y, maxwidth - x, rowh, start, nmembers, ltr, useBaseline, ascent, descent);
    }
}