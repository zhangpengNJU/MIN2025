/**
 * Gets the value of the specified field from this day-of-week as an {@code int}.
 * <p>
 * This queries this day-of-week for the value of the specified field.
 * The returned value will always be within the valid range of values for the field.
 * If it is not possible to return the value, because the field is not supported
 * or for some other reason, an exception is thrown.
 * <p>
 * If the field is {@link ChronoField#DAY_OF_WEEK DAY_OF_WEEK} then the
 * value of the day-of-week, from 1 to 7, will be returned.
 * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
 * <p>
 * If the field is not a {@code ChronoField}, then the result of this method
 * is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
 * passing {@code this} as the argument. Whether the value can be obtained,
 * and what the value represents, is determined by the field.
 *
 * @param field  the field to get, not null
 * @return the value for the field, within the valid range of values
 * @throws DateTimeException if a value for the field cannot be obtained or
 *         the value is outside the range of valid values for the field
 * @throws UnsupportedTemporalTypeException if the field is not supported or
 *         the range of values exceeds an {@code int}
 * @throws ArithmeticException if numeric overflow occurs
 */
@Override
public int get(TemporalField field) {
    if (field == DAY_OF_WEEK) {
        return getValue();
    }
    return TemporalAccessor.super.get(field);
}