/**
 * Returns the {@code int} value that the specified
 * character (Unicode code point) represents. For example, the character
 * {@code '\u005Cu216C'} (the Roman numeral fifty) will return
 * an {@code int} with a value of 50.
 * <p>
 * The letters A-Z in their uppercase ({@code '\u005Cu0041'} through
 * {@code '\u005Cu005A'}), lowercase
 * ({@code '\u005Cu0061'} through {@code '\u005Cu007A'}), and
 * full width variant ({@code '\u005CuFF21'} through
 * {@code '\u005CuFF3A'} and {@code '\u005CuFF41'} through
 * {@code '\u005CuFF5A'}) forms have numeric values from 10
 * through 35. This is independent of the Unicode specification,
 * which does not assign numeric values to these {@code char}
 * values.
 * <p>
 * If the character does not have a numeric value, then -1 is returned.
 * If the character has a numeric value that cannot be represented as a
 * nonnegative integer (for example, a fractional value), then -2
 * is returned.
 *
 * @param   codePoint the character (Unicode code point) to be converted.
 * @return  the numeric value of the character, as a nonnegative {@code int}
 *          value; -2 if the character has a numeric value that is not a
 *          nonnegative integer; -1 if the character has no numeric value.
 * @see     Character#forDigit(int, int)
 * @see     Character#isDigit(int)
 * @since   1.5
 */
public static int getNumericValue(int codePoint) {
    return CharacterData.of(codePoint).getNumericValue(codePoint);
}