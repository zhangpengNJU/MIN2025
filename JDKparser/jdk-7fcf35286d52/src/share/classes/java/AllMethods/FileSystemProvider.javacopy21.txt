/**
 * Copy a file to a target file. This method works in exactly the manner
 * specified by the {@link Files#copy(Path,Path,CopyOption[])} method
 * except that both the source and target paths must be associated with
 * this provider.
 *
 * @param   source
 *          the path to the file to copy
 * @param   target
 *          the path to the target file
 * @param   options
 *          options specifying how the copy should be done
 *
 * @throws  UnsupportedOperationException
 *          if the array contains a copy option that is not supported
 * @throws  FileAlreadyExistsException
 *          if the target file exists but cannot be replaced because the
 *          {@code REPLACE_EXISTING} option is not specified <i>(optional
 *          specific exception)</i>
 * @throws  DirectoryNotEmptyException
 *          the {@code REPLACE_EXISTING} option is specified but the file
 *          cannot be replaced because it is a non-empty directory
 *          <i>(optional specific exception)</i>
 * @throws  IOException
 *          if an I/O error occurs
 * @throws  SecurityException
 *          In the case of the default provider, and a security manager is
 *          installed, the {@link SecurityManager#checkRead(String) checkRead}
 *          method is invoked to check read access to the source file, the
 *          {@link SecurityManager#checkWrite(String) checkWrite} is invoked
 *          to check write access to the target file. If a symbolic link is
 *          copied the security manager is invoked to check {@link
 *          LinkPermission}{@code ("symbolic")}.
 */
public abstract void copy(Path source, Path target, CopyOption... options) throws IOException;