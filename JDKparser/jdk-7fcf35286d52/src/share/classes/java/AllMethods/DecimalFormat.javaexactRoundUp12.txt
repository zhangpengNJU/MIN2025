/**
 * Returns true if rounding-up must be done on {@code scaledFractionalPartAsInt},
 * false otherwise.
 *
 * This is a utility method that takes correct half-even rounding decision on
 * passed fractional value at the scaled decimal point (2 digits for currency
 * case and 3 for decimal case), when the approximated fractional part after
 * scaled decimal point is exactly 0.5d.  This is done by means of exact
 * calculations on the {@code fractionalPart} floating-point value.
 *
 * This method is supposed to be called by private {@code fastDoubleFormat}
 * method only.
 *
 * The algorithms used for the exact calculations are :
 *
 * The <b><i>FastTwoSum</i></b> algorithm, from T.J.Dekker, described in the
 * papers  "<i>A  Floating-Point   Technique  for  Extending  the  Available
 * Precision</i>"  by Dekker, and  in "<i>Adaptive  Precision Floating-Point
 * Arithmetic and Fast Robust Geometric Predicates</i>" from J.Shewchuk.
 *
 * A modified version of <b><i>Sum2S</i></b> cascaded summation described in
 * "<i>Accurate Sum and Dot Product</i>" from Takeshi Ogita and All.  As
 * Ogita says in this paper this is an equivalent of the Kahan-Babuska's
 * summation algorithm because we order the terms by magnitude before summing
 * them. For this reason we can use the <i>FastTwoSum</i> algorithm rather
 * than the more expensive Knuth's <i>TwoSum</i>.
 *
 * We do this to avoid a more expensive exact "<i>TwoProduct</i>" algorithm,
 * like those described in Shewchuk's paper above. See comments in the code
 * below.
 *
 * @param  fractionalPart The  fractional value  on which  we  take rounding
 * decision.
 * @param scaledFractionalPartAsInt The integral part of the scaled
 * fractional value.
 *
 * @return the decision that must be taken regarding half-even rounding.
 */
private boolean exactRoundUp(double fractionalPart, int scaledFractionalPartAsInt) {
    /* exactRoundUp() method is called by fastDoubleFormat() only.
         * The precondition expected to be verified by the passed parameters is :
         * scaledFractionalPartAsInt ==
         *     (int) (fractionalPart * fastPathData.fractionalScaleFactor).
         * This is ensured by fastDoubleFormat() code.
         */
    /* We first calculate roundoff error made by fastDoubleFormat() on
         * the scaled fractional part. We do this with exact calculation on the
         * passed fractionalPart. Rounding decision will then be taken from roundoff.
         */
    /* ---- TwoProduct(fractionalPart, scale factor (i.e. 1000.0d or 100.0d)).
         *
         * The below is an optimized exact "TwoProduct" calculation of passed
         * fractional part with scale factor, using Ogita's Sum2S cascaded
         * summation adapted as Kahan-Babuska equivalent by using FastTwoSum
         * (much faster) rather than Knuth's TwoSum.
         *
         * We can do this because we order the summation from smallest to
         * greatest, so that FastTwoSum can be used without any additional error.
         *
         * The "TwoProduct" exact calculation needs 17 flops. We replace this by
         * a cascaded summation of FastTwoSum calculations, each involving an
         * exact multiply by a power of 2.
         *
         * Doing so saves overall 4 multiplications and 1 addition compared to
         * using traditional "TwoProduct".
         *
         * The scale factor is either 100 (currency case) or 1000 (decimal case).
         * - when 1000, we replace it by (1024 - 16 - 8) = 1000.
         * - when 100,  we replace it by (128  - 32 + 4) =  100.
         * Every multiplication by a power of 2 (1024, 128, 32, 16, 8, 4) is exact.
         *
         */
    // Will always be positive.
    double approxMax;
    // Will always be negative.
    double approxMedium;
    double approxMin;
    double fastTwoSumApproximation = 0.0d;
    double fastTwoSumRoundOff = 0.0d;
    double bVirtual = 0.0d;
    if (isCurrencyFormat) {
        // Scale is 100 = 128 - 32 + 4.
        // Multiply by 2**n is a shift. No roundoff. No error.
        approxMax = fractionalPart * 128.00d;
        approxMedium = -(fractionalPart * 32.00d);
        approxMin = fractionalPart * 4.00d;
    } else {
        // Scale is 1000 = 1024 - 16 - 8.
        // Multiply by 2**n is a shift. No roundoff. No error.
        approxMax = fractionalPart * 1024.00d;
        approxMedium = -(fractionalPart * 16.00d);
        approxMin = -(fractionalPart * 8.00d);
    }
    // Shewchuk/Dekker's FastTwoSum(approxMedium, approxMin).
    assert (-approxMedium >= Math.abs(approxMin));
    fastTwoSumApproximation = approxMedium + approxMin;
    bVirtual = fastTwoSumApproximation - approxMedium;
    fastTwoSumRoundOff = approxMin - bVirtual;
    double approxS1 = fastTwoSumApproximation;
    double roundoffS1 = fastTwoSumRoundOff;
    // Shewchuk/Dekker's FastTwoSum(approxMax, approxS1);
    assert (approxMax >= Math.abs(approxS1));
    fastTwoSumApproximation = approxMax + approxS1;
    bVirtual = fastTwoSumApproximation - approxMax;
    fastTwoSumRoundOff = approxS1 - bVirtual;
    double roundoff1000 = fastTwoSumRoundOff;
    double approx1000 = fastTwoSumApproximation;
    double roundoffTotal = roundoffS1 + roundoff1000;
    // Shewchuk/Dekker's FastTwoSum(approx1000, roundoffTotal);
    assert (approx1000 >= Math.abs(roundoffTotal));
    fastTwoSumApproximation = approx1000 + roundoffTotal;
    bVirtual = fastTwoSumApproximation - approx1000;
    // Now we have got the roundoff for the scaled fractional
    double scaledFractionalRoundoff = roundoffTotal - bVirtual;
    // ---- TwoProduct(fractionalPart, scale (i.e. 1000.0d or 100.0d)) end.
    /* ---- Taking the rounding decision
         *
         * We take rounding decision based on roundoff and half-even rounding
         * rule.
         *
         * The above TwoProduct gives us the exact roundoff on the approximated
         * scaled fractional, and we know that this approximation is exactly
         * 0.5d, since that has already been tested by the caller
         * (fastDoubleFormat).
         *
         * Decision comes first from the sign of the calculated exact roundoff.
         * - Since being exact roundoff, it cannot be positive with a scaled
         *   fractional less than 0.5d, as well as negative with a scaled
         *   fractional greater than 0.5d. That leaves us with following 3 cases.
         * - positive, thus scaled fractional == 0.500....0fff ==> round-up.
         * - negative, thus scaled fractional == 0.499....9fff ==> don't round-up.
         * - is zero,  thus scaled fractioanl == 0.5 ==> half-even rounding applies :
         *    we round-up only if the integral part of the scaled fractional is odd.
         *
         */
    if (scaledFractionalRoundoff > 0.0) {
        return true;
    } else if (scaledFractionalRoundoff < 0.0) {
        return false;
    } else if ((scaledFractionalPartAsInt & 1) != 0) {
        return true;
    }
    return false;
// ---- Taking the rounding decision end
}