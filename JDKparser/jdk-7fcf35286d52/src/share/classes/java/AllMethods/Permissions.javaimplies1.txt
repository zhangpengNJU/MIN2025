/**
 * Checks to see if this object's PermissionCollection for permissions of
 * the specified permission's class implies the permissions
 * expressed in the <i>permission</i> object. Returns true if the
 * combination of permissions in the appropriate PermissionCollection
 * (e.g., a FilePermissionCollection for a FilePermission) together
 * imply the specified permission.
 *
 * <p>For example, suppose there is a FilePermissionCollection in this
 * Permissions object, and it contains one FilePermission that specifies
 * "read" access for  all files in all subdirectories of the "/tmp"
 * directory, and another FilePermission that specifies "write" access
 * for all files in the "/tmp/scratch/foo" directory.
 * Then if the {@code implies} method
 * is called with a permission specifying both "read" and "write" access
 * to files in the "/tmp/scratch/foo" directory, {@code true} is
 * returned.
 *
 * <p>Additionally, if this PermissionCollection contains the
 * AllPermission, this method will always return true.
 * <p>
 * @param permission the Permission object to check.
 *
 * @return true if "permission" is implied by the permissions in the
 * PermissionCollection it
 * belongs to, false if not.
 */
public boolean implies(Permission permission) {
    // No sync; staleness -> skip optimization, which is OK
    if (allPermission != null) {
        // AllPermission has already been added
        return true;
    } else {
        synchronized (this) {
            PermissionCollection pc = getPermissionCollection(permission, false);
            if (pc != null) {
                return pc.implies(permission);
            } else {
                // none found
                return false;
            }
        }
    }
}