/**
 * Determines whether the access request indicated by the
 * specified permission should be allowed or denied, based on
 * the security policy currently in effect, and the context in
 * this object. The request is allowed only if every ProtectionDomain
 * in the context implies the permission. Otherwise the request is
 * denied.
 *
 * <p>
 * This method quietly returns if the access request
 * is permitted, or throws a suitable AccessControlException otherwise.
 *
 * @param perm the requested permission.
 *
 * @exception AccessControlException if the specified permission
 * is not permitted, based on the current security policy and the
 * context encapsulated by this object.
 * @exception NullPointerException if the permission to check for is null.
 */
public void checkPermission(Permission perm) throws AccessControlException {
    boolean dumpDebug = false;
    if (perm == null) {
        throw new NullPointerException("permission can't be null");
    }
    if (getDebug() != null) {
        // If "codebase" is not specified, we dump the info by default.
        dumpDebug = !Debug.isOn("codebase=");
        if (!dumpDebug) {
            // If "codebase" is specified, only dump if the specified code
            // value is in the stack.
            for (int i = 0; context != null && i < context.length; i++) {
                if (context[i].getCodeSource() != null && context[i].getCodeSource().getLocation() != null && Debug.isOn("codebase=" + context[i].getCodeSource().getLocation().toString())) {
                    dumpDebug = true;
                    break;
                }
            }
        }
        dumpDebug &= !Debug.isOn("permission=") || Debug.isOn("permission=" + perm.getClass().getCanonicalName());
        if (dumpDebug && Debug.isOn("stack")) {
            Thread.dumpStack();
        }
        if (dumpDebug && Debug.isOn("domain")) {
            if (context == null) {
                debug.println("domain (context is null)");
            } else {
                for (int i = 0; i < context.length; i++) {
                    debug.println("domain " + i + " " + context[i]);
                }
            }
        }
    }
    /*
         * iterate through the ProtectionDomains in the context.
         * Stop at the first one that doesn't allow the
         * requested permission (throwing an exception).
         *
         */
    /* if ctxt is null, all we had on the stack were system domains,
           or the first domain was a Privileged system domain. This
           is to make the common case for system code very fast */
    if (context == null) {
        checkPermission2(perm);
        return;
    }
    for (int i = 0; i < context.length; i++) {
        if (context[i] != null && !context[i].implies(perm)) {
            if (dumpDebug) {
                debug.println("access denied " + perm);
            }
            if (Debug.isOn("failure") && debug != null) {
                // Want to make sure this is always displayed for failure,
                // but do not want to display again if already displayed
                // above.
                if (!dumpDebug) {
                    debug.println("access denied " + perm);
                }
                Thread.dumpStack();
                final ProtectionDomain pd = context[i];
                final Debug db = debug;
                AccessController.doPrivileged(new PrivilegedAction<Void>() {

                    public Void run() {
                        db.println("domain that failed " + pd);
                        return null;
                    }
                });
            }
            throw new AccessControlException("access denied " + perm, perm);
        }
    }
    // allow if all of them allowed access
    if (dumpDebug) {
        debug.println("access allowed " + perm);
    }
    checkPermission2(perm);
}