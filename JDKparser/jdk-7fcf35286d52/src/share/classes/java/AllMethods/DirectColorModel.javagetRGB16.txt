/**
 * Returns the color/alpha components for the specified pixel in the
 * default RGB color model format.  A color conversion is done if
 * necessary.  The pixel value is specified by an array of data
 * elements of type <code>transferType</code> passed in as an object
 * reference.  If <code>inData</code> is not a primitive array of type
 * <code>transferType</code>, a <code>ClassCastException</code> is
 * thrown.  An <code>ArrayIndexOutOfBoundsException</code> is
 * thrown if <code>inData</code> is not large enough to hold a pixel
 * value for this <code>ColorModel</code>.
 * The returned value is in a non pre-multiplied format.  Thus, if
 * the alpha is premultiplied, this method divides it out of the
 * color components.  If the alpha value is 0, for example, the color
 * values is 0.  Since <code>DirectColorModel</code> can be
 * subclassed, subclasses inherit the implementation of this method
 * and if they don't override it then
 * they throw an exception if they use an unsupported
 * <code>transferType</code>.
 *
 * @param inData the specified pixel
 * @return the color and alpha components of the specified pixel.
 * @exception UnsupportedOperationException if this
 *            <code>transferType</code> is not supported by this
 *            <code>ColorModel</code>
 * @see ColorModel#getRGBdefault
 */
public int getRGB(Object inData) {
    int pixel = 0;
    switch(transferType) {
        case DataBuffer.TYPE_BYTE:
            byte[] bdata = (byte[]) inData;
            pixel = bdata[0] & 0xff;
            break;
        case DataBuffer.TYPE_USHORT:
            short[] sdata = (short[]) inData;
            pixel = sdata[0] & 0xffff;
            break;
        case DataBuffer.TYPE_INT:
            int[] idata = (int[]) inData;
            pixel = idata[0];
            break;
        default:
            throw new UnsupportedOperationException("This method has not been " + "implemented for transferType " + transferType);
    }
    return getRGB(pixel);
}