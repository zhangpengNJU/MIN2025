// preconditions: eqn != res && eqn[3] != 0 && num > 1
// This method tries to improve the accuracy of the roots of eqn (which
// should be in res). It also might eliminate roots in res if it decideds
// that they're not real roots. It will not check for roots that the
// computation of res might have missed, so this method should only be
// used when the roots in res have been computed using an algorithm
// that never underestimates the number of roots (such as solveCubic above)
private static int fixRoots(double[] eqn, double[] res, int num) {
    double[] intervals = { eqn[1], 2 * eqn[2], 3 * eqn[3] };
    int critCount = QuadCurve2D.solveQuadratic(intervals, intervals);
    if (critCount == 2 && intervals[0] == intervals[1]) {
        critCount--;
    }
    if (critCount == 2 && intervals[0] > intervals[1]) {
        double tmp = intervals[0];
        intervals[0] = intervals[1];
        intervals[1] = tmp;
    }
    // below we use critCount to possibly filter out roots that shouldn't
    // have been computed. We require that eqn[3] != 0, so eqn is a proper
    // cubic, which means that its limits at -/+inf are -/+inf or +/-inf.
    // Therefore, if critCount==2, the curve is shaped like a sideways S,
    // and it could have 1-3 roots. If critCount==0 it is monotonic, and
    // if critCount==1 it is monotonic with a single point where it is
    // flat. In the last 2 cases there can only be 1 root. So in cases
    // where num > 1 but critCount < 2, we eliminate all roots in res
    // except one.
    if (num == 3) {
        double xe = getRootUpperBound(eqn);
        double x0 = -xe;
        Arrays.sort(res, 0, num);
        if (critCount == 2) {
            // this just tries to improve the accuracy of the computed
            // roots using Newton's method.
            res[0] = refineRootWithHint(eqn, x0, intervals[0], res[0]);
            res[1] = refineRootWithHint(eqn, intervals[0], intervals[1], res[1]);
            res[2] = refineRootWithHint(eqn, intervals[1], xe, res[2]);
            return 3;
        } else if (critCount == 1) {
            // we only need fx0 and fxe for the sign of the polynomial
            // at -inf and +inf respectively, so we don't need to do
            // fx0 = solveEqn(eqn, 3, x0); fxe = solveEqn(eqn, 3, xe)
            double fxe = eqn[3];
            double fx0 = -fxe;
            double x1 = intervals[0];
            double fx1 = solveEqn(eqn, 3, x1);
            // if critCount == 1 or critCount == 0, but num == 3 then
            // something has gone wrong. This branch and the one below
            // would ideally never execute, but if they do we can't know
            // which of the computed roots is closest to the real root;
            // therefore, we can't use refineRootWithHint. But even if
            // we did know, being here most likely means that the
            // curve is very flat close to two of the computed roots
            // (or maybe even all three). This might make Newton's method
            // fail altogether, which would be a pain to detect and fix.
            // This is why we use a very stable bisection method.
            if (oppositeSigns(fx0, fx1)) {
                res[0] = bisectRootWithHint(eqn, x0, x1, res[0]);
            } else if (oppositeSigns(fx1, fxe)) {
                res[0] = bisectRootWithHint(eqn, x1, xe, res[2]);
            } else /* fx1 must be 0 */
            {
                res[0] = x1;
            }
        // return 1
        } else if (critCount == 0) {
            res[0] = bisectRootWithHint(eqn, x0, xe, res[1]);
        // return 1
        }
    } else if (num == 2 && critCount == 2) {
        // XXX: here we assume that res[0] has better accuracy than res[1].
        // This is true because this method is only used from solveCubic
        // which puts in res[0] the root that it would compute anyway even
        // if num==1. If this method is ever used from any other method, or
        // if the solveCubic implementation changes, this assumption should
        // be reevaluated, and the choice of goodRoot might have to become
        // goodRoot = (abs(eqn'(res[0])) > abs(eqn'(res[1]))) ? res[0] : res[1]
        // where eqn' is the derivative of eqn.
        double goodRoot = res[0];
        double badRoot = res[1];
        double x1 = intervals[0];
        double x2 = intervals[1];
        // If a cubic curve really has 2 roots, one of those roots must be
        // at a critical point. That can't be goodRoot, so we compute x to
        // be the farthest critical point from goodRoot. If there are two
        // roots, x must be the second one, so we evaluate eqn at x, and if
        // it is zero (or close enough) we put x in res[1] (or badRoot, if
        // |solveEqn(eqn, 3, badRoot)| < |solveEqn(eqn, 3, x)| but this
        // shouldn't happen often).
        double x = abs(x1 - goodRoot) > abs(x2 - goodRoot) ? x1 : x2;
        double fx = solveEqn(eqn, 3, x);
        if (iszero(fx, 10000000 * ulp(x))) {
            double badRootVal = solveEqn(eqn, 3, badRoot);
            res[1] = abs(badRootVal) < abs(fx) ? badRoot : x;
            return 2;
        }
    }
    // else there can only be one root - goodRoot, and it is already in res[0]
    return 1;
}