// dispose of this LoggerWeakRef object
void dispose() {
    // Avoid calling dispose twice. When a Logger is gc'ed, its
    // LoggerWeakRef will be enqueued.
    // However, a new logger of the same name may be added (or looked
    // up) before the queue is drained. When that happens, dispose()
    // will be called by addLocalLogger() or findLogger().
    // Later when the queue is drained, dispose() will be called again
    // for the same LoggerWeakRef. Marking LoggerWeakRef as disposed
    // avoids processing the data twice (even though the code should
    // now be reentrant).
    synchronized (this) {
        // Note to maintainers:
        // Be careful not to call any method that tries to acquire
        // another lock from within this block - as this would surely
        // lead to deadlocks, given that dispose() can be called by
        // multiple threads, and from within different synchronized
        // methods/blocks.
        if (disposed)
            return;
        disposed = true;
    }
    final LogNode n = node;
    if (n != null) {
        // n.loggerRef can only be safely modified from within
        // a lock on LoggerContext. removeLoggerRef is already
        // synchronized on LoggerContext so calling
        // n.context.removeLoggerRef from within this lock is safe.
        synchronized (n.context) {
            // if we have a LogNode, then we were a named Logger
            // so clear namedLoggers weak ref to us
            n.context.removeLoggerRef(name, this);
            // clear our ref to the Logger's name
            name = null;
            // LogNode may have been reused - so only clear
            // LogNode.loggerRef if LogNode.loggerRef == this
            if (n.loggerRef == this) {
                // clear LogNode's weak ref to us
                n.loggerRef = null;
            }
            // clear our ref to LogNode
            node = null;
        }
    }
    if (parentRef != null) {
        // this LoggerWeakRef has or had a parent Logger
        Logger parent = parentRef.get();
        if (parent != null) {
            // the parent Logger is still there so clear the
            // parent Logger's weak ref to us
            parent.removeChildLogger(this);
        }
        // clear our weak ref to the parent Logger
        parentRef = null;
    }
}