/**
 * Returns a reverse order view of the elements contained in this set.
 * The descending set is backed by this set, so changes to the set are
 * reflected in the descending set, and vice-versa.
 *
 * <p>The returned set has an ordering equivalent to
 * {@link Collections#reverseOrder(Comparator) Collections.reverseOrder}{@code (comparator())}.
 * The expression {@code s.descendingSet().descendingSet()} returns a
 * view of {@code s} essentially equivalent to {@code s}.
 *
 * @return a reverse order view of this set
 */
public NavigableSet<E> descendingSet() {
    return new ConcurrentSkipListSet<E>(m.descendingMap());
}