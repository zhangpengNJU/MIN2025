// Waiting mechanics
/**
 * Removes and signals threads from queue for phase.
 */
private void releaseWaiters(int phase) {
    // first element of queue
    QNode q;
    // its thread
    Thread t;
    AtomicReference<QNode> head = (phase & 1) == 0 ? evenQ : oddQ;
    while ((q = head.get()) != null && q.phase != (int) (root.state >>> PHASE_SHIFT)) {
        if (head.compareAndSet(q, q.next) && (t = q.thread) != null) {
            q.thread = null;
            LockSupport.unpark(t);
        }
    }
}