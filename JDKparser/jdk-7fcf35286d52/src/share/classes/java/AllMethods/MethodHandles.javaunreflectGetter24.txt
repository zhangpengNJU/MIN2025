/**
 * Produces a method handle giving read access to a reflected field.
 * The type of the method handle will have a return type of the field's
 * value type.
 * If the field is static, the method handle will take no arguments.
 * Otherwise, its single argument will be the instance containing
 * the field.
 * If the field's {@code accessible} flag is not set,
 * access checking is performed immediately on behalf of the lookup class.
 * <p>
 * If the field is static, and
 * if the returned method handle is invoked, the field's class will
 * be initialized, if it has not already been initialized.
 * @param f the reflected field
 * @return a method handle which can load values from the reflected field
 * @throws IllegalAccessException if access checking fails
 * @throws NullPointerException if the argument is null
 */
public MethodHandle unreflectGetter(Field f) throws IllegalAccessException {
    return unreflectField(f, false);
}