/**
 * Returns an array of {@code Type} objects that represent the
 * exceptions declared to be thrown by this executable object.
 * Returns an array of length 0 if the underlying executable declares
 * no exceptions in its {@code throws} clause.
 *
 * <p>If an exception type is a type variable or a parameterized
 * type, it is created. Otherwise, it is resolved.
 *
 * @return an array of Types that represent the exception types
 *     thrown by the underlying executable
 * @throws GenericSignatureFormatError
 *     if the generic method signature does not conform to the format
 *     specified in
 *     <cite>The Java&trade; Virtual Machine Specification</cite>
 * @throws TypeNotPresentException if the underlying executable's
 *     {@code throws} clause refers to a non-existent type declaration
 * @throws MalformedParameterizedTypeException if
 *     the underlying executable's {@code throws} clause refers to a
 *     parameterized type that cannot be instantiated for any reason
 */
public Type[] getGenericExceptionTypes() {
    Type[] result;
    if (hasGenericInformation() && ((result = getGenericInfo().getExceptionTypes()).length > 0))
        return result;
    else
        return getExceptionTypes();
}