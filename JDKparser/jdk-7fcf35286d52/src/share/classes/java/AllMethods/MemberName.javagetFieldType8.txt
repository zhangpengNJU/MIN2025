/**
 * Return the declared type of this member, which
 *  must be a field or type.
 *  If it is a type member, that type itself is returned.
 */
public Class<?> getFieldType() {
    if (type == null) {
        expandFromVM();
        if (type == null) {
            return null;
        }
    }
    if (isInvocable()) {
        throw newIllegalArgumentException("not a field or nested class, no simple type");
    }
    {
        // Get a snapshot of type which doesn't get changed by racing threads.
        final Object type = this.type;
        if (type instanceof Class<?>) {
            return (Class<?>) type;
        }
    }
    // type is not a Class yet.  Convert it thread-safely.
    synchronized (this) {
        if (type instanceof String) {
            String sig = (String) type;
            MethodType mtype = MethodType.fromMethodDescriptorString("()" + sig, getClassLoader());
            Class<?> res = mtype.returnType();
            type = res;
        }
        // Make sure type is a Class for racing threads.
        assert type instanceof Class<?> : "bad field type " + type;
    }
    return (Class<?>) type;
}