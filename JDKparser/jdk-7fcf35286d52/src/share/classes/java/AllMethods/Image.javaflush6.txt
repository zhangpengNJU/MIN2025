/**
 * Flushes all reconstructable resources being used by this Image object.
 * This includes any pixel data that is being cached for rendering to
 * the screen as well as any system resources that are being used
 * to store data or pixels for the image if they can be recreated.
 * The image is reset to a state similar to when it was first created
 * so that if it is again rendered, the image data will have to be
 * recreated or fetched again from its source.
 * <p>
 * Examples of how this method affects specific types of Image object:
 * <ul>
 * <li>
 * BufferedImage objects leave the primary Raster which stores their
 * pixels untouched, but flush any information cached about those
 * pixels such as copies uploaded to the display hardware for
 * accelerated blits.
 * <li>
 * Image objects created by the Component methods which take a
 * width and height leave their primary buffer of pixels untouched,
 * but have all cached information released much like is done for
 * BufferedImage objects.
 * <li>
 * VolatileImage objects release all of their pixel resources
 * including their primary copy which is typically stored on
 * the display hardware where resources are scarce.
 * These objects can later be restored using their
 * {@link java.awt.image.VolatileImage#validate validate}
 * method.
 * <li>
 * Image objects created by the Toolkit and Component classes which are
 * loaded from files, URLs or produced by an {@link ImageProducer}
 * are unloaded and all local resources are released.
 * These objects can later be reloaded from their original source
 * as needed when they are rendered, just as when they were first
 * created.
 * </ul>
 */
public void flush() {
    if (surfaceManager != null) {
        surfaceManager.flush();
    }
}