/**
 * Marks the beginning of an I/O operation that might block indefinitely.
 *
 * <p> This method should be invoked in tandem with the {@link #end end}
 * method, using a <tt>try</tt>&nbsp;...&nbsp;<tt>finally</tt> block as
 * shown <a href="#be">above</a>, in order to implement interruption for
 * this selector.
 *
 * <p> Invoking this method arranges for the selector's {@link
 * Selector#wakeup wakeup} method to be invoked if a thread's {@link
 * Thread#interrupt interrupt} method is invoked while the thread is
 * blocked in an I/O operation upon the selector.  </p>
 */
protected final void begin() {
    if (interruptor == null) {
        interruptor = new Interruptible() {

            public void interrupt(Thread ignore) {
                AbstractSelector.this.wakeup();
            }
        };
    }
    AbstractInterruptibleChannel.blockedOn(interruptor);
    Thread me = Thread.currentThread();
    if (me.isInterrupted())
        interruptor.interrupt(me);
}