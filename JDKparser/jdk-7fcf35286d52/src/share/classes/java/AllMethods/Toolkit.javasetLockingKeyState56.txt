/**
 * Sets the state of the given locking key on the keyboard.
 * Valid key codes are
 * {@link java.awt.event.KeyEvent#VK_CAPS_LOCK VK_CAPS_LOCK},
 * {@link java.awt.event.KeyEvent#VK_NUM_LOCK VK_NUM_LOCK},
 * {@link java.awt.event.KeyEvent#VK_SCROLL_LOCK VK_SCROLL_LOCK}, and
 * {@link java.awt.event.KeyEvent#VK_KANA_LOCK VK_KANA_LOCK}.
 * <p>
 * Depending on the platform, setting the state of a locking key may
 * involve event processing and therefore may not be immediately
 * observable through getLockingKeyState.
 *
 * @exception java.lang.IllegalArgumentException if <code>keyCode</code>
 * is not one of the valid key codes
 * @exception java.lang.UnsupportedOperationException if the host system doesn't
 * allow setting the state of this key programmatically, or if the keyboard
 * doesn't have this key
 * @exception HeadlessException if GraphicsEnvironment.isHeadless()
 * returns true
 * @see       java.awt.GraphicsEnvironment#isHeadless
 * @since 1.3
 */
public void setLockingKeyState(int keyCode, boolean on) throws UnsupportedOperationException {
    GraphicsEnvironment.checkHeadless();
    if (!(keyCode == KeyEvent.VK_CAPS_LOCK || keyCode == KeyEvent.VK_NUM_LOCK || keyCode == KeyEvent.VK_SCROLL_LOCK || keyCode == KeyEvent.VK_KANA_LOCK)) {
        throw new IllegalArgumentException("invalid key for Toolkit.setLockingKeyState");
    }
    throw new UnsupportedOperationException("Toolkit.setLockingKeyState");
}