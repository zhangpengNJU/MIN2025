/**
 * Compares the specified object with this set for equality.
 * Returns {@code true} if the specified object is the same object
 * as this object, or if it is also a {@link Set} and the elements
 * returned by an {@linkplain Set#iterator() iterator} over the
 * specified set are the same as the elements returned by an
 * iterator over this set.  More formally, the two iterators are
 * considered to return the same elements if they return the same
 * number of elements and for every element {@code e1} returned by
 * the iterator over the specified set, there is an element
 * {@code e2} returned by the iterator over this set such that
 * {@code (e1==null ? e2==null : e1.equals(e2))}.
 *
 * @param o object to be compared for equality with this set
 * @return {@code true} if the specified object is equal to this set
 */
public boolean equals(Object o) {
    if (o == this)
        return true;
    if (!(o instanceof Set))
        return false;
    Set<?> set = (Set<?>) (o);
    Iterator<?> it = set.iterator();
    // Uses O(n^2) algorithm that is only appropriate
    // for small sets, which CopyOnWriteArraySets should be.
    // Use a single snapshot of underlying array
    Object[] elements = al.getArray();
    int len = elements.length;
    // Mark matched elements to avoid re-checking
    boolean[] matched = new boolean[len];
    int k = 0;
    outer: while (it.hasNext()) {
        if (++k > len)
            return false;
        Object x = it.next();
        for (int i = 0; i < len; ++i) {
            if (!matched[i] && eq(x, elements[i])) {
                matched[i] = true;
                continue outer;
            }
        }
        return false;
    }
    return k == len;
}