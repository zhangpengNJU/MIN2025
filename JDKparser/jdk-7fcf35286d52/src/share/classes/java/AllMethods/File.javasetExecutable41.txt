/**
 * A convenience method to set the owner's execute permission for this
 * abstract pathname. On some platforms it may be possible to start the Java
 * virtual machine with special privileges that allow it to execute files
 * that are not marked executable.
 *
 * <p>An invocation of this method of the form <tt>file.setExcutable(arg)</tt>
 * behaves in exactly the same way as the invocation
 *
 * <pre>
 *     file.setExecutable(arg, true) </pre>
 *
 * @param   executable
 *          If <code>true</code>, sets the access permission to allow execute
 *          operations; if <code>false</code> to disallow execute operations
 *
 * @return   <code>true</code> if and only if the operation succeeded.  The
 *           operation will fail if the user does not have permission to
 *           change the access permissions of this abstract pathname.  If
 *           <code>executable</code> is <code>false</code> and the underlying
 *           file system does not implement an execute permission, then the
 *           operation will fail.
 *
 * @throws  SecurityException
 *          If a security manager exists and its <code>{@link
 *          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
 *          method denies write access to the file
 *
 * @since 1.6
 */
public boolean setExecutable(boolean executable) {
    return setExecutable(executable, true);
}