/**
 * Parse an offset following a prefix and set the ZoneId if it is valid.
 * To matching the parsing of ZoneId.of the values are not normalized
 * to ZoneOffsets.
 *
 * @param context the parse context
 * @param text the input text
 * @param prefixPos start of the prefix
 * @param position start of text after the prefix
 * @param parser parser for the value after the prefix
 * @return the position after the parse
 */
private int parseOffsetBased(DateTimeParseContext context, CharSequence text, int prefixPos, int position, OffsetIdPrinterParser parser) {
    String prefix = text.toString().substring(prefixPos, position).toUpperCase();
    if (position >= text.length()) {
        context.setParsed(ZoneId.of(prefix));
        return position;
    }
    // '0' or 'Z' after prefix is not part of a valid ZoneId; use bare prefix
    if (text.charAt(position) == '0' || context.charEquals(text.charAt(position), 'Z')) {
        context.setParsed(ZoneId.of(prefix));
        return position;
    }
    DateTimeParseContext newContext = context.copy();
    int endPos = parser.parse(newContext, text, position);
    try {
        if (endPos < 0) {
            if (parser == OffsetIdPrinterParser.INSTANCE_ID_Z) {
                return ~prefixPos;
            }
            context.setParsed(ZoneId.of(prefix));
            return position;
        }
        int offset = (int) newContext.getParsed(OFFSET_SECONDS).longValue();
        ZoneOffset zoneOffset = ZoneOffset.ofTotalSeconds(offset);
        context.setParsed(ZoneId.ofOffset(prefix, zoneOffset));
        return endPos;
    } catch (DateTimeException dte) {
        return ~prefixPos;
    }
}