/**
 * Resizes the <code>Rectangle</code> both horizontally and vertically.
 * <p>
 * This method modifies the <code>Rectangle</code> so that it is
 * <code>h</code> units larger on both the left and right side,
 * and <code>v</code> units larger at both the top and bottom.
 * <p>
 * The new <code>Rectangle</code> has {@code (x - h, y - v)}
 * as its upper-left corner,
 * width of {@code (width + 2h)},
 * and a height of {@code (height + 2v)}.
 * <p>
 * If negative values are supplied for <code>h</code> and
 * <code>v</code>, the size of the <code>Rectangle</code>
 * decreases accordingly.
 * The {@code grow} method will check for integer overflow
 * and underflow, but does not check whether the resulting
 * values of {@code width} and {@code height} grow
 * from negative to non-negative or shrink from non-negative
 * to negative.
 * @param h the horizontal expansion
 * @param v the vertical expansion
 */
public void grow(int h, int v) {
    long x0 = this.x;
    long y0 = this.y;
    long x1 = this.width;
    long y1 = this.height;
    x1 += x0;
    y1 += y0;
    x0 -= h;
    y0 -= v;
    x1 += h;
    y1 += v;
    if (x1 < x0) {
        // Non-existant in X direction
        // Final width must remain negative so subtract x0 before
        // it is clipped so that we avoid the risk that the clipping
        // of x0 will reverse the ordering of x0 and x1.
        x1 -= x0;
        if (x1 < Integer.MIN_VALUE)
            x1 = Integer.MIN_VALUE;
        if (x0 < Integer.MIN_VALUE)
            x0 = Integer.MIN_VALUE;
        else if (x0 > Integer.MAX_VALUE)
            x0 = Integer.MAX_VALUE;
    } else {
        // (x1 >= x0)
        // Clip x0 before we subtract it from x1 in case the clipping
        // affects the representable area of the rectangle.
        if (x0 < Integer.MIN_VALUE)
            x0 = Integer.MIN_VALUE;
        else if (x0 > Integer.MAX_VALUE)
            x0 = Integer.MAX_VALUE;
        x1 -= x0;
        // The only way x1 can be negative now is if we clipped
        // x0 against MIN and x1 is less than MIN - in which case
        // we want to leave the width negative since the result
        // did not intersect the representable area.
        if (x1 < Integer.MIN_VALUE)
            x1 = Integer.MIN_VALUE;
        else if (x1 > Integer.MAX_VALUE)
            x1 = Integer.MAX_VALUE;
    }
    if (y1 < y0) {
        // Non-existant in Y direction
        y1 -= y0;
        if (y1 < Integer.MIN_VALUE)
            y1 = Integer.MIN_VALUE;
        if (y0 < Integer.MIN_VALUE)
            y0 = Integer.MIN_VALUE;
        else if (y0 > Integer.MAX_VALUE)
            y0 = Integer.MAX_VALUE;
    } else {
        // (y1 >= y0)
        if (y0 < Integer.MIN_VALUE)
            y0 = Integer.MIN_VALUE;
        else if (y0 > Integer.MAX_VALUE)
            y0 = Integer.MAX_VALUE;
        y1 -= y0;
        if (y1 < Integer.MIN_VALUE)
            y1 = Integer.MIN_VALUE;
        else if (y1 > Integer.MAX_VALUE)
            y1 = Integer.MAX_VALUE;
    }
    reshape((int) x0, (int) y0, (int) x1, (int) y1);
}