/**
 * Removes the mapping for a key from this weak hash map if it is present.
 * More formally, if this map contains a mapping from key <tt>k</tt> to
 * value <tt>v</tt> such that <code>(key==null ?  k==null :
 * key.equals(k))</code>, that mapping is removed.  (The map can contain
 * at most one such mapping.)
 *
 * <p>Returns the value to which this map previously associated the key,
 * or <tt>null</tt> if the map contained no mapping for the key.  A
 * return value of <tt>null</tt> does not <i>necessarily</i> indicate
 * that the map contained no mapping for the key; it's also possible
 * that the map explicitly mapped the key to <tt>null</tt>.
 *
 * <p>The map will not contain a mapping for the specified key once the
 * call returns.
 *
 * @param key key whose mapping is to be removed from the map
 * @return the previous value associated with <tt>key</tt>, or
 *         <tt>null</tt> if there was no mapping for <tt>key</tt>
 */
public V remove(Object key) {
    Object k = maskNull(key);
    int h = hash(k);
    Entry<K, V>[] tab = getTable();
    int i = indexFor(h, tab.length);
    Entry<K, V> prev = tab[i];
    Entry<K, V> e = prev;
    while (e != null) {
        Entry<K, V> next = e.next;
        if (h == e.hash && eq(k, e.get())) {
            modCount++;
            size--;
            if (prev == e)
                tab[i] = next;
            else
                prev.next = next;
            return e.value;
        }
        prev = e;
        e = next;
    }
    return null;
}