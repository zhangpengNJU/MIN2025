/**
 * Replace the last arrayLength parameter types with the component type of arrayType.
 * @param arrayType any array type
 * @param arrayLength the number of parameter types to change
 * @return the resulting type
 */
/*non-public*/
MethodType asSpreaderType(Class<?> arrayType, int arrayLength) {
    assert (parameterCount() >= arrayLength);
    int spreadPos = ptypes.length - arrayLength;
    // nothing to change
    if (arrayLength == 0)
        return this;
    if (arrayType == Object[].class) {
        // nothing to change
        if (isGeneric())
            return this;
        if (spreadPos == 0) {
            // no leading arguments to preserve; go generic
            MethodType res = genericMethodType(arrayLength);
            if (rtype != Object.class) {
                res = res.changeReturnType(rtype);
            }
            return res;
        }
    }
    Class<?> elemType = arrayType.getComponentType();
    assert (elemType != null);
    for (int i = spreadPos; i < ptypes.length; i++) {
        if (ptypes[i] != elemType) {
            Class<?>[] fixedPtypes = ptypes.clone();
            Arrays.fill(fixedPtypes, i, ptypes.length, elemType);
            return methodType(rtype, fixedPtypes);
        }
    }
    // arguments check out; no change
    return this;
}