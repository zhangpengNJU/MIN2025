/**
 * Returns a new group with the system ThreadGroup (the
 * topmost, parent-less group) as parent.  Uses Unsafe to
 * traverse Thread.group and ThreadGroup.parent fields.
 */
private static ThreadGroup createThreadGroup() {
    try {
        sun.misc.Unsafe u = sun.misc.Unsafe.getUnsafe();
        Class<?> tk = Thread.class;
        Class<?> gk = ThreadGroup.class;
        long tg = u.objectFieldOffset(tk.getDeclaredField("group"));
        long gp = u.objectFieldOffset(gk.getDeclaredField("parent"));
        ThreadGroup group = (ThreadGroup) u.getObject(Thread.currentThread(), tg);
        while (group != null) {
            ThreadGroup parent = (ThreadGroup) u.getObject(group, gp);
            if (parent == null)
                return new ThreadGroup(group, "InnocuousForkJoinWorkerThreadGroup");
            group = parent;
        }
    } catch (Exception e) {
        throw new Error(e);
    }
    // fall through if null as cannot-happen safeguard
    throw new Error("Cannot create ThreadGroup");
}