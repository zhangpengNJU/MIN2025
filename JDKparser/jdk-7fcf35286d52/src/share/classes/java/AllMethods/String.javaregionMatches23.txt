/**
 * Tests if two string regions are equal.
 * <p>
 * A substring of this {@code String} object is compared to a substring
 * of the argument other. The result is true if these substrings
 * represent identical character sequences. The substring of this
 * {@code String} object to be compared begins at index {@code toffset}
 * and has length {@code len}. The substring of other to be compared
 * begins at index {@code ooffset} and has length {@code len}. The
 * result is {@code false} if and only if at least one of the following
 * is true:
 * <ul><li>{@code toffset} is negative.
 * <li>{@code ooffset} is negative.
 * <li>{@code toffset+len} is greater than the length of this
 * {@code String} object.
 * <li>{@code ooffset+len} is greater than the length of the other
 * argument.
 * <li>There is some nonnegative integer <i>k</i> less than {@code len}
 * such that:
 * {@code this.charAt(toffset + }<i>k</i>{@code ) != other.charAt(ooffset + }
 * <i>k</i>{@code )}
 * </ul>
 *
 * @param   toffset   the starting offset of the subregion in this string.
 * @param   other     the string argument.
 * @param   ooffset   the starting offset of the subregion in the string
 *                    argument.
 * @param   len       the number of characters to compare.
 * @return  {@code true} if the specified subregion of this string
 *          exactly matches the specified subregion of the string argument;
 *          {@code false} otherwise.
 */
public boolean regionMatches(int toffset, String other, int ooffset, int len) {
    char[] ta = value;
    int to = toffset;
    char[] pa = other.value;
    int po = ooffset;
    // Note: toffset, ooffset, or len might be near -1>>>1.
    if ((ooffset < 0) || (toffset < 0) || (toffset > (long) value.length - len) || (ooffset > (long) other.value.length - len)) {
        return false;
    }
    while (len-- > 0) {
        if (ta[to++] != pa[po++]) {
            return false;
        }
    }
    return true;
}