/**
 * Initializes this object for verification, using the public key from
 * the given certificate.
 * <p>If the certificate is of type X.509 and has a <i>key usage</i>
 * extension field marked as critical, and the value of the <i>key usage</i>
 * extension field implies that the public key in
 * the certificate and its corresponding private key are not
 * supposed to be used for digital signatures, an
 * {@code InvalidKeyException} is thrown.
 *
 * @param certificate the certificate of the identity whose signature is
 * going to be verified.
 * @param params the parameters used for verifying this signature.
 *
 * @exception InvalidKeyException  if the public key in the certificate
 * is not encoded properly or does not include required  parameter
 * information or cannot be used for digital signature purposes.
 * @exception InvalidAlgorithmParameterException if the params is invalid.
 *
 * @since 8
 */
final void initVerify(Certificate certificate, AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException {
    engineInitVerify(getPublicKeyFromCert(certificate), params);
    state = VERIFY;
    if (!skipDebug && pdebug != null) {
        pdebug.println("Signature." + algorithm + " verification algorithm from: " + getProviderName());
    }
}