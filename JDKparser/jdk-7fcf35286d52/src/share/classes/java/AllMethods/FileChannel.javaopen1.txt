/**
 * Opens or creates a file, returning a file channel to access the file.
 *
 * <p> An invocation of this method behaves in exactly the same way as the
 * invocation
 * <pre>
 *     fc.{@link #open(Path,Set,FileAttribute[]) open}(file, opts, new FileAttribute&lt;?&gt;[0]);
 * </pre>
 * where {@code opts} is a set of the options specified in the {@code
 * options} array.
 *
 * @param   path
 *          The path of the file to open or create
 * @param   options
 *          Options specifying how the file is opened
 *
 * @return  A new file channel
 *
 * @throws  IllegalArgumentException
 *          If the set contains an invalid combination of options
 * @throws  UnsupportedOperationException
 *          If the {@code path} is associated with a provider that does not
 *          support creating file channels, or an unsupported open option is
 *          specified
 * @throws  IOException
 *          If an I/O error occurs
 * @throws  SecurityException
 *          If a security manager is installed and it denies an
 *          unspecified permission required by the implementation.
 *          In the case of the default provider, the {@link
 *          SecurityManager#checkRead(String)} method is invoked to check
 *          read access if the file is opened for reading. The {@link
 *          SecurityManager#checkWrite(String)} method is invoked to check
 *          write access if the file is opened for writing
 *
 * @since   1.7
 */
public static FileChannel open(Path path, OpenOption... options) throws IOException {
    Set<OpenOption> set = new HashSet<OpenOption>(options.length);
    Collections.addAll(set, options);
    return open(path, set, NO_ATTRIBUTES);
}