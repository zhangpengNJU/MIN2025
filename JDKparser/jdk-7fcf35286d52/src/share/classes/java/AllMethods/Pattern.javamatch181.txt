boolean match(Matcher matcher, int i, CharSequence seq) {
    int[] src = buffer;
    int patternLength = src.length;
    int last = matcher.to - lengthInChars;
    // Loop over all possible match positions in text
    NEXT: while (i <= last) {
        // Loop over pattern from right to left
        int ch;
        for (int j = countChars(seq, i, patternLength), x = patternLength - 1; j > 0; j -= Character.charCount(ch), x--) {
            ch = Character.codePointBefore(seq, i + j);
            if (ch != src[x]) {
                // Shift search to the right by the maximum of the
                // bad character shift and the good suffix shift
                int n = Math.max(x + 1 - lastOcc[ch & 0x7F], optoSft[x]);
                i += countChars(seq, i, n);
                continue NEXT;
            }
        }
        // Entire pattern matched starting at i
        matcher.first = i;
        boolean ret = next.match(matcher, i + lengthInChars, seq);
        if (ret) {
            matcher.first = i;
            matcher.groups[0] = matcher.first;
            matcher.groups[1] = matcher.last;
            return true;
        }
        i += countChars(seq, i, 1);
    }
    matcher.hitEnd = true;
    return false;
}