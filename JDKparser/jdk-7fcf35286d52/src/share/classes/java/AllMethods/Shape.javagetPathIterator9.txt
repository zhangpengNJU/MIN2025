/**
 * Returns an iterator object that iterates along the <code>Shape</code>
 * boundary and provides access to a flattened view of the
 * <code>Shape</code> outline geometry.
 * <p>
 * Only SEG_MOVETO, SEG_LINETO, and SEG_CLOSE point types are
 * returned by the iterator.
 * <p>
 * If an optional <code>AffineTransform</code> is specified,
 * the coordinates returned in the iteration are transformed
 * accordingly.
 * <p>
 * The amount of subdivision of the curved segments is controlled
 * by the <code>flatness</code> parameter, which specifies the
 * maximum distance that any point on the unflattened transformed
 * curve can deviate from the returned flattened path segments.
 * Note that a limit on the accuracy of the flattened path might be
 * silently imposed, causing very small flattening parameters to be
 * treated as larger values.  This limit, if there is one, is
 * defined by the particular implementation that is used.
 * <p>
 * Each call to this method returns a fresh <code>PathIterator</code>
 * object that traverses the <code>Shape</code> object geometry
 * independently from any other <code>PathIterator</code> objects in use at
 * the same time.
 * <p>
 * It is recommended, but not guaranteed, that objects
 * implementing the <code>Shape</code> interface isolate iterations
 * that are in process from any changes that might occur to the original
 * object's geometry during such iterations.
 *
 * @param at an optional <code>AffineTransform</code> to be applied to the
 *          coordinates as they are returned in the iteration, or
 *          <code>null</code> if untransformed coordinates are desired
 * @param flatness the maximum distance that the line segments used to
 *          approximate the curved segments are allowed to deviate
 *          from any point on the original curve
 * @return a new <code>PathIterator</code> that independently traverses
 *         a flattened view of the geometry of the  <code>Shape</code>.
 * @since 1.2
 */
public PathIterator getPathIterator(AffineTransform at, double flatness);