/**
 * Compares this object against the specified object.
 * The result is {@code true} if and only if the argument is
 * not {@code null} and is a {@code Bitset} object that has
 * exactly the same set of bits set to {@code true} as this bit
 * set. That is, for every nonnegative {@code int} index {@code k},
 * <pre>((BitSet)obj).get(k) == this.get(k)</pre>
 * must be true. The current sizes of the two bit sets are not compared.
 *
 * @param  obj the object to compare with
 * @return {@code true} if the objects are the same;
 *         {@code false} otherwise
 * @see    #size()
 */
public boolean equals(Object obj) {
    if (!(obj instanceof BitSet))
        return false;
    if (this == obj)
        return true;
    BitSet set = (BitSet) obj;
    checkInvariants();
    set.checkInvariants();
    if (wordsInUse != set.wordsInUse)
        return false;
    // Check words in use by both BitSets
    for (int i = 0; i < wordsInUse; i++) if (words[i] != set.words[i])
        return false;
    return true;
}