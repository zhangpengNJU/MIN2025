/**
 * Returns a copy of this formatter with a new resolver style.
 * <p>
 * This returns a formatter with similar state to this formatter but
 * with the resolver style set. By default, a formatter has the
 * {@link ResolverStyle#SMART SMART} resolver style.
 * <p>
 * Changing the resolver style only has an effect during parsing.
 * Parsing a text string occurs in two phases.
 * Phase 1 is a basic text parse according to the fields added to the builder.
 * Phase 2 resolves the parsed field-value pairs into date and/or time objects.
 * The resolver style is used to control how phase 2, resolving, happens.
 * See {@code ResolverStyle} for more information on the options available.
 * <p>
 * This instance is immutable and unaffected by this method call.
 *
 * @param resolverStyle  the new resolver style, not null
 * @return a formatter based on this formatter with the requested resolver style, not null
 */
public DateTimeFormatter withResolverStyle(ResolverStyle resolverStyle) {
    Objects.requireNonNull(resolverStyle, "resolverStyle");
    if (Objects.equals(this.resolverStyle, resolverStyle)) {
        return this;
    }
    return new DateTimeFormatter(printerParser, locale, decimalStyle, resolverStyle, resolverFields, chrono, zone);
}