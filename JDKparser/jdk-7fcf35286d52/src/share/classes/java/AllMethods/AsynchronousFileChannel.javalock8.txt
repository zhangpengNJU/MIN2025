/**
 * Acquires an exclusive lock on this channel's file.
 *
 * <p> This method initiates an operation to acquire an exclusive lock on this
 * channel's file. The method returns a {@code Future} representing the
 * pending result of the operation. The {@code Future}'s {@link Future#get()
 * get} method returns the {@link FileLock} on successful completion.
 *
 * <p> An invocation of this method behaves in exactly the same way as the
 * invocation
 * <pre>
 *     ch.{@link #lock(long,long,boolean) lock}(0L, Long.MAX_VALUE, false)
 * </pre>
 *
 * @return  a {@code Future} object representing the pending result
 *
 * @throws  OverlappingFileLockException
 *          If a lock is already held by this Java virtual machine, or there
 *          is already a pending attempt to lock a region
 * @throws  NonWritableChannelException
 *          If this channel was not opened for writing
 */
public final Future<FileLock> lock() {
    return lock(0L, Long.MAX_VALUE, false);
}