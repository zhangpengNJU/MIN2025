// Write out the properties of this instance.
private void initBean(Class<?> type, Object oldInstance, Object newInstance, Encoder out) {
    for (Field field : type.getFields()) {
        if (!ReflectUtil.isPackageAccessible(field.getDeclaringClass())) {
            continue;
        }
        int mod = field.getModifiers();
        if (Modifier.isFinal(mod) || Modifier.isStatic(mod) || Modifier.isTransient(mod)) {
            continue;
        }
        try {
            Expression oldGetExp = new Expression(field, "get", new Object[] { oldInstance });
            Expression newGetExp = new Expression(field, "get", new Object[] { newInstance });
            Object oldValue = oldGetExp.getValue();
            Object newValue = newGetExp.getValue();
            out.writeExpression(oldGetExp);
            if (!Objects.equals(newValue, out.get(oldValue))) {
                out.writeStatement(new Statement(field, "set", new Object[] { oldInstance, oldValue }));
            }
        } catch (Exception exception) {
            out.getExceptionListener().exceptionThrown(exception);
        }
    }
    BeanInfo info;
    try {
        info = Introspector.getBeanInfo(type);
    } catch (IntrospectionException exception) {
        return;
    }
    // Properties
    for (PropertyDescriptor d : info.getPropertyDescriptors()) {
        if (d.isTransient()) {
            continue;
        }
        try {
            doProperty(type, d, oldInstance, newInstance, out);
        } catch (Exception e) {
            out.getExceptionListener().exceptionThrown(e);
        }
    }
    // Listeners
    /*
        Pending(milne). There is a general problem with the archival of
        listeners which is unresolved as of 1.4. Many of the methods
        which install one object inside another (typically "add" methods
        or setters) automatically install a listener on the "child" object
        so that its "parent" may respond to changes that are made to it.
        For example the JTable:setModel() method automatically adds a
        TableModelListener (the JTable itself in this case) to the supplied
        table model.

        We do not need to explicitly add these listeners to the model in an
        archive as they will be added automatically by, in the above case,
        the JTable's "setModel" method. In some cases, we must specifically
        avoid trying to do this since the listener may be an inner class
        that cannot be instantiated using public API.

        No general mechanism currently
        exists for differentiating between these kind of listeners and
        those which were added explicitly by the user. A mechanism must
        be created to provide a general means to differentiate these
        special cases so as to provide reliable persistence of listeners
        for the general case.
        */
    if (!java.awt.Component.class.isAssignableFrom(type)) {
        // Just handle the listeners of Components for now.
        return;
    }
    for (EventSetDescriptor d : info.getEventSetDescriptors()) {
        if (d.isTransient()) {
            continue;
        }
        Class<?> listenerType = d.getListenerType();
        // The ComponentListener is added automatically, when
        // Contatiner:add is called on the parent.
        if (listenerType == java.awt.event.ComponentListener.class) {
            continue;
        }
        // JMenuItems have a change listener added to them in
        // their "add" methods to enable accessibility support -
        // see the add method in JMenuItem for details. We cannot
        // instantiate this instance as it is a private inner class
        // and do not need to do this anyway since it will be created
        // and installed by the "add" method. Special case this for now,
        // ignoring all change listeners on JMenuItems.
        if (listenerType == javax.swing.event.ChangeListener.class && type == javax.swing.JMenuItem.class) {
            continue;
        }
        EventListener[] oldL = new EventListener[0];
        EventListener[] newL = new EventListener[0];
        try {
            Method m = d.getGetListenerMethod();
            oldL = (EventListener[]) MethodUtil.invoke(m, oldInstance, new Object[] {});
            newL = (EventListener[]) MethodUtil.invoke(m, newInstance, new Object[] {});
        } catch (Exception e2) {
            try {
                Method m = type.getMethod("getListeners", new Class<?>[] { Class.class });
                oldL = (EventListener[]) MethodUtil.invoke(m, oldInstance, new Object[] { listenerType });
                newL = (EventListener[]) MethodUtil.invoke(m, newInstance, new Object[] { listenerType });
            } catch (Exception e3) {
                return;
            }
        }
        // Asssume the listeners are in the same order and that there are no gaps.
        // Eventually, this may need to do true differencing.
        String addListenerMethodName = d.getAddListenerMethod().getName();
        for (int i = newL.length; i < oldL.length; i++) {
            // System.out.println("Adding listener: " + addListenerMethodName + oldL[i]);
            invokeStatement(oldInstance, addListenerMethodName, new Object[] { oldL[i] }, out);
        }
        String removeListenerMethodName = d.getRemoveListenerMethod().getName();
        for (int i = oldL.length; i < newL.length; i++) {
            invokeStatement(oldInstance, removeListenerMethodName, new Object[] { newL[i] }, out);
        }
    }
}