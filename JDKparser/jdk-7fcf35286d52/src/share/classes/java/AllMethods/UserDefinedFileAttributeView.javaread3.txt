/**
 * Read the value of a user-defined attribute into a buffer.
 *
 * <p> This method reads the value of the attribute into the given buffer
 * as a sequence of bytes, failing if the number of bytes remaining in
 * the buffer is insufficient to read the complete attribute value. The
 * number of bytes transferred into the buffer is {@code n}, where {@code n}
 * is the size of the attribute value. The first byte in the sequence is at
 * index {@code p} and the last byte is at index {@code p + n - 1}, where
 * {@code p} is the buffer's position. Upon return the buffer's position
 * will be equal to {@code p + n}; its limit will not have changed.
 *
 * <p> <b>Usage Example:</b>
 * Suppose we want to read a file's MIME type that is stored as a user-defined
 * attribute with the name "{@code user.mimetype}".
 * <pre>
 *    UserDefinedFileAttributeView view =
 *        Files.getFileAttributeView(path, UserDefinedFileAttributeView.class);
 *    String name = "user.mimetype";
 *    ByteBuffer buf = ByteBuffer.allocate(view.size(name));
 *    view.read(name, buf);
 *    buf.flip();
 *    String value = Charset.defaultCharset().decode(buf).toString();
 * </pre>
 *
 * @param   name
 *          The attribute name
 * @param   dst
 *          The destination buffer
 *
 * @return  The number of bytes read, possibly zero
 *
 * @throws  IllegalArgumentException
 *          If the destination buffer is read-only
 * @throws  IOException
 *          If an I/O error occurs or there is insufficient space in the
 *          destination buffer for the attribute value
 * @throws  SecurityException
 *          In the case of the default provider, a security manager is
 *          installed, and it denies {@link
 *          RuntimePermission}<tt>("accessUserDefinedAttributes")</tt>
 *          or its {@link SecurityManager#checkRead(String) checkRead} method
 *          denies read access to the file.
 *
 * @see #size
 */
int read(String name, ByteBuffer dst) throws IOException;