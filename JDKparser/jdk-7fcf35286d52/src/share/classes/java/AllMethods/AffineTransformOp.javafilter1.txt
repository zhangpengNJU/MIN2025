/**
 * Transforms the source <CODE>BufferedImage</CODE> and stores the results
 * in the destination <CODE>BufferedImage</CODE>.
 * If the color models for the two images do not match, a color
 * conversion into the destination color model is performed.
 * If the destination image is null,
 * a <CODE>BufferedImage</CODE> is created with the source
 * <CODE>ColorModel</CODE>.
 * <p>
 * The coordinates of the rectangle returned by
 * <code>getBounds2D(BufferedImage)</code>
 * are not necessarily the same as the coordinates of the
 * <code>BufferedImage</code> returned by this method.  If the
 * upper-left corner coordinates of the rectangle are
 * negative then this part of the rectangle is not drawn.  If the
 * upper-left corner coordinates of the  rectangle are positive
 * then the filtered image is drawn at that position in the
 * destination <code>BufferedImage</code>.
 * <p>
 * An <CODE>IllegalArgumentException</CODE> is thrown if the source is
 * the same as the destination.
 *
 * @param src The <CODE>BufferedImage</CODE> to transform.
 * @param dst The <CODE>BufferedImage</CODE> in which to store the results
 * of the transformation.
 *
 * @return The filtered <CODE>BufferedImage</CODE>.
 * @throws IllegalArgumentException if <code>src</code> and
 *         <code>dst</code> are the same
 * @throws ImagingOpException if the image cannot be transformed
 *         because of a data-processing error that might be
 *         caused by an invalid image format, tile format, or
 *         image-processing operation, or any other unsupported
 *         operation.
 */
public final BufferedImage filter(BufferedImage src, BufferedImage dst) {
    if (src == null) {
        throw new NullPointerException("src image is null");
    }
    if (src == dst) {
        throw new IllegalArgumentException("src image cannot be the " + "same as the dst image");
    }
    boolean needToConvert = false;
    ColorModel srcCM = src.getColorModel();
    ColorModel dstCM;
    BufferedImage origDst = dst;
    if (dst == null) {
        dst = createCompatibleDestImage(src, null);
        dstCM = srcCM;
        origDst = dst;
    } else {
        dstCM = dst.getColorModel();
        if (srcCM.getColorSpace().getType() != dstCM.getColorSpace().getType()) {
            int type = xform.getType();
            boolean needTrans = ((type & (xform.TYPE_MASK_ROTATION | xform.TYPE_GENERAL_TRANSFORM)) != 0);
            if (!needTrans && type != xform.TYPE_TRANSLATION && type != xform.TYPE_IDENTITY) {
                double[] mtx = new double[4];
                xform.getMatrix(mtx);
                // Check out the matrix.  A non-integral scale will force ARGB
                // since the edge conditions can't be guaranteed.
                needTrans = (mtx[0] != (int) mtx[0] || mtx[3] != (int) mtx[3]);
            }
            if (needTrans && srcCM.getTransparency() == Transparency.OPAQUE) {
                // Need to convert first
                ColorConvertOp ccop = new ColorConvertOp(hints);
                BufferedImage tmpSrc = null;
                int sw = src.getWidth();
                int sh = src.getHeight();
                if (dstCM.getTransparency() == Transparency.OPAQUE) {
                    tmpSrc = new BufferedImage(sw, sh, BufferedImage.TYPE_INT_ARGB);
                } else {
                    WritableRaster r = dstCM.createCompatibleWritableRaster(sw, sh);
                    tmpSrc = new BufferedImage(dstCM, r, dstCM.isAlphaPremultiplied(), null);
                }
                src = ccop.filter(src, tmpSrc);
            } else {
                needToConvert = true;
                dst = createCompatibleDestImage(src, null);
            }
        }
    }
    if (interpolationType != TYPE_NEAREST_NEIGHBOR && dst.getColorModel() instanceof IndexColorModel) {
        dst = new BufferedImage(dst.getWidth(), dst.getHeight(), BufferedImage.TYPE_INT_ARGB);
    }
    if (ImagingLib.filter(this, src, dst) == null) {
        throw new ImagingOpException("Unable to transform src image");
    }
    if (needToConvert) {
        ColorConvertOp ccop = new ColorConvertOp(hints);
        ccop.filter(dst, origDst);
    } else if (origDst != dst) {
        java.awt.Graphics2D g = origDst.createGraphics();
        try {
            g.setComposite(AlphaComposite.Src);
            g.drawImage(dst, 0, 0, null);
        } finally {
            g.dispose();
        }
    }
    return origDst;
}