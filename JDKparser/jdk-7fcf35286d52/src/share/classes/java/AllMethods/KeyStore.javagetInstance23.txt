/**
 * Returns a keystore object of the specified type.
 *
 * <p> A new KeyStore object encapsulating the
 * KeyStoreSpi implementation from the specified Provider
 * object is returned.  Note that the specified Provider object
 * does not have to be registered in the provider list.
 *
 * @param type the type of keystore.
 * See the KeyStore section in the <a href=
 * "{@docRoot}/../technotes/guides/security/StandardNames.html#KeyStore">
 * Java Cryptography Architecture Standard Algorithm Name Documentation</a>
 * for information about standard keystore types.
 *
 * @param provider the provider.
 *
 * @return a keystore object of the specified type.
 *
 * @exception KeyStoreException if KeyStoreSpi
 *          implementation for the specified type is not available
 *          from the specified Provider object.
 *
 * @exception IllegalArgumentException if the specified provider is null.
 *
 * @see Provider
 *
 * @since 1.4
 */
public static KeyStore getInstance(String type, Provider provider) throws KeyStoreException {
    if (provider == null)
        throw new IllegalArgumentException("missing provider");
    try {
        Object[] objs = Security.getImpl(type, "KeyStore", provider);
        return new KeyStore((KeyStoreSpi) objs[0], (Provider) objs[1], type);
    } catch (NoSuchAlgorithmException nsae) {
        throw new KeyStoreException(type + " not found", nsae);
    }
}