/**
 * Returns a string describing this {@code Method}.  The string is
 * formatted as the method access modifiers, if any, followed by
 * the method return type, followed by a space, followed by the
 * class declaring the method, followed by a period, followed by
 * the method name, followed by a parenthesized, comma-separated
 * list of the method's formal parameter types. If the method
 * throws checked exceptions, the parameter list is followed by a
 * space, followed by the word throws followed by a
 * comma-separated list of the thrown exception types.
 * For example:
 * <pre>
 *    public boolean java.lang.Object.equals(java.lang.Object)
 * </pre>
 *
 * <p>The access modifiers are placed in canonical order as
 * specified by "The Java Language Specification".  This is
 * {@code public}, {@code protected} or {@code private} first,
 * and then other modifiers in the following order:
 * {@code abstract}, {@code default}, {@code static}, {@code final},
 * {@code synchronized}, {@code native}, {@code strictfp}.
 *
 * @return a string describing this {@code Method}
 *
 * @jls 8.4.3 Method Modifiers
 */
public String toString() {
    return sharedToString(Modifier.methodModifiers(), isDefault(), parameterTypes, exceptionTypes);
}