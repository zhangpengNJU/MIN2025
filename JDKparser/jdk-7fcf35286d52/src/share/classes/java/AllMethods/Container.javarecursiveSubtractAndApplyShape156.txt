final void recursiveSubtractAndApplyShape(Region shape, int fromZorder, int toZorder) {
    checkTreeLock();
    if (mixingLog.isLoggable(PlatformLogger.Level.FINE)) {
        mixingLog.fine("this = " + this + "; shape=" + shape + "; fromZ=" + fromZorder + "; toZ=" + toZorder);
    }
    if (fromZorder == -1) {
        return;
    }
    if (shape.isEmpty()) {
        return;
    }
    // An invalid container with not-null layout should be ignored
    // by the mixing code, the container will be validated later
    // and the mixing code will be executed later.
    if (getLayout() != null && !isValid()) {
        return;
    }
    for (int index = fromZorder; index <= toZorder; index++) {
        Component comp = getComponent(index);
        if (!comp.isLightweight()) {
            comp.subtractAndApplyShape(shape);
        } else if (comp instanceof Container && ((Container) comp).hasHeavyweightDescendants() && comp.isShowing()) {
            ((Container) comp).recursiveSubtractAndApplyShape(shape);
        }
    }
}