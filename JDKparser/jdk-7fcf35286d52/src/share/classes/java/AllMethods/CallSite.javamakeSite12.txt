// this implements the upcall from the JVM, MethodHandleNatives.makeDynamicCallSite:
static CallSite makeSite(MethodHandle bootstrapMethod, // Callee information:
String name, MethodType type, // Extra arguments for BSM, if any:
Object info, // Caller information:
Class<?> callerClass) {
    MethodHandles.Lookup caller = IMPL_LOOKUP.in(callerClass);
    CallSite site;
    try {
        Object binding;
        info = maybeReBox(info);
        if (info == null) {
            binding = bootstrapMethod.invoke(caller, name, type);
        } else if (!info.getClass().isArray()) {
            binding = bootstrapMethod.invoke(caller, name, type, info);
        } else {
            Object[] argv = (Object[]) info;
            maybeReBoxElements(argv);
            switch(argv.length) {
                case 0:
                    binding = bootstrapMethod.invoke(caller, name, type);
                    break;
                case 1:
                    binding = bootstrapMethod.invoke(caller, name, type, argv[0]);
                    break;
                case 2:
                    binding = bootstrapMethod.invoke(caller, name, type, argv[0], argv[1]);
                    break;
                case 3:
                    binding = bootstrapMethod.invoke(caller, name, type, argv[0], argv[1], argv[2]);
                    break;
                case 4:
                    binding = bootstrapMethod.invoke(caller, name, type, argv[0], argv[1], argv[2], argv[3]);
                    break;
                case 5:
                    binding = bootstrapMethod.invoke(caller, name, type, argv[0], argv[1], argv[2], argv[3], argv[4]);
                    break;
                case 6:
                    binding = bootstrapMethod.invoke(caller, name, type, argv[0], argv[1], argv[2], argv[3], argv[4], argv[5]);
                    break;
                default:
                    // (caller, name, type)
                    final int NON_SPREAD_ARG_COUNT = 3;
                    if (NON_SPREAD_ARG_COUNT + argv.length > MethodType.MAX_MH_ARITY)
                        throw new BootstrapMethodError("too many bootstrap method arguments");
                    MethodType bsmType = bootstrapMethod.type();
                    MethodType invocationType = MethodType.genericMethodType(NON_SPREAD_ARG_COUNT + argv.length);
                    MethodHandle typedBSM = bootstrapMethod.asType(invocationType);
                    MethodHandle spreader = invocationType.invokers().spreadInvoker(NON_SPREAD_ARG_COUNT);
                    binding = spreader.invokeExact(typedBSM, (Object) caller, (Object) name, (Object) type, argv);
            }
        }
        // System.out.println("BSM for "+name+type+" => "+binding);
        if (binding instanceof CallSite) {
            site = (CallSite) binding;
        } else {
            throw new ClassCastException("bootstrap method failed to produce a CallSite");
        }
        if (!site.getTarget().type().equals(type))
            throw wrongTargetType(site.getTarget(), type);
    } catch (Throwable ex) {
        BootstrapMethodError bex;
        if (ex instanceof BootstrapMethodError)
            bex = (BootstrapMethodError) ex;
        else
            bex = new BootstrapMethodError("call site initialization exception", ex);
        throw bex;
    }
    return site;
}