/**
 * Set the {@code accessible} flag for this object to
 * the indicated boolean value.  A value of {@code true} indicates that
 * the reflected object should suppress Java language access
 * checking when it is used.  A value of {@code false} indicates
 * that the reflected object should enforce Java language access checks.
 *
 * <p>First, if there is a security manager, its
 * {@code checkPermission} method is called with a
 * {@code ReflectPermission("suppressAccessChecks")} permission.
 *
 * <p>A {@code SecurityException} is raised if {@code flag} is
 * {@code true} but accessibility of this object may not be changed
 * (for example, if this element object is a {@link Constructor} object for
 * the class {@link java.lang.Class}).
 *
 * <p>A {@code SecurityException} is raised if this object is a {@link
 * java.lang.reflect.Constructor} object for the class
 * {@code java.lang.Class}, and {@code flag} is true.
 *
 * @param flag the new value for the {@code accessible} flag
 * @throws SecurityException if the request is denied.
 * @see SecurityManager#checkPermission
 * @see java.lang.RuntimePermission
 */
public void setAccessible(boolean flag) throws SecurityException {
    SecurityManager sm = System.getSecurityManager();
    if (sm != null)
        sm.checkPermission(ACCESS_PERMISSION);
    setAccessible0(this, flag);
}