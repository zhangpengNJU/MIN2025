/**
 * Returns a resource bundle using the specified base name, target
 * locale and control, and the caller's class loader. Calling this
 * method is equivalent to calling
 * <pre>
 * getBundle(baseName, targetLocale, this.getClass().getClassLoader(),
 *           control),
 * </pre>
 * except that <code>getClassLoader()</code> is run with the security
 * privileges of <code>ResourceBundle</code>.  See {@link
 * #getBundle(String, Locale, ClassLoader, Control) getBundle} for the
 * complete description of the resource bundle loading process with a
 * <code>ResourceBundle.Control</code>.
 *
 * @param baseName
 *        the base name of the resource bundle, a fully qualified
 *        class name
 * @param targetLocale
 *        the locale for which a resource bundle is desired
 * @param control
 *        the control which gives information for the resource
 *        bundle loading process
 * @return a resource bundle for the given base name and a
 *        <code>Locale</code> in <code>locales</code>
 * @exception NullPointerException
 *        if <code>baseName</code>, <code>locales</code> or
 *        <code>control</code> is <code>null</code>
 * @exception MissingResourceException
 *        if no resource bundle for the specified base name in any
 *        of the <code>locales</code> can be found.
 * @exception IllegalArgumentException
 *        if the given <code>control</code> doesn't perform properly
 *        (e.g., <code>control.getCandidateLocales</code> returns null.)
 *        Note that validation of <code>control</code> is performed as
 *        needed.
 * @since 1.6
 */
@CallerSensitive
public static final ResourceBundle getBundle(String baseName, Locale targetLocale, Control control) {
    return getBundleImpl(baseName, targetLocale, getLoader(Reflection.getCallerClass()), control);
}