/**
 * Returns the TRC for a particular component as an array.
 * Component must be <code>REDCOMPONENT</code>,
 * <code>GREENCOMPONENT</code>, or <code>BLUECOMPONENT</code>.
 * Otherwise the returned array
 * represents a lookup table where the input component value
 * is conceptually in the range [0.0, 1.0].  Value 0.0 maps
 * to array index 0 and value 1.0 maps to array index length-1.
 * Interpolation might be used to generate output values for
 * input values that do not map exactly to an index in the
 * array.  Output values also map linearly to the range [0.0, 1.0].
 * Value 0.0 is represented by an array value of 0x0000 and
 * value 1.0 by 0xFFFF.  In other words, the values are really unsigned
 * <code>short</code> values even though they are returned in a
 * <code>short</code> array.
 *
 * If the profile has specified the corresponding TRC
 * as linear (gamma = 1.0) or as a simple gamma value, this method
 * throws an exception.  In this case, the {@link #getGamma(int)}
 * method should be used to get the gamma value.
 *
 * @param component The <CODE>ICC_ProfileRGB</CODE> constant that
 * represents the component whose TRC you want to retrieve:
 * <CODE>REDCOMPONENT</CODE>, <CODE>GREENCOMPONENT</CODE>, or
 * <CODE>BLUECOMPONENT</CODE>.
 *
 * @return a short array representing the TRC.
 * @exception ProfileDataException if the profile does not specify
 *            the corresponding TRC as a table.
 */
public short[] getTRC(int component) {
    short[] theTRC;
    int theSignature;
    switch(component) {
        case REDCOMPONENT:
            theSignature = ICC_Profile.icSigRedTRCTag;
            break;
        case GREENCOMPONENT:
            theSignature = ICC_Profile.icSigGreenTRCTag;
            break;
        case BLUECOMPONENT:
            theSignature = ICC_Profile.icSigBlueTRCTag;
            break;
        default:
            throw new IllegalArgumentException("Must be Red, Green, or Blue");
    }
    theTRC = super.getTRC(theSignature);
    return theTRC;
}