// PreInitMaximumSizes
/**
 * This method is obsolete and supplied for backwards
 * compatibility only; new code should call {@link
 * #getLayoutInfo(java.awt.Container, int) getLayoutInfo} instead.
 * This method is the same as <code>getLayoutInfo</code>;
 * refer to <code>getLayoutInfo</code> for details on parameters
 * and return value.
 */
protected GridBagLayoutInfo GetLayoutInfo(Container parent, int sizeflag) {
    synchronized (parent.getTreeLock()) {
        GridBagLayoutInfo r;
        Component comp;
        GridBagConstraints constraints;
        Dimension d;
        Component[] components = parent.getComponents();
        // Code below will address index curX+curWidth in the case of yMaxArray, weightY
        // ( respectively curY+curHeight for xMaxArray, weightX ) where
        // curX in 0 to preInitMaximumArraySizes.y
        // Thus, the maximum index that could
        // be calculated in the following code is curX+curX.
        // EmpericMultier equals 2 because of this.
        int layoutWidth, layoutHeight;
        int[] xMaxArray;
        int[] yMaxArray;
        int compindex, i, k, px, py, pixels_diff, nextSize;
        // constraints.gridx
        int curX = 0;
        // constraints.gridy
        int curY = 0;
        // constraints.gridwidth
        int curWidth = 1;
        // constraints.gridheight
        int curHeight = 1;
        int curRow, curCol;
        double weight_diff, weight;
        int maximumArrayXIndex = 0;
        int maximumArrayYIndex = 0;
        int anchor;
        /*
             * Pass #1
             *
             * Figure out the dimensions of the layout grid (use a value of 1 for
             * zero or negative widths and heights).
             */
        layoutWidth = layoutHeight = 0;
        curRow = curCol = -1;
        long[] arraySizes = preInitMaximumArraySizes(parent);
        /* fix for 4623196.
             * If user try to create a very big grid we can
             * get NegativeArraySizeException because of integer value
             * overflow (EMPIRICMULTIPLIER*gridSize might be more then Integer.MAX_VALUE).
             * We need to detect this situation and try to create a
             * grid with Integer.MAX_VALUE size instead.
             */
        maximumArrayXIndex = (EMPIRICMULTIPLIER * arraySizes[0] > Integer.MAX_VALUE) ? Integer.MAX_VALUE : EMPIRICMULTIPLIER * (int) arraySizes[0];
        maximumArrayYIndex = (EMPIRICMULTIPLIER * arraySizes[1] > Integer.MAX_VALUE) ? Integer.MAX_VALUE : EMPIRICMULTIPLIER * (int) arraySizes[1];
        if (rowHeights != null) {
            maximumArrayXIndex = Math.max(maximumArrayXIndex, rowHeights.length);
        }
        if (columnWidths != null) {
            maximumArrayYIndex = Math.max(maximumArrayYIndex, columnWidths.length);
        }
        xMaxArray = new int[maximumArrayXIndex];
        yMaxArray = new int[maximumArrayYIndex];
        boolean hasBaseline = false;
        for (compindex = 0; compindex < components.length; compindex++) {
            comp = components[compindex];
            if (!comp.isVisible())
                continue;
            constraints = lookupConstraints(comp);
            curX = constraints.gridx;
            curY = constraints.gridy;
            curWidth = constraints.gridwidth;
            if (curWidth <= 0)
                curWidth = 1;
            curHeight = constraints.gridheight;
            if (curHeight <= 0)
                curHeight = 1;
            /* If x or y is negative, then use relative positioning: */
            if (curX < 0 && curY < 0) {
                if (curRow >= 0)
                    curY = curRow;
                else if (curCol >= 0)
                    curX = curCol;
                else
                    curY = 0;
            }
            if (curX < 0) {
                px = 0;
                for (i = curY; i < (curY + curHeight); i++) {
                    px = Math.max(px, xMaxArray[i]);
                }
                curX = px - curX - 1;
                if (curX < 0)
                    curX = 0;
            } else if (curY < 0) {
                py = 0;
                for (i = curX; i < (curX + curWidth); i++) {
                    py = Math.max(py, yMaxArray[i]);
                }
                curY = py - curY - 1;
                if (curY < 0)
                    curY = 0;
            }
            /* Adjust the grid width and height
                 *  fix for 5005945: unneccessary loops removed
                 */
            px = curX + curWidth;
            if (layoutWidth < px) {
                layoutWidth = px;
            }
            py = curY + curHeight;
            if (layoutHeight < py) {
                layoutHeight = py;
            }
            /* Adjust xMaxArray and yMaxArray */
            for (i = curX; i < (curX + curWidth); i++) {
                yMaxArray[i] = py;
            }
            for (i = curY; i < (curY + curHeight); i++) {
                xMaxArray[i] = px;
            }
            /* Cache the current slave's size. */
            if (sizeflag == PREFERREDSIZE)
                d = comp.getPreferredSize();
            else
                d = comp.getMinimumSize();
            constraints.minWidth = d.width;
            constraints.minHeight = d.height;
            if (calculateBaseline(comp, constraints, d)) {
                hasBaseline = true;
            }
            /* Zero width and height must mean that this is the last item (or
                 * else something is wrong). */
            if (constraints.gridheight == 0 && constraints.gridwidth == 0)
                curRow = curCol = -1;
            /* Zero width starts a new row */
            if (constraints.gridheight == 0 && curRow < 0)
                curCol = curX + curWidth;
            else /* Zero height starts a new column */
            if (constraints.gridwidth == 0 && curCol < 0)
                curRow = curY + curHeight;
        }
        // for (components) loop
        /*
             * Apply minimum row/column dimensions
             */
        if (columnWidths != null && layoutWidth < columnWidths.length)
            layoutWidth = columnWidths.length;
        if (rowHeights != null && layoutHeight < rowHeights.length)
            layoutHeight = rowHeights.length;
        r = new GridBagLayoutInfo(layoutWidth, layoutHeight);
        /*
             * Pass #2
             *
             * Negative values for gridX are filled in with the current x value.
             * Negative values for gridY are filled in with the current y value.
             * Negative or zero values for gridWidth and gridHeight end the current
             *  row or column, respectively.
             */
        curRow = curCol = -1;
        Arrays.fill(xMaxArray, 0);
        Arrays.fill(yMaxArray, 0);
        int[] maxAscent = null;
        int[] maxDescent = null;
        short[] baselineType = null;
        if (hasBaseline) {
            r.maxAscent = maxAscent = new int[layoutHeight];
            r.maxDescent = maxDescent = new int[layoutHeight];
            r.baselineType = baselineType = new short[layoutHeight];
            r.hasBaseline = true;
        }
        for (compindex = 0; compindex < components.length; compindex++) {
            comp = components[compindex];
            if (!comp.isVisible())
                continue;
            constraints = lookupConstraints(comp);
            curX = constraints.gridx;
            curY = constraints.gridy;
            curWidth = constraints.gridwidth;
            curHeight = constraints.gridheight;
            /* If x or y is negative, then use relative positioning: */
            if (curX < 0 && curY < 0) {
                if (curRow >= 0)
                    curY = curRow;
                else if (curCol >= 0)
                    curX = curCol;
                else
                    curY = 0;
            }
            if (curX < 0) {
                if (curHeight <= 0) {
                    curHeight += r.height - curY;
                    if (curHeight < 1)
                        curHeight = 1;
                }
                px = 0;
                for (i = curY; i < (curY + curHeight); i++) px = Math.max(px, xMaxArray[i]);
                curX = px - curX - 1;
                if (curX < 0)
                    curX = 0;
            } else if (curY < 0) {
                if (curWidth <= 0) {
                    curWidth += r.width - curX;
                    if (curWidth < 1)
                        curWidth = 1;
                }
                py = 0;
                for (i = curX; i < (curX + curWidth); i++) {
                    py = Math.max(py, yMaxArray[i]);
                }
                curY = py - curY - 1;
                if (curY < 0)
                    curY = 0;
            }
            if (curWidth <= 0) {
                curWidth += r.width - curX;
                if (curWidth < 1)
                    curWidth = 1;
            }
            if (curHeight <= 0) {
                curHeight += r.height - curY;
                if (curHeight < 1)
                    curHeight = 1;
            }
            px = curX + curWidth;
            py = curY + curHeight;
            for (i = curX; i < (curX + curWidth); i++) {
                yMaxArray[i] = py;
            }
            for (i = curY; i < (curY + curHeight); i++) {
                xMaxArray[i] = px;
            }
            /* Make negative sizes start a new row/column */
            if (constraints.gridheight == 0 && constraints.gridwidth == 0)
                curRow = curCol = -1;
            if (constraints.gridheight == 0 && curRow < 0)
                curCol = curX + curWidth;
            else if (constraints.gridwidth == 0 && curCol < 0)
                curRow = curY + curHeight;
            /* Assign the new values to the gridbag slave */
            constraints.tempX = curX;
            constraints.tempY = curY;
            constraints.tempWidth = curWidth;
            constraints.tempHeight = curHeight;
            anchor = constraints.anchor;
            if (hasBaseline) {
                switch(anchor) {
                    case GridBagConstraints.BASELINE:
                    case GridBagConstraints.BASELINE_LEADING:
                    case GridBagConstraints.BASELINE_TRAILING:
                        if (constraints.ascent >= 0) {
                            if (curHeight == 1) {
                                maxAscent[curY] = Math.max(maxAscent[curY], constraints.ascent);
                                maxDescent[curY] = Math.max(maxDescent[curY], constraints.descent);
                            } else {
                                if (constraints.baselineResizeBehavior == Component.BaselineResizeBehavior.CONSTANT_DESCENT) {
                                    maxDescent[curY + curHeight - 1] = Math.max(maxDescent[curY + curHeight - 1], constraints.descent);
                                } else {
                                    maxAscent[curY] = Math.max(maxAscent[curY], constraints.ascent);
                                }
                            }
                            if (constraints.baselineResizeBehavior == Component.BaselineResizeBehavior.CONSTANT_DESCENT) {
                                baselineType[curY + curHeight - 1] |= (1 << constraints.baselineResizeBehavior.ordinal());
                            } else {
                                baselineType[curY] |= (1 << constraints.baselineResizeBehavior.ordinal());
                            }
                        }
                        break;
                    case GridBagConstraints.ABOVE_BASELINE:
                    case GridBagConstraints.ABOVE_BASELINE_LEADING:
                    case GridBagConstraints.ABOVE_BASELINE_TRAILING:
                        // Component positioned above the baseline.
                        // To make the bottom edge of the component aligned
                        // with the baseline the bottom inset is
                        // added to the descent, the rest to the ascent.
                        pixels_diff = constraints.minHeight + constraints.insets.top + constraints.ipady;
                        maxAscent[curY] = Math.max(maxAscent[curY], pixels_diff);
                        maxDescent[curY] = Math.max(maxDescent[curY], constraints.insets.bottom);
                        break;
                    case GridBagConstraints.BELOW_BASELINE:
                    case GridBagConstraints.BELOW_BASELINE_LEADING:
                    case GridBagConstraints.BELOW_BASELINE_TRAILING:
                        // Component positioned below the baseline.
                        // To make the top edge of the component aligned
                        // with the baseline the top inset is
                        // added to the ascent, the rest to the descent.
                        pixels_diff = constraints.minHeight + constraints.insets.bottom + constraints.ipady;
                        maxDescent[curY] = Math.max(maxDescent[curY], pixels_diff);
                        maxAscent[curY] = Math.max(maxAscent[curY], constraints.insets.top);
                        break;
                }
            }
        }
        r.weightX = new double[maximumArrayYIndex];
        r.weightY = new double[maximumArrayXIndex];
        r.minWidth = new int[maximumArrayYIndex];
        r.minHeight = new int[maximumArrayXIndex];
        /*
             * Apply minimum row/column dimensions and weights
             */
        if (columnWidths != null)
            System.arraycopy(columnWidths, 0, r.minWidth, 0, columnWidths.length);
        if (rowHeights != null)
            System.arraycopy(rowHeights, 0, r.minHeight, 0, rowHeights.length);
        if (columnWeights != null)
            System.arraycopy(columnWeights, 0, r.weightX, 0, Math.min(r.weightX.length, columnWeights.length));
        if (rowWeights != null)
            System.arraycopy(rowWeights, 0, r.weightY, 0, Math.min(r.weightY.length, rowWeights.length));
        /*
             * Pass #3
             *
             * Distribute the minimun widths and weights:
             */
        nextSize = Integer.MAX_VALUE;
        for (i = 1; i != Integer.MAX_VALUE; i = nextSize, nextSize = Integer.MAX_VALUE) {
            for (compindex = 0; compindex < components.length; compindex++) {
                comp = components[compindex];
                if (!comp.isVisible())
                    continue;
                constraints = lookupConstraints(comp);
                if (constraints.tempWidth == i) {
                    px = constraints.tempX + constraints.tempWidth;
                    /* right column */
                    /*
                         * Figure out if we should use this slave\'s weight.  If the weight
                         * is less than the total weight spanned by the width of the cell,
                         * then discard the weight.  Otherwise split the difference
                         * according to the existing weights.
                         */
                    weight_diff = constraints.weightx;
                    for (k = constraints.tempX; k < px; k++) weight_diff -= r.weightX[k];
                    if (weight_diff > 0.0) {
                        weight = 0.0;
                        for (k = constraints.tempX; k < px; k++) weight += r.weightX[k];
                        for (k = constraints.tempX; weight > 0.0 && k < px; k++) {
                            double wt = r.weightX[k];
                            double dx = (wt * weight_diff) / weight;
                            r.weightX[k] += dx;
                            weight_diff -= dx;
                            weight -= wt;
                        }
                        /* Assign the remainder to the rightmost cell */
                        r.weightX[px - 1] += weight_diff;
                    }
                    /*
                         * Calculate the minWidth array values.
                         * First, figure out how wide the current slave needs to be.
                         * Then, see if it will fit within the current minWidth values.
                         * If it will not fit, add the difference according to the
                         * weightX array.
                         */
                    pixels_diff = constraints.minWidth + constraints.ipadx + constraints.insets.left + constraints.insets.right;
                    for (k = constraints.tempX; k < px; k++) pixels_diff -= r.minWidth[k];
                    if (pixels_diff > 0) {
                        weight = 0.0;
                        for (k = constraints.tempX; k < px; k++) weight += r.weightX[k];
                        for (k = constraints.tempX; weight > 0.0 && k < px; k++) {
                            double wt = r.weightX[k];
                            int dx = (int) ((wt * ((double) pixels_diff)) / weight);
                            r.minWidth[k] += dx;
                            pixels_diff -= dx;
                            weight -= wt;
                        }
                        /* Any leftovers go into the rightmost cell */
                        r.minWidth[px - 1] += pixels_diff;
                    }
                } else if (constraints.tempWidth > i && constraints.tempWidth < nextSize)
                    nextSize = constraints.tempWidth;
                if (constraints.tempHeight == i) {
                    py = constraints.tempY + constraints.tempHeight;
                    /* bottom row */
                    /*
                         * Figure out if we should use this slave's weight.  If the weight
                         * is less than the total weight spanned by the height of the cell,
                         * then discard the weight.  Otherwise split it the difference
                         * according to the existing weights.
                         */
                    weight_diff = constraints.weighty;
                    for (k = constraints.tempY; k < py; k++) weight_diff -= r.weightY[k];
                    if (weight_diff > 0.0) {
                        weight = 0.0;
                        for (k = constraints.tempY; k < py; k++) weight += r.weightY[k];
                        for (k = constraints.tempY; weight > 0.0 && k < py; k++) {
                            double wt = r.weightY[k];
                            double dy = (wt * weight_diff) / weight;
                            r.weightY[k] += dy;
                            weight_diff -= dy;
                            weight -= wt;
                        }
                        /* Assign the remainder to the bottom cell */
                        r.weightY[py - 1] += weight_diff;
                    }
                    /*
                         * Calculate the minHeight array values.
                         * First, figure out how tall the current slave needs to be.
                         * Then, see if it will fit within the current minHeight values.
                         * If it will not fit, add the difference according to the
                         * weightY array.
                         */
                    pixels_diff = -1;
                    if (hasBaseline) {
                        switch(constraints.anchor) {
                            case GridBagConstraints.BASELINE:
                            case GridBagConstraints.BASELINE_LEADING:
                            case GridBagConstraints.BASELINE_TRAILING:
                                if (constraints.ascent >= 0) {
                                    if (constraints.tempHeight == 1) {
                                        pixels_diff = maxAscent[constraints.tempY] + maxDescent[constraints.tempY];
                                    } else if (constraints.baselineResizeBehavior != Component.BaselineResizeBehavior.CONSTANT_DESCENT) {
                                        pixels_diff = maxAscent[constraints.tempY] + constraints.descent;
                                    } else {
                                        pixels_diff = constraints.ascent + maxDescent[constraints.tempY + constraints.tempHeight - 1];
                                    }
                                }
                                break;
                            case GridBagConstraints.ABOVE_BASELINE:
                            case GridBagConstraints.ABOVE_BASELINE_LEADING:
                            case GridBagConstraints.ABOVE_BASELINE_TRAILING:
                                pixels_diff = constraints.insets.top + constraints.minHeight + constraints.ipady + maxDescent[constraints.tempY];
                                break;
                            case GridBagConstraints.BELOW_BASELINE:
                            case GridBagConstraints.BELOW_BASELINE_LEADING:
                            case GridBagConstraints.BELOW_BASELINE_TRAILING:
                                pixels_diff = maxAscent[constraints.tempY] + constraints.minHeight + constraints.insets.bottom + constraints.ipady;
                                break;
                        }
                    }
                    if (pixels_diff == -1) {
                        pixels_diff = constraints.minHeight + constraints.ipady + constraints.insets.top + constraints.insets.bottom;
                    }
                    for (k = constraints.tempY; k < py; k++) pixels_diff -= r.minHeight[k];
                    if (pixels_diff > 0) {
                        weight = 0.0;
                        for (k = constraints.tempY; k < py; k++) weight += r.weightY[k];
                        for (k = constraints.tempY; weight > 0.0 && k < py; k++) {
                            double wt = r.weightY[k];
                            int dy = (int) ((wt * ((double) pixels_diff)) / weight);
                            r.minHeight[k] += dy;
                            pixels_diff -= dy;
                            weight -= wt;
                        }
                        /* Any leftovers go into the bottom cell */
                        r.minHeight[py - 1] += pixels_diff;
                    }
                } else if (constraints.tempHeight > i && constraints.tempHeight < nextSize)
                    nextSize = constraints.tempHeight;
            }
        }
        return r;
    }
}