/**
 * Returns an array of glyph positions for the specified glyphs.
 * This method is used for convenience and performance when
 * processing glyph positions.
 * If no array is passed in, a new array is created.
 * Even numbered array entries beginning with position zero are the X
 * coordinates of the glyph numbered <code>beginGlyphIndex + position/2</code>.
 * Odd numbered array entries beginning with position one are the Y
 * coordinates of the glyph numbered <code>beginGlyphIndex + (position-1)/2</code>.
 * If <code>beginGlyphIndex</code> equals the number of of glyphs in
 * this <code>GlyphVector</code>, this method gets the position after
 * the last glyph and this position is used to define the advance of
 * the entire <code>GlyphVector</code>.
 * @param beginGlyphIndex the index at which to begin retrieving
 *   glyph positions
 * @param numEntries the number of glyphs to retrieve
 * @param positionReturn the array that receives the glyph positions
 *   and is then returned.
 * @return an array of glyph positions specified by
 *  <code>beginGlyphIndex</code> and <code>numEntries</code>.
 * @throws IllegalArgumentException if <code>numEntries</code> is
 *   less than 0
 * @throws IndexOutOfBoundsException if <code>beginGlyphIndex</code>
 *   is less than 0
 * @throws IndexOutOfBoundsException if the sum of
 *   <code>beginGlyphIndex</code> and <code>numEntries</code>
 *   is greater than the number of glyphs in this
 *   <code>GlyphVector</code> plus one
 */
public abstract float[] getGlyphPositions(int beginGlyphIndex, int numEntries, float[] positionReturn);