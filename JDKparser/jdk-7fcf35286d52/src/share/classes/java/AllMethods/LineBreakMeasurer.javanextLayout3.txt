/**
 * Returns the next layout, and updates the current position.
 *
 * @param wrappingWidth the maximum visible advance permitted
 *    for the text in the next layout
 * @param offsetLimit the first character that can not be
 *    included in the next layout, even if the text after the limit
 *    would fit within the wrapping width; <code>offsetLimit</code>
 *    must be greater than the current position
 * @param requireNextWord if <code>true</code>, and if the entire word
 *    at the current position does not fit within the wrapping width,
 *    <code>null</code> is returned. If <code>false</code>, a valid
 *    layout is returned that includes at least the character at the
 *    current position
 * @return a <code>TextLayout</code>, beginning at the current
 *    position, that represents the next line fitting within
 *    <code>wrappingWidth</code>.  If the current position is at the end
 *    of the text used by this <code>LineBreakMeasurer</code>,
 *    <code>null</code> is returned
 */
public TextLayout nextLayout(float wrappingWidth, int offsetLimit, boolean requireNextWord) {
    if (pos < limit) {
        int layoutLimit = nextOffset(wrappingWidth, offsetLimit, requireNextWord);
        if (layoutLimit == pos) {
            return null;
        }
        TextLayout result = measurer.getLayout(pos, layoutLimit);
        pos = layoutLimit;
        return result;
    } else {
        return null;
    }
}