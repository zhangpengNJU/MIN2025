/**
 * The group's <code>inactiveObject</code> method is called
 * indirectly via a call to the <code>Activatable.inactive</code>
 * method. A remote object implementation must call
 * <code>Activatable</code>'s <code>inactive</code> method when
 * that object deactivates (the object deems that it is no longer
 * active). If the object does not call
 * <code>Activatable.inactive</code> when it deactivates, the
 * object will never be garbage collected since the group keeps
 * strong references to the objects it creates.
 *
 * <p>The group's <code>inactiveObject</code> method unexports the
 * remote object from the RMI runtime so that the object can no
 * longer receive incoming RMI calls. An object will only be unexported
 * if the object has no pending or executing calls.
 * The subclass of <code>ActivationGroup</code> must override this
 * method and unexport the object.
 *
 * <p>After removing the object from the RMI runtime, the group
 * must inform its <code>ActivationMonitor</code> (via the monitor's
 * <code>inactiveObject</code> method) that the remote object is
 * not currently active so that the remote object will be
 * re-activated by the activator upon a subsequent activation
 * request.
 *
 * <p>This method simply informs the group's monitor that the object
 * is inactive.  It is up to the concrete subclass of ActivationGroup
 * to fulfill the additional requirement of unexporting the object. <p>
 *
 * @param id the object's activation identifier
 * @return true if the object was successfully deactivated; otherwise
 *         returns false.
 * @exception UnknownObjectException if object is unknown (may already
 * be inactive)
 * @exception RemoteException if call informing monitor fails
 * @exception ActivationException if group is inactive
 * @since 1.2
 */
public boolean inactiveObject(ActivationID id) throws ActivationException, UnknownObjectException, RemoteException {
    getMonitor().inactiveObject(id);
    return true;
}