/**
 * Returns a {@link Collection} view of the values contained in this map.
 * <p>The collection's iterator returns the values in ascending order
 * of the corresponding keys. The collections's spliterator additionally
 * reports {@link Spliterator#CONCURRENT}, {@link Spliterator#NONNULL} and
 * {@link Spliterator#ORDERED}, with an encounter order that is ascending
 * order of the corresponding keys.
 *
 * <p>The collection is backed by the map, so changes to the map are
 * reflected in the collection, and vice-versa.  The collection
 * supports element removal, which removes the corresponding
 * mapping from the map, via the {@code Iterator.remove},
 * {@code Collection.remove}, {@code removeAll},
 * {@code retainAll} and {@code clear} operations.  It does not
 * support the {@code add} or {@code addAll} operations.
 *
 * <p>The view's iterators and spliterators are
 * <a href="package-summary.html#Weakly"><i>weakly consistent</i></a>.
 */
public Collection<V> values() {
    Values<V> vs = values;
    return (vs != null) ? vs : (values = new Values<V>(this));
}