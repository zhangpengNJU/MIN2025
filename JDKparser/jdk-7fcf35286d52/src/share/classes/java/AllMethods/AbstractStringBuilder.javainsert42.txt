/**
 * Inserts a subsequence of the specified {@code CharSequence} into
 * this sequence.
 * <p>
 * The subsequence of the argument {@code s} specified by
 * {@code start} and {@code end} are inserted,
 * in order, into this sequence at the specified destination offset, moving
 * up any characters originally above that position. The length of this
 * sequence is increased by {@code end - start}.
 * <p>
 * The character at index <i>k</i> in this sequence becomes equal to:
 * <ul>
 * <li>the character at index <i>k</i> in this sequence, if
 * <i>k</i> is less than {@code dstOffset}
 * <li>the character at index <i>k</i>{@code +start-dstOffset} in
 * the argument {@code s}, if <i>k</i> is greater than or equal to
 * {@code dstOffset} but is less than {@code dstOffset+end-start}
 * <li>the character at index <i>k</i>{@code -(end-start)} in this
 * sequence, if <i>k</i> is greater than or equal to
 * {@code dstOffset+end-start}
 * </ul><p>
 * The {@code dstOffset} argument must be greater than or equal to
 * {@code 0}, and less than or equal to the {@linkplain #length() length}
 * of this sequence.
 * <p>The start argument must be nonnegative, and not greater than
 * {@code end}.
 * <p>The end argument must be greater than or equal to
 * {@code start}, and less than or equal to the length of s.
 *
 * <p>If {@code s} is {@code null}, then this method inserts
 * characters as if the s parameter was a sequence containing the four
 * characters {@code "null"}.
 *
 * @param      dstOffset   the offset in this sequence.
 * @param      s       the sequence to be inserted.
 * @param      start   the starting index of the subsequence to be inserted.
 * @param      end     the end index of the subsequence to be inserted.
 * @return     a reference to this object.
 * @throws     IndexOutOfBoundsException  if {@code dstOffset}
 *             is negative or greater than {@code this.length()}, or
 *              {@code start} or {@code end} are negative, or
 *              {@code start} is greater than {@code end} or
 *              {@code end} is greater than {@code s.length()}
 */
public AbstractStringBuilder insert(int dstOffset, CharSequence s, int start, int end) {
    if (s == null)
        s = "null";
    if ((dstOffset < 0) || (dstOffset > this.length()))
        throw new IndexOutOfBoundsException("dstOffset " + dstOffset);
    if ((start < 0) || (end < 0) || (start > end) || (end > s.length()))
        throw new IndexOutOfBoundsException("start " + start + ", end " + end + ", s.length() " + s.length());
    int len = end - start;
    ensureCapacityInternal(count + len);
    System.arraycopy(value, dstOffset, value, dstOffset + len, count - dstOffset);
    for (int i = start; i < end; i++) value[dstOffset++] = s.charAt(i);
    count += len;
    return this;
}