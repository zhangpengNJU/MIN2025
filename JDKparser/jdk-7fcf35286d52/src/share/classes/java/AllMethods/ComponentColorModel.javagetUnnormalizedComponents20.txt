/**
 * Returns an array of all of the color/alpha components in unnormalized
 * form, given a normalized component array.  Unnormalized components
 * are unsigned integral values between 0 and 2<sup>n</sup> - 1, where
 * n is the number of bits for a particular component.  Normalized
 * components are float values between a per component minimum and
 * maximum specified by the <code>ColorSpace</code> object for this
 * <code>ColorModel</code>.  An <code>IllegalArgumentException</code>
 * will be thrown if color component values for this
 * <code>ColorModel</code> are not conveniently representable in the
 * unnormalized form.  If the
 * <code>components</code> array is <code>null</code>, a new array
 * will be allocated.  The <code>components</code> array will
 * be returned.  Color/alpha components are stored in the
 * <code>components</code> array starting at <code>offset</code> (even
 * if the array is allocated by this method). An
 * <code>ArrayIndexOutOfBoundsException</code> is thrown if the
 * <code>components</code> array is not <code>null</code> and is not
 * large enough to hold all the color and alpha
 * components (starting at <code>offset</code>).  An
 * <code>IllegalArgumentException</code> is thrown if the
 * <code>normComponents</code> array is not large enough to hold
 * all the color and alpha components starting at
 * <code>normOffset</code>.
 * @param normComponents an array containing normalized components
 * @param normOffset the offset into the <code>normComponents</code>
 * array at which to start retrieving normalized components
 * @param components an array that receives the components from
 * <code>normComponents</code>
 * @param offset the index into <code>components</code> at which to
 * begin storing normalized components from
 * <code>normComponents</code>
 * @return an array containing unnormalized color and alpha
 * components.
 * @throws IllegalArgumentException If this
 * <CODE>ComponentColorModel</CODE> does not support the unnormalized form
 * @throws IllegalArgumentException if the length of
 *          <code>normComponents</code> minus <code>normOffset</code>
 *          is less than <code>numComponents</code>
 */
public int[] getUnnormalizedComponents(float[] normComponents, int normOffset, int[] components, int offset) {
    if (needScaleInit) {
        initScale();
    }
    if (noUnnorm) {
        throw new IllegalArgumentException("This ColorModel does not support the unnormalized form");
    }
    return super.getUnnormalizedComponents(normComponents, normOffset, components, offset);
}