/**
 * Returns the platform MXBean implementing
 * the given {@code mxbeanInterface} which is specified
 * to have one single instance in the Java virtual machine.
 * This method may return {@code null} if the management interface
 * is not implemented in the Java virtual machine (for example,
 * a Java virtual machine with no compilation system does not
 * implement {@link CompilationMXBean});
 * otherwise, this method is equivalent to calling:
 * <pre>
 *    {@link #getPlatformMXBeans(Class)
 *      getPlatformMXBeans(mxbeanInterface)}.get(0);
 * </pre>
 *
 * @param mxbeanInterface a management interface for a platform
 *     MXBean with one single instance in the Java virtual machine
 *     if implemented.
 * @param <T> an {@code mxbeanInterface} type parameter
 *
 * @return the platform MXBean that implements
 * {@code mxbeanInterface}, or {@code null} if not exist.
 *
 * @throws IllegalArgumentException if {@code mxbeanInterface}
 * is not a platform management interface or
 * not a singleton platform MXBean.
 *
 * @since 1.7
 */
public static <T extends PlatformManagedObject> T getPlatformMXBean(Class<T> mxbeanInterface) {
    PlatformComponent pc = PlatformComponent.getPlatformComponent(mxbeanInterface);
    if (pc == null) {
        T mbean = ExtendedPlatformComponent.getMXBean(mxbeanInterface);
        if (mbean != null) {
            return mbean;
        }
        throw new IllegalArgumentException(mxbeanInterface.getName() + " is not a platform management interface");
    }
    if (!pc.isSingleton())
        throw new IllegalArgumentException(mxbeanInterface.getName() + " can have zero or more than one instances");
    return pc.getSingletonMXBean(mxbeanInterface);
}