/**
 * Returns an array containing {@code Method} objects reflecting all the
 * public methods of the class or interface represented by this {@code
 * Class} object, including those declared by the class or interface and
 * those inherited from superclasses and superinterfaces.
 *
 * <p> If this {@code Class} object represents a type that has multiple
 * public methods with the same name and parameter types, but different
 * return types, then the returned array has a {@code Method} object for
 * each such method.
 *
 * <p> If this {@code Class} object represents a type with a class
 * initialization method {@code <clinit>}, then the returned array does
 * <em>not</em> have a corresponding {@code Method} object.
 *
 * <p> If this {@code Class} object represents an array type, then the
 * returned array has a {@code Method} object for each of the public
 * methods inherited by the array type from {@code Object}. It does not
 * contain a {@code Method} object for {@code clone()}.
 *
 * <p> If this {@code Class} object represents an interface then the
 * returned array does not contain any implicitly declared methods from
 * {@code Object}. Therefore, if no methods are explicitly declared in
 * this interface or any of its superinterfaces then the returned array
 * has length 0. (Note that a {@code Class} object which represents a class
 * always has public methods, inherited from {@code Object}.)
 *
 * <p> If this {@code Class} object represents a primitive type or void,
 * then the returned array has length 0.
 *
 * <p> Static methods declared in superinterfaces of the class or interface
 * represented by this {@code Class} object are not considered members of
 * the class or interface.
 *
 * <p> The elements in the returned array are not sorted and are not in any
 * particular order.
 *
 * @return the array of {@code Method} objects representing the
 *         public methods of this class
 * @throws SecurityException
 *         If a security manager, <i>s</i>, is present and
 *         the caller's class loader is not the same as or an
 *         ancestor of the class loader for the current class and
 *         invocation of {@link SecurityManager#checkPackageAccess
 *         s.checkPackageAccess()} denies access to the package
 *         of this class.
 *
 * @jls 8.2 Class Members
 * @jls 8.4 Method Declarations
 * @since JDK1.1
 */
@CallerSensitive
public Method[] getMethods() throws SecurityException {
    checkMemberAccess(Member.PUBLIC, Reflection.getCallerClass(), true);
    return copyMethods(privateGetPublicMethods());
}