/**
 * Performs a single-input/single-output operation on a
 * <CODE>BufferedImage</CODE>.
 * If the color models for the two images do not match, a color
 * conversion into the destination color model is performed.
 * If the destination image is null,
 * a <CODE>BufferedImage</CODE> with an appropriate <CODE>ColorModel</CODE>
 * is created.
 * <p>
 * An <CODE>IllegalArgumentException</CODE> may be thrown if the source
 * and/or destination image is incompatible with the types of images       $
 * allowed by the class implementing this filter.
 *
 * @param src The <CODE>BufferedImage</CODE> to be filtered
 * @param dest The <CODE>BufferedImage</CODE> in which to store the results$
 *
 * @return The filtered <CODE>BufferedImage</CODE>.
 *
 * @throws IllegalArgumentException If the source and/or destination
 * image is not compatible with the types of images allowed by the class
 * implementing this filter.
 */
public BufferedImage filter(BufferedImage src, BufferedImage dest);