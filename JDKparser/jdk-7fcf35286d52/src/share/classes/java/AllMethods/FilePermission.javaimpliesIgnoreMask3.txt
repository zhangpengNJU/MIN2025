/**
 * Checks if the Permission's actions are a proper subset of the
 * this object's actions. Returns the effective mask iff the
 * this FilePermission's path also implies that FilePermission's path.
 *
 * @param that the FilePermission to check against.
 * @return the effective mask
 */
boolean impliesIgnoreMask(FilePermission that) {
    if (this == that) {
        return true;
    }
    if (allFiles) {
        return true;
    }
    if (this.invalid || that.invalid) {
        return false;
    }
    if (that.allFiles) {
        return false;
    }
    if (this.directory) {
        if (this.recursive) {
            // make sure that.path is longer then path so
            // something like /foo/- does not imply /foo
            if (that.directory) {
                return (that.cpath.length() >= this.cpath.length()) && that.cpath.startsWith(this.cpath);
            } else {
                return ((that.cpath.length() > this.cpath.length()) && that.cpath.startsWith(this.cpath));
            }
        } else {
            if (that.directory) {
                // if the permission passed in is a directory
                // specification, make sure that a non-recursive
                // permission (i.e., this object) can't imply a recursive
                // permission.
                if (that.recursive)
                    return false;
                else
                    return (this.cpath.equals(that.cpath));
            } else {
                int last = that.cpath.lastIndexOf(File.separatorChar);
                if (last == -1)
                    return false;
                else {
                    // this.cpath.equals(that.cpath.substring(0, last+1));
                    // Use regionMatches to avoid creating new string
                    return (this.cpath.length() == (last + 1)) && this.cpath.regionMatches(0, that.cpath, 0, last + 1);
                }
            }
        }
    } else if (that.directory) {
        // if this is NOT recursive/wildcarded,
        // do not let it imply a recursive/wildcarded permission
        return false;
    } else {
        return (this.cpath.equals(that.cpath));
    }
}