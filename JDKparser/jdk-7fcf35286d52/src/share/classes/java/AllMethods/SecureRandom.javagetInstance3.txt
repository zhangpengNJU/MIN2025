/**
 * Returns a SecureRandom object that implements the specified
 * Random Number Generator (RNG) algorithm.
 *
 * <p> A new SecureRandom object encapsulating the
 * SecureRandomSpi implementation from the specified Provider
 * object is returned.  Note that the specified Provider object
 * does not have to be registered in the provider list.
 *
 * <p> The returned SecureRandom object has not been seeded.  To seed the
 * returned object, call the {@code setSeed} method.
 * If {@code setSeed} is not called, the first call to
 * {@code nextBytes} will force the SecureRandom object to seed itself.
 * This self-seeding will not occur if {@code setSeed} was
 * previously called.
 *
 * @param algorithm the name of the RNG algorithm.
 * See the SecureRandom section in the <a href=
 * "{@docRoot}/../technotes/guides/security/StandardNames.html#SecureRandom">
 * Java Cryptography Architecture Standard Algorithm Name Documentation</a>
 * for information about standard RNG algorithm names.
 *
 * @param provider the provider.
 *
 * @return the new SecureRandom object.
 *
 * @exception NoSuchAlgorithmException if a SecureRandomSpi
 *          implementation for the specified algorithm is not available
 *          from the specified Provider object.
 *
 * @exception IllegalArgumentException if the specified provider is null.
 *
 * @see Provider
 *
 * @since 1.4
 */
public static SecureRandom getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException {
    Instance instance = GetInstance.getInstance("SecureRandom", SecureRandomSpi.class, algorithm, provider);
    return new SecureRandom((SecureRandomSpi) instance.impl, instance.provider, algorithm);
}