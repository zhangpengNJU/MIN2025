/**
 * Returns the index within this {@code String} that is
 * offset from the given {@code index} by
 * {@code codePointOffset} code points. Unpaired surrogates
 * within the text range given by {@code index} and
 * {@code codePointOffset} count as one code point each.
 *
 * @param index the index to be offset
 * @param codePointOffset the offset in code points
 * @return the index within this {@code String}
 * @exception IndexOutOfBoundsException if {@code index}
 *   is negative or larger then the length of this
 *   {@code String}, or if {@code codePointOffset} is positive
 *   and the substring starting with {@code index} has fewer
 *   than {@code codePointOffset} code points,
 *   or if {@code codePointOffset} is negative and the substring
 *   before {@code index} has fewer than the absolute value
 *   of {@code codePointOffset} code points.
 * @since 1.5
 */
public int offsetByCodePoints(int index, int codePointOffset) {
    if (index < 0 || index > value.length) {
        throw new IndexOutOfBoundsException();
    }
    return Character.offsetByCodePointsImpl(value, 0, value.length, index, codePointOffset);
}