/**
 * Returns an array of unnormalized color/alpha components given a pixel
 * in this <CODE>ColorModel</CODE>.
 * An IllegalArgumentException is thrown if the component value for this
 * <CODE>ColorModel</CODE> is not conveniently representable in the
 * unnormalized form.  Color/alpha components are stored
 * in the <CODE>components</CODE> array starting at <CODE>offset</CODE>
 * (even if the array is allocated by this method).
 *
 * @param pixel The pixel value specified as an integer.
 * @param components An integer array in which to store the unnormalized
 * color/alpha components. If the <CODE>components</CODE> array is null,
 * a new array is allocated.
 * @param offset An offset into the <CODE>components</CODE> array.
 *
 * @return The components array.
 *
 * @throws IllegalArgumentException If there is more than one
 * component in this <CODE>ColorModel</CODE>.
 * @throws IllegalArgumentException If this
 * <CODE>ColorModel</CODE> does not support the unnormalized form
 * @throws ArrayIndexOutOfBoundsException If the <CODE>components</CODE>
 * array is not null and is not large enough to hold all the color and
 * alpha components (starting at offset).
 */
public int[] getComponents(int pixel, int[] components, int offset) {
    if (numComponents > 1) {
        throw new IllegalArgumentException("More than one component per pixel");
    }
    if (needScaleInit) {
        initScale();
    }
    if (noUnnorm) {
        throw new IllegalArgumentException("This ColorModel does not support the unnormalized form");
    }
    if (components == null) {
        components = new int[offset + 1];
    }
    components[offset + 0] = (pixel & ((1 << nBits[0]) - 1));
    return components;
}