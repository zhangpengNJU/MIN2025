/**
 * Returns a composed operator that first applies the {@code before}
 * operator to its input, and then applies this operator to the result.
 * If evaluation of either operator throws an exception, it is relayed to
 * the caller of the composed operator.
 *
 * @param before the operator to apply before this operator is applied
 * @return a composed operator that first applies the {@code before}
 * operator and then applies this operator
 * @throws NullPointerException if before is null
 *
 * @see #andThen(IntUnaryOperator)
 */
default IntUnaryOperator compose(IntUnaryOperator before) {
    Objects.requireNonNull(before);
    return (int v) -> applyAsInt(before.applyAsInt(v));
}