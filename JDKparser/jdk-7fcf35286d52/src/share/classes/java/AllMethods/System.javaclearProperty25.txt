/**
 * Removes the system property indicated by the specified key.
 * <p>
 * First, if a security manager exists, its
 * <code>SecurityManager.checkPermission</code> method
 * is called with a <code>PropertyPermission(key, "write")</code>
 * permission. This may result in a SecurityException being thrown.
 * If no exception is thrown, the specified property is removed.
 * <p>
 *
 * @param      key   the name of the system property to be removed.
 * @return     the previous string value of the system property,
 *             or <code>null</code> if there was no property with that key.
 *
 * @exception  SecurityException  if a security manager exists and its
 *             <code>checkPropertyAccess</code> method doesn't allow
 *              access to the specified system property.
 * @exception  NullPointerException if <code>key</code> is
 *             <code>null</code>.
 * @exception  IllegalArgumentException if <code>key</code> is empty.
 * @see        #getProperty
 * @see        #setProperty
 * @see        java.util.Properties
 * @see        java.lang.SecurityException
 * @see        java.lang.SecurityManager#checkPropertiesAccess()
 * @since 1.5
 */
public static String clearProperty(String key) {
    checkKey(key);
    SecurityManager sm = getSecurityManager();
    if (sm != null) {
        sm.checkPermission(new PropertyPermission(key, "write"));
    }
    return (String) props.remove(key);
}