/**
 *  Obtains an instance of {@code ZonedDateTime} from a local date-time
 *  using the preferred offset if possible.
 *  <p>
 *  The local date-time is resolved to a single instant on the time-line.
 *  This is achieved by finding a valid offset from UTC/Greenwich for the local
 *  date-time as defined by the {@link ZoneRules rules} of the zone ID.
 * <p>
 *  In most cases, there is only one valid offset for a local date-time.
 *  In the case of an overlap, where clocks are set back, there are two valid offsets.
 *  If the preferred offset is one of the valid offsets then it is used.
 *  Otherwise the earlier valid offset is used, typically corresponding to "summer".
 *  <p>
 *  In the case of a gap, where clocks jump forward, there is no valid offset.
 *  Instead, the local date-time is adjusted to be later by the length of the gap.
 *  For a typical one hour daylight savings change, the local date-time will be
 *  moved one hour later into the offset typically corresponding to "summer".
 *
 *  @param localDateTime  the local date-time, not null
 *  @param zone  the time-zone, not null
 *  @param preferredOffset  the zone offset, null if no preference
 *  @return the zoned date-time, not null
 */
public static ZonedDateTime ofLocal(LocalDateTime localDateTime, ZoneId zone, ZoneOffset preferredOffset) {
    Objects.requireNonNull(localDateTime, "localDateTime");
    Objects.requireNonNull(zone, "zone");
    if (zone instanceof ZoneOffset) {
        return new ZonedDateTime(localDateTime, (ZoneOffset) zone, zone);
    }
    ZoneRules rules = zone.getRules();
    List<ZoneOffset> validOffsets = rules.getValidOffsets(localDateTime);
    ZoneOffset offset;
    if (validOffsets.size() == 1) {
        offset = validOffsets.get(0);
    } else if (validOffsets.size() == 0) {
        ZoneOffsetTransition trans = rules.getTransition(localDateTime);
        localDateTime = localDateTime.plusSeconds(trans.getDuration().getSeconds());
        offset = trans.getOffsetAfter();
    } else {
        if (preferredOffset != null && validOffsets.contains(preferredOffset)) {
            offset = preferredOffset;
        } else {
            // protect against bad ZoneRules
            offset = Objects.requireNonNull(validOffsets.get(0), "offset");
        }
    }
    return new ZonedDateTime(localDateTime, offset, zone);
}