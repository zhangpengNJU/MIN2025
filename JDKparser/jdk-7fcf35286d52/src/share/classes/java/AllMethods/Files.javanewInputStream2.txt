// -- File contents --
/**
 * Opens a file, returning an input stream to read from the file. The stream
 * will not be buffered, and is not required to support the {@link
 * InputStream#mark mark} or {@link InputStream#reset reset} methods. The
 * stream will be safe for access by multiple concurrent threads. Reading
 * commences at the beginning of the file. Whether the returned stream is
 * <i>asynchronously closeable</i> and/or <i>interruptible</i> is highly
 * file system provider specific and therefore not specified.
 *
 * <p> The {@code options} parameter determines how the file is opened.
 * If no options are present then it is equivalent to opening the file with
 * the {@link StandardOpenOption#READ READ} option. In addition to the {@code
 * READ} option, an implementation may also support additional implementation
 * specific options.
 *
 * @param   path
 *          the path to the file to open
 * @param   options
 *          options specifying how the file is opened
 *
 * @return  a new input stream
 *
 * @throws  IllegalArgumentException
 *          if an invalid combination of options is specified
 * @throws  UnsupportedOperationException
 *          if an unsupported option is specified
 * @throws  IOException
 *          if an I/O error occurs
 * @throws  SecurityException
 *          In the case of the default provider, and a security manager is
 *          installed, the {@link SecurityManager#checkRead(String) checkRead}
 *          method is invoked to check read access to the file.
 */
public static InputStream newInputStream(Path path, OpenOption... options) throws IOException {
    return provider(path).newInputStream(path, options);
}