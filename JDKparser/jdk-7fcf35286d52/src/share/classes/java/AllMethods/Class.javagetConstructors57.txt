/**
 * Returns an array containing {@code Constructor} objects reflecting
 * all the public constructors of the class represented by this
 * {@code Class} object.  An array of length 0 is returned if the
 * class has no public constructors, or if the class is an array class, or
 * if the class reflects a primitive type or void.
 *
 * Note that while this method returns an array of {@code
 * Constructor<T>} objects (that is an array of constructors from
 * this class), the return type of this method is {@code
 * Constructor<?>[]} and <em>not</em> {@code Constructor<T>[]} as
 * might be expected.  This less informative return type is
 * necessary since after being returned from this method, the
 * array could be modified to hold {@code Constructor} objects for
 * different classes, which would violate the type guarantees of
 * {@code Constructor<T>[]}.
 *
 * @return the array of {@code Constructor} objects representing the
 *         public constructors of this class
 * @throws SecurityException
 *         If a security manager, <i>s</i>, is present and
 *         the caller's class loader is not the same as or an
 *         ancestor of the class loader for the current class and
 *         invocation of {@link SecurityManager#checkPackageAccess
 *         s.checkPackageAccess()} denies access to the package
 *         of this class.
 *
 * @since JDK1.1
 */
@CallerSensitive
public Constructor<?>[] getConstructors() throws SecurityException {
    checkMemberAccess(Member.PUBLIC, Reflection.getCallerClass(), true);
    return copyConstructors(privateGetDeclaredConstructors(true));
}