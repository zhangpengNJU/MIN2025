/**
 * Returns a new WritableRaster which shares all or part of this
 * WritableRaster's DataBuffer.  The new WritableRaster will
 * possess a reference to the current WritableRaster, accessible
 * through its getParent() and getWritableParent() methods.
 *
 * <p> The parentX, parentY, width and height parameters form a
 * Rectangle in this WritableRaster's coordinate space, indicating
 * the area of pixels to be shared.  An error will be thrown if
 * this Rectangle is not contained with the bounds of the current
 * WritableRaster.
 *
 * <p> The new WritableRaster may additionally be translated to a
 * different coordinate system for the plane than that used by the current
 * WritableRaster.  The childMinX and childMinY parameters give
 * the new (x, y) coordinate of the upper-left pixel of the
 * returned WritableRaster; the coordinate (childMinX, childMinY)
 * in the new WritableRaster will map to the same pixel as the
 * coordinate (parentX, parentY) in the current WritableRaster.
 *
 * <p> The new WritableRaster may be defined to contain only a
 * subset of the bands of the current WritableRaster, possibly
 * reordered, by means of the bandList parameter.  If bandList is
 * null, it is taken to include all of the bands of the current
 * WritableRaster in their current order.
 *
 * <p> To create a new WritableRaster that contains a subregion of
 * the current WritableRaster, but shares its coordinate system
 * and bands, this method should be called with childMinX equal to
 * parentX, childMinY equal to parentY, and bandList equal to
 * null.
 *
 * @param parentX    X coordinate of the upper left corner in this
 *                   WritableRaster's coordinates.
 * @param parentY    Y coordinate of the upper left corner in this
 *                   WritableRaster's coordinates.
 * @param w          Width of the region starting at (parentX, parentY).
 * @param h          Height of the region starting at (parentX, parentY).
 * @param childMinX  X coordinate of the upper left corner of
 *                   the returned WritableRaster.
 * @param childMinY  Y coordinate of the upper left corner of
 *                   the returned WritableRaster.
 * @param bandList   Array of band indices, or null to use all bands.
 * @return a <code>WritableRaster</code> sharing all or part of the
 *         <code>DataBuffer</code> of this <code>WritableRaster</code>.
 * @exception RasterFormatException if the subregion is outside of the
 *                               raster bounds.
 * @throws RasterFormatException if <code>w</code> or
 *         <code>h</code>
 *         is less than or equal to zero, or computing any of
 *         <code>parentX + w</code>, <code>parentY + h</code>,
 *         <code>childMinX + w</code>, or
 *         <code>childMinY + h</code> results in integer
 *         overflow
 */
public WritableRaster createWritableChild(int parentX, int parentY, int w, int h, int childMinX, int childMinY, int[] bandList) {
    if (parentX < this.minX) {
        throw new RasterFormatException("parentX lies outside raster");
    }
    if (parentY < this.minY) {
        throw new RasterFormatException("parentY lies outside raster");
    }
    if ((parentX + w < parentX) || (parentX + w > this.width + this.minX)) {
        throw new RasterFormatException("(parentX + width) is outside raster");
    }
    if ((parentY + h < parentY) || (parentY + h > this.height + this.minY)) {
        throw new RasterFormatException("(parentY + height) is outside raster");
    }
    SampleModel sm;
    // Note: the SampleModel for the child Raster should have the same
    // width and height as that for the parent, since it represents
    // the physical layout of the pixel data.  The child Raster's width
    // and height represent a "virtual" view of the pixel data, so
    // they may be different than those of the SampleModel.
    if (bandList != null) {
        sm = sampleModel.createSubsetSampleModel(bandList);
    } else {
        sm = sampleModel;
    }
    int deltaX = childMinX - parentX;
    int deltaY = childMinY - parentY;
    return new WritableRaster(sm, getDataBuffer(), new Rectangle(childMinX, childMinY, w, h), new Point(sampleModelTranslateX + deltaX, sampleModelTranslateY + deltaY), this);
}