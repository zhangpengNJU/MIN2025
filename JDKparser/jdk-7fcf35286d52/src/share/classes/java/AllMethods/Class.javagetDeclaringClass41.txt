/**
 * If the class or interface represented by this {@code Class} object
 * is a member of another class, returns the {@code Class} object
 * representing the class in which it was declared.  This method returns
 * null if this class or interface is not a member of any other class.  If
 * this {@code Class} object represents an array class, a primitive
 * type, or void,then this method returns null.
 *
 * @return the declaring class for this class
 * @throws SecurityException
 *         If a security manager, <i>s</i>, is present and the caller's
 *         class loader is not the same as or an ancestor of the class
 *         loader for the declaring class and invocation of {@link
 *         SecurityManager#checkPackageAccess s.checkPackageAccess()}
 *         denies access to the package of the declaring class
 * @since JDK1.1
 */
@CallerSensitive
public Class<?> getDeclaringClass() throws SecurityException {
    final Class<?> candidate = getDeclaringClass0();
    if (candidate != null)
        candidate.checkPackageAccess(ClassLoader.getClassLoader(Reflection.getCallerClass()), true);
    return candidate;
}