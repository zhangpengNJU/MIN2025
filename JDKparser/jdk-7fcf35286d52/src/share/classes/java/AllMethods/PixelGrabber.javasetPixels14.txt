/**
 * The setPixels method is part of the ImageConsumer API which
 * this class must implement to retrieve the pixels.
 * <p>
 * Note: This method is intended to be called by the ImageProducer
 * of the Image whose pixels are being grabbed.  Developers using
 * this class to retrieve pixels from an image should avoid calling
 * this method directly since that operation could result in problems
 * with retrieving the requested pixels.
 * @param srcX the X coordinate of the upper-left corner
 *        of the area of pixels to be set
 * @param srcY the Y coordinate of the upper-left corner
 *        of the area of pixels to be set
 * @param srcW the width of the area of pixels
 * @param srcH the height of the area of pixels
 * @param model the specified <code>ColorModel</code>
 * @param pixels the array of pixels
 * @param srcOff the offset into the pixels array
 * @param srcScan the distance from one row of pixels to the next
 *        in the pixels array
 * @see #getPixels
 */
public void setPixels(int srcX, int srcY, int srcW, int srcH, ColorModel model, byte[] pixels, int srcOff, int srcScan) {
    if (srcY < dstY) {
        int diff = dstY - srcY;
        if (diff >= srcH) {
            return;
        }
        srcOff += srcScan * diff;
        srcY += diff;
        srcH -= diff;
    }
    if (srcY + srcH > dstY + dstH) {
        srcH = (dstY + dstH) - srcY;
        if (srcH <= 0) {
            return;
        }
    }
    if (srcX < dstX) {
        int diff = dstX - srcX;
        if (diff >= srcW) {
            return;
        }
        srcOff += diff;
        srcX += diff;
        srcW -= diff;
    }
    if (srcX + srcW > dstX + dstW) {
        srcW = (dstX + dstW) - srcX;
        if (srcW <= 0) {
            return;
        }
    }
    int dstPtr = dstOff + (srcY - dstY) * dstScan + (srcX - dstX);
    if (intPixels == null) {
        if (bytePixels == null) {
            bytePixels = new byte[dstW * dstH];
            dstScan = dstW;
            dstOff = 0;
            imageModel = model;
        } else if (imageModel != model) {
            convertToRGB();
        }
        if (bytePixels != null) {
            for (int h = srcH; h > 0; h--) {
                System.arraycopy(pixels, srcOff, bytePixels, dstPtr, srcW);
                srcOff += srcScan;
                dstPtr += dstScan;
            }
        }
    }
    if (intPixels != null) {
        int dstRem = dstScan - srcW;
        int srcRem = srcScan - srcW;
        for (int h = srcH; h > 0; h--) {
            for (int w = srcW; w > 0; w--) {
                intPixels[dstPtr++] = model.getRGB(pixels[srcOff++] & 0xff);
            }
            srcOff += srcRem;
            dstPtr += dstRem;
        }
    }
    flags |= ImageObserver.SOMEBITS;
}