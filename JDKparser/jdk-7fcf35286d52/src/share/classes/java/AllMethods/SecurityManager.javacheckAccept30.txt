/**
 * Throws a <code>SecurityException</code> if the
 * calling thread is not permitted to accept a socket connection from
 * the specified host and port number.
 * <p>
 * This method is invoked for the current security manager by the
 * <code>accept</code> method of class <code>ServerSocket</code>.
 * <p>
 * This method calls <code>checkPermission</code> with the
 * <code>SocketPermission(host+":"+port,"accept")</code> permission.
 * <p>
 * If you override this method, then you should make a call to
 * <code>super.checkAccept</code>
 * at the point the overridden method would normally throw an
 * exception.
 *
 * @param      host   the host name of the socket connection.
 * @param      port   the port number of the socket connection.
 * @exception  SecurityException  if the calling thread does not have
 *             permission to accept the connection.
 * @exception  NullPointerException if the <code>host</code> argument is
 *             <code>null</code>.
 * @see        java.net.ServerSocket#accept()
 * @see        #checkPermission(java.security.Permission) checkPermission
 */
public void checkAccept(String host, int port) {
    if (host == null) {
        throw new NullPointerException("host can't be null");
    }
    if (!host.startsWith("[") && host.indexOf(':') != -1) {
        host = "[" + host + "]";
    }
    checkPermission(new SocketPermission(host + ":" + port, SecurityConstants.SOCKET_ACCEPT_ACTION));
}