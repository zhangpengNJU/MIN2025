/**
 * Returns a parameter object for the specified algorithm.
 *
 * <p> This method traverses the list of registered security Providers,
 * starting with the most preferred Provider.
 * A new AlgorithmParameters object encapsulating the
 * AlgorithmParametersSpi implementation from the first
 * Provider that supports the specified algorithm is returned.
 *
 * <p> Note that the list of registered providers may be retrieved via
 * the {@link Security#getProviders() Security.getProviders()} method.
 *
 * <p> The returned parameter object must be initialized via a call to
 * {@code init}, using an appropriate parameter specification or
 * parameter encoding.
 *
 * @param algorithm the name of the algorithm requested.
 * See the AlgorithmParameters section in the <a href=
 * "{@docRoot}/../technotes/guides/security/StandardNames.html#AlgorithmParameters">
 * Java Cryptography Architecture Standard Algorithm Name Documentation</a>
 * for information about standard algorithm names.
 *
 * @return the new parameter object.
 *
 * @exception NoSuchAlgorithmException if no Provider supports an
 *          AlgorithmParametersSpi implementation for the
 *          specified algorithm.
 *
 * @see Provider
 */
public static AlgorithmParameters getInstance(String algorithm) throws NoSuchAlgorithmException {
    try {
        Object[] objs = Security.getImpl(algorithm, "AlgorithmParameters", (String) null);
        return new AlgorithmParameters((AlgorithmParametersSpi) objs[0], (Provider) objs[1], algorithm);
    } catch (NoSuchProviderException e) {
        throw new NoSuchAlgorithmException(algorithm + " not found");
    }
}