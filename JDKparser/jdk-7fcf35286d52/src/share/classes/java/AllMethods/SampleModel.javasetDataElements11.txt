/**
 * Sets the data for a rectangle of pixels in the specified DataBuffer
 * from a primitive array of type TransferType.  For image data supported
 * by the Java 2D API, this will be one of DataBuffer.TYPE_BYTE,
 * DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT,
 * DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.  Data in the array
 * may be in a packed format, thus increasing efficiency for data
 * transfers.
 * <p>
 * The following code illustrates transferring data for a rectangular
 * region of pixels from
 * DataBuffer <code>db1</code>, whose storage layout is described by
 * SampleModel <code>sm1</code>, to DataBuffer <code>db2</code>, whose
 * storage layout is described by SampleModel <code>sm2</code>.
 * The transfer will generally be more efficient than using
 * getPixels/setPixels.
 * <pre>
 *       SampleModel sm1, sm2;
 *       DataBuffer db1, db2;
 *       sm2.setDataElements(x, y, w, h, sm1.getDataElements(x, y, w, h,
 *                           null, db1), db2);
 * </pre>
 * Using getDataElements/setDataElements to transfer between two
 * DataBuffer/SampleModel pairs is legitimate if the SampleModels have
 * the same number of bands, corresponding bands have the same number of
 * bits per sample, and the TransferTypes are the same.
 * <p>
 * obj must be a primitive array of type TransferType.  Otherwise,
 * a ClassCastException is thrown.  An
 * ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 * not in bounds, or if obj is not large enough to hold the pixel data.
 * @param x         The minimum X coordinate of the pixel rectangle.
 * @param y         The minimum Y coordinate of the pixel rectangle.
 * @param w         The width of the pixel rectangle.
 * @param h         The height of the pixel rectangle.
 * @param obj       A primitive array containing pixel data.
 * @param data      The DataBuffer containing the image data.
 * @see #getNumDataElements
 * @see #getTransferType
 * @see #getDataElements(int, int, int, int, Object, DataBuffer)
 * @see java.awt.image.DataBuffer
 *
 * @throws NullPointerException if data is null.
 * @throws ArrayIndexOutOfBoundsException if the coordinates are
 * not in bounds, or if obj is too small to hold the input.
 */
public void setDataElements(int x, int y, int w, int h, Object obj, DataBuffer data) {
    int cnt = 0;
    Object o = null;
    int type = getTransferType();
    int numDataElems = getNumDataElements();
    int x1 = x + w;
    int y1 = y + h;
    if (x < 0 || x >= width || w > width || x1 < 0 || x1 > width || y < 0 || y >= height || h > height || y1 < 0 || y1 > height) {
        throw new ArrayIndexOutOfBoundsException("Invalid coordinates.");
    }
    switch(type) {
        case DataBuffer.TYPE_BYTE:
            byte[] barray = (byte[]) obj;
            byte[] btemp = new byte[numDataElems];
            for (int i = y; i < y1; i++) {
                for (int j = x; j < x1; j++) {
                    for (int k = 0; k < numDataElems; k++) {
                        btemp[k] = barray[cnt++];
                    }
                    setDataElements(j, i, btemp, data);
                }
            }
            break;
        case DataBuffer.TYPE_USHORT:
        case DataBuffer.TYPE_SHORT:
            short[] sarray = (short[]) obj;
            short[] stemp = new short[numDataElems];
            for (int i = y; i < y1; i++) {
                for (int j = x; j < x1; j++) {
                    for (int k = 0; k < numDataElems; k++) {
                        stemp[k] = sarray[cnt++];
                    }
                    setDataElements(j, i, stemp, data);
                }
            }
            break;
        case DataBuffer.TYPE_INT:
            int[] iArray = (int[]) obj;
            int[] itemp = new int[numDataElems];
            for (int i = y; i < y1; i++) {
                for (int j = x; j < x1; j++) {
                    for (int k = 0; k < numDataElems; k++) {
                        itemp[k] = iArray[cnt++];
                    }
                    setDataElements(j, i, itemp, data);
                }
            }
            break;
        case DataBuffer.TYPE_FLOAT:
            float[] fArray = (float[]) obj;
            float[] ftemp = new float[numDataElems];
            for (int i = y; i < y1; i++) {
                for (int j = x; j < x1; j++) {
                    for (int k = 0; k < numDataElems; k++) {
                        ftemp[k] = fArray[cnt++];
                    }
                    setDataElements(j, i, ftemp, data);
                }
            }
            break;
        case DataBuffer.TYPE_DOUBLE:
            double[] dArray = (double[]) obj;
            double[] dtemp = new double[numDataElems];
            for (int i = y; i < y1; i++) {
                for (int j = x; j < x1; j++) {
                    for (int k = 0; k < numDataElems; k++) {
                        dtemp[k] = dArray[cnt++];
                    }
                    setDataElements(j, i, dtemp, data);
                }
            }
            break;
    }
}