/**
 * Returns an array of {@code Constructor} objects reflecting all the
 * constructors declared by the class represented by this
 * {@code Class} object. These are public, protected, default
 * (package) access, and private constructors.  The elements in the array
 * returned are not sorted and are not in any particular order.  If the
 * class has a default constructor, it is included in the returned array.
 * This method returns an array of length 0 if this {@code Class}
 * object represents an interface, a primitive type, an array class, or
 * void.
 *
 * <p> See <em>The Java Language Specification</em>, section 8.2.
 *
 * @return  the array of {@code Constructor} objects representing all the
 *          declared constructors of this class
 * @throws  SecurityException
 *          If a security manager, <i>s</i>, is present and any of the
 *          following conditions is met:
 *
 *          <ul>
 *
 *          <li> the caller's class loader is not the same as the
 *          class loader of this class and invocation of
 *          {@link SecurityManager#checkPermission
 *          s.checkPermission} method with
 *          {@code RuntimePermission("accessDeclaredMembers")}
 *          denies access to the declared constructors within this class
 *
 *          <li> the caller's class loader is not the same as or an
 *          ancestor of the class loader for the current class and
 *          invocation of {@link SecurityManager#checkPackageAccess
 *          s.checkPackageAccess()} denies access to the package
 *          of this class
 *
 *          </ul>
 *
 * @since JDK1.1
 */
@CallerSensitive
public Constructor<?>[] getDeclaredConstructors() throws SecurityException {
    checkMemberAccess(Member.DECLARED, Reflection.getCallerClass(), true);
    return copyConstructors(privateGetDeclaredConstructors(false));
}