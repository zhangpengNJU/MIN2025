/**
 * Format the given message to XML.
 * <p>
 * This method can be overridden in a subclass.
 * It is recommended to use the {@link Formatter#formatMessage}
 * convenience method to localize and format the message field.
 *
 * @param record the log record to be formatted.
 * @return a formatted log record
 */
public String format(LogRecord record) {
    StringBuilder sb = new StringBuilder(500);
    sb.append("<record>\n");
    sb.append("  <date>");
    appendISO8601(sb, record.getMillis());
    sb.append("</date>\n");
    sb.append("  <millis>");
    sb.append(record.getMillis());
    sb.append("</millis>\n");
    sb.append("  <sequence>");
    sb.append(record.getSequenceNumber());
    sb.append("</sequence>\n");
    String name = record.getLoggerName();
    if (name != null) {
        sb.append("  <logger>");
        escape(sb, name);
        sb.append("</logger>\n");
    }
    sb.append("  <level>");
    escape(sb, record.getLevel().toString());
    sb.append("</level>\n");
    if (record.getSourceClassName() != null) {
        sb.append("  <class>");
        escape(sb, record.getSourceClassName());
        sb.append("</class>\n");
    }
    if (record.getSourceMethodName() != null) {
        sb.append("  <method>");
        escape(sb, record.getSourceMethodName());
        sb.append("</method>\n");
    }
    sb.append("  <thread>");
    sb.append(record.getThreadID());
    sb.append("</thread>\n");
    if (record.getMessage() != null) {
        // Format the message string and its accompanying parameters.
        String message = formatMessage(record);
        sb.append("  <message>");
        escape(sb, message);
        sb.append("</message>");
        sb.append("\n");
    }
    // If the message is being localized, output the key, resource
    // bundle name, and params.
    ResourceBundle bundle = record.getResourceBundle();
    try {
        if (bundle != null && bundle.getString(record.getMessage()) != null) {
            sb.append("  <key>");
            escape(sb, record.getMessage());
            sb.append("</key>\n");
            sb.append("  <catalog>");
            escape(sb, record.getResourceBundleName());
            sb.append("</catalog>\n");
        }
    } catch (Exception ex) {
    // The message is not in the catalog.  Drop through.
    }
    Object[] parameters = record.getParameters();
    // Check to see if the parameter was not a messagetext format
    // or was not null or empty
    if (parameters != null && parameters.length != 0 && record.getMessage().indexOf("{") == -1) {
        for (int i = 0; i < parameters.length; i++) {
            sb.append("  <param>");
            try {
                escape(sb, parameters[i].toString());
            } catch (Exception ex) {
                sb.append("???");
            }
            sb.append("</param>\n");
        }
    }
    if (record.getThrown() != null) {
        // Report on the state of the throwable.
        Throwable th = record.getThrown();
        sb.append("  <exception>\n");
        sb.append("    <message>");
        escape(sb, th.toString());
        sb.append("</message>\n");
        StackTraceElement[] trace = th.getStackTrace();
        for (int i = 0; i < trace.length; i++) {
            StackTraceElement frame = trace[i];
            sb.append("    <frame>\n");
            sb.append("      <class>");
            escape(sb, frame.getClassName());
            sb.append("</class>\n");
            sb.append("      <method>");
            escape(sb, frame.getMethodName());
            sb.append("</method>\n");
            // Check for a line number.
            if (frame.getLineNumber() >= 0) {
                sb.append("      <line>");
                sb.append(frame.getLineNumber());
                sb.append("</line>\n");
            }
            sb.append("    </frame>\n");
        }
        sb.append("  </exception>\n");
    }
    sb.append("</record>\n");
    return sb.toString();
}