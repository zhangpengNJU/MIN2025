/**
 * See the general contract of the <code>readLine</code>
 * method of <code>DataInput</code>.
 * <p>
 * Bytes
 * for this operation are read from the contained
 * input stream.
 *
 * @deprecated This method does not properly convert bytes to characters.
 * As of JDK&nbsp;1.1, the preferred way to read lines of text is via the
 * <code>BufferedReader.readLine()</code> method.  Programs that use the
 * <code>DataInputStream</code> class to read lines can be converted to use
 * the <code>BufferedReader</code> class by replacing code of the form:
 * <blockquote><pre>
 *     DataInputStream d =&nbsp;new&nbsp;DataInputStream(in);
 * </pre></blockquote>
 * with:
 * <blockquote><pre>
 *     BufferedReader d
 *          =&nbsp;new&nbsp;BufferedReader(new&nbsp;InputStreamReader(in));
 * </pre></blockquote>
 *
 * @return     the next line of text from this input stream.
 * @exception  IOException  if an I/O error occurs.
 * @see        java.io.BufferedReader#readLine()
 * @see        java.io.FilterInputStream#in
 */
@Deprecated
public final String readLine() throws IOException {
    char[] buf = lineBuffer;
    if (buf == null) {
        buf = lineBuffer = new char[128];
    }
    int room = buf.length;
    int offset = 0;
    int c;
    loop: while (true) {
        switch(c = in.read()) {
            case -1:
            case '\n':
                break loop;
            case '\r':
                int c2 = in.read();
                if ((c2 != '\n') && (c2 != -1)) {
                    if (!(in instanceof PushbackInputStream)) {
                        this.in = new PushbackInputStream(in);
                    }
                    ((PushbackInputStream) in).unread(c2);
                }
                break loop;
            default:
                if (--room < 0) {
                    buf = new char[offset + 128];
                    room = buf.length - offset - 1;
                    System.arraycopy(lineBuffer, 0, buf, 0, offset);
                    lineBuffer = buf;
                }
                buf[offset++] = (char) c;
                break;
        }
    }
    if ((c == -1) && (offset == 0)) {
        return null;
    }
    return String.copyValueOf(buf, 0, offset);
}