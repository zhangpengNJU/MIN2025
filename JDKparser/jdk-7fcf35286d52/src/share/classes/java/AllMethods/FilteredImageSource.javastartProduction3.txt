/**
 * Starts production of the filtered image.
 * If the specified <code>ImageConsumer</code>
 * isn't already a consumer of the filtered image,
 * an instance of the original <code>ImageFilter</code>
 * is created
 * (using the filter's <code>getFilterInstance</code> method)
 * to manipulate the image data
 * for the <code>ImageConsumer</code>.
 * The filter instance for the <code>ImageConsumer</code>
 * is then passed to the <code>startProduction</code> method
 * of the original <code>ImageProducer</code>.
 *
 * <p>
 * This method is public as a side effect
 * of this class implementing
 * the <code>ImageProducer</code> interface.
 * It should not be called from user code,
 * and its behavior if called from user code is unspecified.
 *
 * @param ic  the consumer for the filtered image
 * @see ImageConsumer
 */
public synchronized void startProduction(ImageConsumer ic) {
    if (proxies == null) {
        proxies = new Hashtable();
    }
    ImageFilter imgf = (ImageFilter) proxies.get(ic);
    if (imgf == null) {
        imgf = filter.getFilterInstance(ic);
        proxies.put(ic, imgf);
    }
    src.startProduction(imgf);
}