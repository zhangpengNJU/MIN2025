/**
 * Get all the packages currently known for the caller's {@code ClassLoader}
 * instance.  Those packages correspond to classes loaded via or accessible by
 * name to that {@code ClassLoader} instance.  If the caller's
 * {@code ClassLoader} instance is the bootstrap {@code ClassLoader}
 * instance, which may be represented by {@code null} in some implementations,
 * only packages corresponding to classes loaded by the bootstrap
 * {@code ClassLoader} instance will be returned.
 *
 * @return a new array of packages known to the callers {@code ClassLoader}
 * instance.  An zero length array is returned if none are known.
 */
@CallerSensitive
public static Package[] getPackages() {
    ClassLoader l = ClassLoader.getClassLoader(Reflection.getCallerClass());
    if (l != null) {
        return l.getPackages();
    } else {
        return getSystemPackages();
    }
}