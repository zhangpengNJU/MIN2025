/**
 * Returns the {@code Type}s representing the interfaces
 * directly implemented by the class or interface represented by
 * this object.
 *
 * <p>If a superinterface is a parameterized type, the
 * {@code Type} object returned for it must accurately reflect
 * the actual type parameters used in the source code. The
 * parameterized type representing each superinterface is created
 * if it had not been created before. See the declaration of
 * {@link java.lang.reflect.ParameterizedType ParameterizedType}
 * for the semantics of the creation process for parameterized
 * types.
 *
 * <p> If this object represents a class, the return value is an
 * array containing objects representing all interfaces
 * implemented by the class. The order of the interface objects in
 * the array corresponds to the order of the interface names in
 * the {@code implements} clause of the declaration of the class
 * represented by this object.  In the case of an array class, the
 * interfaces {@code Cloneable} and {@code Serializable} are
 * returned in that order.
 *
 * <p>If this object represents an interface, the array contains
 * objects representing all interfaces directly extended by the
 * interface.  The order of the interface objects in the array
 * corresponds to the order of the interface names in the
 * {@code extends} clause of the declaration of the interface
 * represented by this object.
 *
 * <p>If this object represents a class or interface that
 * implements no interfaces, the method returns an array of length
 * 0.
 *
 * <p>If this object represents a primitive type or void, the
 * method returns an array of length 0.
 *
 * @throws java.lang.reflect.GenericSignatureFormatError
 *     if the generic class signature does not conform to the format
 *     specified in
 *     <cite>The Java&trade; Virtual Machine Specification</cite>
 * @throws TypeNotPresentException if any of the generic
 *     superinterfaces refers to a non-existent type declaration
 * @throws java.lang.reflect.MalformedParameterizedTypeException
 *     if any of the generic superinterfaces refer to a parameterized
 *     type that cannot be instantiated for any reason
 * @return an array of interfaces implemented by this class
 * @since 1.5
 */
public Type[] getGenericInterfaces() {
    ClassRepository info = getGenericInfo();
    return (info == null) ? getInterfaces() : info.getSuperInterfaces();
}