/**
 * Removes component comp from this container without making unneccessary changes
 * and generating unneccessary events. This function intended to perform optimized
 * remove, for example, if newParent and current parent are the same it just changes
 * index without calling removeNotify.
 * Note: Should be called while holding treeLock
 * Returns whether removeNotify was invoked
 * @since: 1.5
 */
private boolean removeDelicately(Component comp, Container newParent, int newIndex) {
    checkTreeLock();
    int index = getComponentZOrder(comp);
    boolean needRemoveNotify = isRemoveNotifyNeeded(comp, this, newParent);
    if (needRemoveNotify) {
        comp.removeNotify();
    }
    if (newParent != this) {
        if (layoutMgr != null) {
            layoutMgr.removeLayoutComponent(comp);
        }
        adjustListeningChildren(AWTEvent.HIERARCHY_EVENT_MASK, -comp.numListening(AWTEvent.HIERARCHY_EVENT_MASK));
        adjustListeningChildren(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK, -comp.numListening(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK));
        adjustDescendants(-(comp.countHierarchyMembers()));
        comp.parent = null;
        if (needRemoveNotify) {
            comp.setGraphicsConfiguration(null);
        }
        component.remove(index);
        invalidateIfValid();
    } else {
        // We should remove component and then
        // add it by the newIndex without newIndex decrement if even we shift components to the left
        // after remove. Consult the rules below:
        // 2->4: 012345 -> 013425, 2->5: 012345 -> 013452
        // 4->2: 012345 -> 014235
        component.remove(index);
        component.add(newIndex, comp);
    }
    if (comp.parent == null) {
        // was actually removed
        if (containerListener != null || (eventMask & AWTEvent.CONTAINER_EVENT_MASK) != 0 || Toolkit.enabledOnToolkit(AWTEvent.CONTAINER_EVENT_MASK)) {
            ContainerEvent e = new ContainerEvent(this, ContainerEvent.COMPONENT_REMOVED, comp);
            dispatchEvent(e);
        }
        comp.createHierarchyEvents(HierarchyEvent.HIERARCHY_CHANGED, comp, this, HierarchyEvent.PARENT_CHANGED, Toolkit.enabledOnToolkit(AWTEvent.HIERARCHY_EVENT_MASK));
        if (peer != null && layoutMgr == null && isVisible()) {
            updateCursorImmediately();
        }
    }
    return needRemoveNotify;
}