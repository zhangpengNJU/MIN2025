/**
 * Collect elements output from a pipeline into a Node that holds elements
 * of this shape.
 *
 * @param helper the pipeline helper describing the pipeline stages
 * @param spliterator the source spliterator
 * @param flattenTree true if the returned node should be flattened
 * @param generator the array generator
 * @return a Node holding the output of the pipeline
 */
abstract <P_IN> Node<E_OUT> evaluateToNode(PipelineHelper<E_OUT> helper, Spliterator<P_IN> spliterator, boolean flattenTree, IntFunction<E_OUT[]> generator);