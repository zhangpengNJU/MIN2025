/* Create a privileged secondary finalizer thread in the system thread
       group for the given Runnable, and wait for it to complete.

       This method is used by both runFinalization and runFinalizersOnExit.
       The former method invokes all pending finalizers, while the latter
       invokes all uninvoked finalizers if on-exit finalization has been
       enabled.

       These two methods could have been implemented by offloading their work
       to the regular finalizer thread and waiting for that thread to finish.
       The advantage of creating a fresh thread, however, is that it insulates
       invokers of these methods from a stalled or deadlocked finalizer thread.
     */
private static void forkSecondaryFinalizer(final Runnable proc) {
    AccessController.doPrivileged(new PrivilegedAction<Void>() {

        public Void run() {
            ThreadGroup tg = Thread.currentThread().getThreadGroup();
            for (ThreadGroup tgn = tg; tgn != null; tg = tgn, tgn = tg.getParent()) ;
            Thread sft = new Thread(tg, proc, "Secondary finalizer");
            sft.start();
            try {
                sft.join();
            } catch (InterruptedException x) {
                Thread.currentThread().interrupt();
            }
            return null;
        }
    });
}