/**
 * Tests whether the file located by this path does not exist. This method
 * is intended for cases where it is required to take action when it can be
 * confirmed that a file does not exist.
 *
 * <p> The {@code options} parameter may be used to indicate how symbolic links
 * are handled for the case that the file is a symbolic link. By default,
 * symbolic links are followed. If the option {@link LinkOption#NOFOLLOW_LINKS
 * NOFOLLOW_LINKS} is present then symbolic links are not followed.
 *
 * <p> Note that this method is not the complement of the {@link #exists
 * exists} method. Where it is not possible to determine if a file exists
 * or not then both methods return {@code false}. As with the {@code exists}
 * method, the result of this method is immediately outdated. If this
 * method indicates the file does exist then there is no guarantee that a
 * subsequence attempt to create the file will succeed. Care should be taken
 * when using this method in security sensitive applications.
 *
 * @param   path
 *          the path to the file to test
 * @param   options
 *          options indicating how symbolic links are handled
 *
 * @return  {@code true} if the file does not exist; {@code false} if the
 *          file exists or its existence cannot be determined
 *
 * @throws  SecurityException
 *          In the case of the default provider, the {@link
 *          SecurityManager#checkRead(String)} is invoked to check
 *          read access to the file.
 */
public static boolean notExists(Path path, LinkOption... options) {
    try {
        if (followLinks(options)) {
            provider(path).checkAccess(path);
        } else {
            // attempt to read attributes without following links
            readAttributes(path, BasicFileAttributes.class, LinkOption.NOFOLLOW_LINKS);
        }
        // file exists
        return false;
    } catch (NoSuchFileException x) {
        // file confirmed not to exist
        return true;
    } catch (IOException x) {
        return false;
    }
}