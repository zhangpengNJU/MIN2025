/**
 * Compares this object against the specified object.  The result
 * is {@code true} if and only if the argument is not
 * {@code null} and is a {@code Float} object that
 * represents a {@code float} with the same value as the
 * {@code float} represented by this object. For this
 * purpose, two {@code float} values are considered to be the
 * same if and only if the method {@link #floatToIntBits(float)}
 * returns the identical {@code int} value when applied to
 * each.
 *
 * <p>Note that in most cases, for two instances of class
 * {@code Float}, {@code f1} and {@code f2}, the value
 * of {@code f1.equals(f2)} is {@code true} if and only if
 *
 * <blockquote><pre>
 *   f1.floatValue() == f2.floatValue()
 * </pre></blockquote>
 *
 * <p>also has the value {@code true}. However, there are two exceptions:
 * <ul>
 * <li>If {@code f1} and {@code f2} both represent
 *     {@code Float.NaN}, then the {@code equals} method returns
 *     {@code true}, even though {@code Float.NaN==Float.NaN}
 *     has the value {@code false}.
 * <li>If {@code f1} represents {@code +0.0f} while
 *     {@code f2} represents {@code -0.0f}, or vice
 *     versa, the {@code equal} test has the value
 *     {@code false}, even though {@code 0.0f==-0.0f}
 *     has the value {@code true}.
 * </ul>
 *
 * This definition allows hash tables to operate properly.
 *
 * @param obj the object to be compared
 * @return  {@code true} if the objects are the same;
 *          {@code false} otherwise.
 * @see java.lang.Float#floatToIntBits(float)
 */
public boolean equals(Object obj) {
    return (obj instanceof Float) && (floatToIntBits(((Float) obj).value) == floatToIntBits(value));
}