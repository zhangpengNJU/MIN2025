/**
 * Makes this Container undisplayable by removing its connection
 * to its native screen resource.  Making a container undisplayable
 * will cause all of its children to be made undisplayable.
 * This method is called by the toolkit internally and should
 * not be called directly by programs.
 * @see Component#isDisplayable
 * @see #addNotify
 */
public void removeNotify() {
    synchronized (getTreeLock()) {
        // We shouldn't use iterator because of the Swing menu
        // implementation specifics:
        // the menu is being assigned as a child to JLayeredPane
        // instead of particular component so always affect
        // collection of component if menu is becoming shown or hidden.
        for (int i = component.size() - 1; i >= 0; i--) {
            Component comp = component.get(i);
            if (comp != null) {
                // Fix for 6607170.
                // We want to suppress focus change on disposal
                // of the focused component. But because of focus
                // is asynchronous, we should suppress focus change
                // on every component in case it receives native focus
                // in the process of disposal.
                comp.setAutoFocusTransferOnDisposal(false);
                comp.removeNotify();
                comp.setAutoFocusTransferOnDisposal(true);
            }
        }
        // If some of the children had focus before disposal then it still has.
        // Auto-transfer focus to the next (or previous) component if auto-transfer
        // is enabled.
        if (containsFocus() && KeyboardFocusManager.isAutoFocusTransferEnabledFor(this)) {
            if (!transferFocus(false)) {
                transferFocusBackward(true);
            }
        }
        if (dispatcher != null) {
            dispatcher.dispose();
            dispatcher = null;
        }
        super.removeNotify();
    }
}