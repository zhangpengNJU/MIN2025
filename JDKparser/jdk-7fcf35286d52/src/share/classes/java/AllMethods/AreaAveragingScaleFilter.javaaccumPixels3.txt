private void accumPixels(int x, int y, int w, int h, ColorModel model, Object pixels, int off, int scansize) {
    if (reds == null) {
        makeAccumBuffers();
    }
    int sy = y;
    int syrem = destHeight;
    int dy, dyrem;
    if (sy == 0) {
        dy = 0;
        dyrem = 0;
    } else {
        dy = savedy;
        dyrem = savedyrem;
    }
    while (sy < y + h) {
        int amty;
        if (dyrem == 0) {
            for (int i = 0; i < destWidth; i++) {
                alphas[i] = reds[i] = greens[i] = blues[i] = 0f;
            }
            dyrem = srcHeight;
        }
        if (syrem < dyrem) {
            amty = syrem;
        } else {
            amty = dyrem;
        }
        int sx = 0;
        int dx = 0;
        int sxrem = 0;
        int dxrem = srcWidth;
        float a = 0f, r = 0f, g = 0f, b = 0f;
        while (sx < w) {
            if (sxrem == 0) {
                sxrem = destWidth;
                int rgb;
                if (pixels instanceof byte[]) {
                    rgb = ((byte[]) pixels)[off + sx] & 0xff;
                } else {
                    rgb = ((int[]) pixels)[off + sx];
                }
                // getRGB() always returns non-premultiplied components
                rgb = model.getRGB(rgb);
                a = rgb >>> 24;
                r = (rgb >> 16) & 0xff;
                g = (rgb >> 8) & 0xff;
                b = rgb & 0xff;
                // premultiply the components if necessary
                if (a != 255.0f) {
                    float ascale = a / 255.0f;
                    r *= ascale;
                    g *= ascale;
                    b *= ascale;
                }
            }
            int amtx;
            if (sxrem < dxrem) {
                amtx = sxrem;
            } else {
                amtx = dxrem;
            }
            float mult = ((float) amtx) * amty;
            alphas[dx] += mult * a;
            reds[dx] += mult * r;
            greens[dx] += mult * g;
            blues[dx] += mult * b;
            if ((sxrem -= amtx) == 0) {
                sx++;
            }
            if ((dxrem -= amtx) == 0) {
                dx++;
                dxrem = srcWidth;
            }
        }
        if ((dyrem -= amty) == 0) {
            int[] outpix = calcRow();
            do {
                consumer.setPixels(0, dy, destWidth, 1, rgbmodel, outpix, 0, destWidth);
                dy++;
            } while ((syrem -= amty) >= amty && amty == srcHeight);
        } else {
            syrem -= amty;
        }
        if (syrem == 0) {
            syrem = destHeight;
            sy++;
            off += scansize;
        }
    }
    savedyrem = dyrem;
    savedy = dy;
}