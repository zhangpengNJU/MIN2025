/**
 * Creates a new instance of the class represented by this {@code Class}
 * object.  The class is instantiated as if by a {@code new}
 * expression with an empty argument list.  The class is initialized if it
 * has not already been initialized.
 *
 * <p>Note that this method propagates any exception thrown by the
 * nullary constructor, including a checked exception.  Use of
 * this method effectively bypasses the compile-time exception
 * checking that would otherwise be performed by the compiler.
 * The {@link
 * java.lang.reflect.Constructor#newInstance(java.lang.Object...)
 * Constructor.newInstance} method avoids this problem by wrapping
 * any exception thrown by the constructor in a (checked) {@link
 * java.lang.reflect.InvocationTargetException}.
 *
 * @return  a newly allocated instance of the class represented by this
 *          object.
 * @throws  IllegalAccessException  if the class or its nullary
 *          constructor is not accessible.
 * @throws  InstantiationException
 *          if this {@code Class} represents an abstract class,
 *          an interface, an array class, a primitive type, or void;
 *          or if the class has no nullary constructor;
 *          or if the instantiation fails for some other reason.
 * @throws  ExceptionInInitializerError if the initialization
 *          provoked by this method fails.
 * @throws  SecurityException
 *          If a security manager, <i>s</i>, is present and
 *          the caller's class loader is not the same as or an
 *          ancestor of the class loader for the current class and
 *          invocation of {@link SecurityManager#checkPackageAccess
 *          s.checkPackageAccess()} denies access to the package
 *          of this class.
 */
@CallerSensitive
public T newInstance() throws InstantiationException, IllegalAccessException {
    if (System.getSecurityManager() != null) {
        checkMemberAccess(Member.PUBLIC, Reflection.getCallerClass(), false);
    }
    // NOTE: the following code may not be strictly correct under
    // the current Java memory model.
    // Constructor lookup
    if (cachedConstructor == null) {
        if (this == Class.class) {
            throw new IllegalAccessException("Can not call newInstance() on the Class for java.lang.Class");
        }
        try {
            Class<?>[] empty = {};
            final Constructor<T> c = getConstructor0(empty, Member.DECLARED);
            // Disable accessibility checks on the constructor
            // since we have to do the security check here anyway
            // (the stack depth is wrong for the Constructor's
            // security check to work)
            java.security.AccessController.doPrivileged(new java.security.PrivilegedAction<Void>() {

                public Void run() {
                    c.setAccessible(true);
                    return null;
                }
            });
            cachedConstructor = c;
        } catch (NoSuchMethodException e) {
            throw (InstantiationException) new InstantiationException(getName()).initCause(e);
        }
    }
    Constructor<T> tmpConstructor = cachedConstructor;
    // Security check (same as in java.lang.reflect.Constructor)
    int modifiers = tmpConstructor.getModifiers();
    if (!Reflection.quickCheckMemberAccess(this, modifiers)) {
        Class<?> caller = Reflection.getCallerClass();
        if (newInstanceCallerCache != caller) {
            Reflection.ensureMemberAccess(caller, this, null, modifiers);
            newInstanceCallerCache = caller;
        }
    }
    // Run constructor
    try {
        return tmpConstructor.newInstance((Object[]) null);
    } catch (InvocationTargetException e) {
        Unsafe.getUnsafe().throwException(e.getTargetException());
        // Not reached
        return null;
    }
}