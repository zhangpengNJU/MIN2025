/**
 * Returns a {@code Map} containing all names of the calendar
 * {@code field} in the given {@code style} and
 * {@code locale} and their corresponding field values. For
 * example, if this {@code Calendar} is a {@link
 * GregorianCalendar}, the returned map would contain "Jan" to
 * {@link #JANUARY}, "Feb" to {@link #FEBRUARY}, and so on, in the
 * {@linkplain #SHORT short} style in an English locale.
 *
 * <p>Narrow names may not be unique due to use of single characters,
 * such as "S" for Sunday and Saturday. In that case narrow names are not
 * included in the returned {@code Map}.
 *
 * <p>The values of other calendar fields may be taken into
 * account to determine a set of display names. For example, if
 * this {@code Calendar} is a lunisolar calendar system and
 * the year value given by the {@link #YEAR} field has a leap
 * month, this method would return month names containing the leap
 * month name, and month names are mapped to their values specific
 * for the year.
 *
 * <p>The default implementation supports display names contained in
 * a {@link DateFormatSymbols}. For example, if {@code field}
 * is {@link #MONTH} and {@code style} is {@link
 * #ALL_STYLES}, this method returns a {@code Map} containing
 * all strings returned by {@link DateFormatSymbols#getShortMonths()}
 * and {@link DateFormatSymbols#getMonths()}.
 *
 * @param field
 *        the calendar field for which the display names are returned
 * @param style
 *        the style applied to the string representation; one of {@link
 *        #SHORT_FORMAT} ({@link #SHORT}), {@link #SHORT_STANDALONE},
 *        {@link #LONG_FORMAT} ({@link #LONG}), {@link #LONG_STANDALONE},
 *        {@link #NARROW_FORMAT}, or {@link #NARROW_STANDALONE}
 * @param locale
 *        the locale for the display names
 * @return a {@code Map} containing all display names in
 *        {@code style} and {@code locale} and their
 *        field values, or {@code null} if no display names
 *        are defined for {@code field}
 * @exception IllegalArgumentException
 *        if {@code field} or {@code style} is invalid,
 *        or if this {@code Calendar} is non-lenient and any
 *        of the calendar fields have invalid values
 * @exception NullPointerException
 *        if {@code locale} is null
 * @since 1.6
 */
public Map<String, Integer> getDisplayNames(int field, int style, Locale locale) {
    if (!checkDisplayNameParams(field, style, ALL_STYLES, NARROW_FORMAT, locale, ERA_MASK | MONTH_MASK | DAY_OF_WEEK_MASK | AM_PM_MASK)) {
        return null;
    }
    String calendarType = getCalendarType();
    if (style == ALL_STYLES || isStandaloneStyle(style) || isNarrowFormatStyle(style)) {
        Map<String, Integer> map;
        map = CalendarDataUtility.retrieveFieldValueNames(calendarType, field, style, locale);
        // Perform fallback here to follow the CLDR rules
        if (map == null) {
            if (isNarrowFormatStyle(style)) {
                map = CalendarDataUtility.retrieveFieldValueNames(calendarType, field, toStandaloneStyle(style), locale);
            } else if (style != ALL_STYLES) {
                map = CalendarDataUtility.retrieveFieldValueNames(calendarType, field, getBaseStyle(style), locale);
            }
        }
        return map;
    }
    // SHORT or LONG
    return getDisplayNamesImpl(field, style, locale);
}