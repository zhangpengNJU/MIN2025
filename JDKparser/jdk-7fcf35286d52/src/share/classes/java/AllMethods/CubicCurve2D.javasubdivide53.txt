/**
 * Subdivides the cubic curve specified by the <code>src</code> parameter
 * and stores the resulting two subdivided curves into the
 * <code>left</code> and <code>right</code> curve parameters.
 * Either or both of the <code>left</code> and <code>right</code> objects
 * may be the same as the <code>src</code> object or <code>null</code>.
 * @param src the cubic curve to be subdivided
 * @param left the cubic curve object for storing the left or
 * first half of the subdivided curve
 * @param right the cubic curve object for storing the right or
 * second half of the subdivided curve
 * @since 1.2
 */
public static void subdivide(CubicCurve2D src, CubicCurve2D left, CubicCurve2D right) {
    double x1 = src.getX1();
    double y1 = src.getY1();
    double ctrlx1 = src.getCtrlX1();
    double ctrly1 = src.getCtrlY1();
    double ctrlx2 = src.getCtrlX2();
    double ctrly2 = src.getCtrlY2();
    double x2 = src.getX2();
    double y2 = src.getY2();
    double centerx = (ctrlx1 + ctrlx2) / 2.0;
    double centery = (ctrly1 + ctrly2) / 2.0;
    ctrlx1 = (x1 + ctrlx1) / 2.0;
    ctrly1 = (y1 + ctrly1) / 2.0;
    ctrlx2 = (x2 + ctrlx2) / 2.0;
    ctrly2 = (y2 + ctrly2) / 2.0;
    double ctrlx12 = (ctrlx1 + centerx) / 2.0;
    double ctrly12 = (ctrly1 + centery) / 2.0;
    double ctrlx21 = (ctrlx2 + centerx) / 2.0;
    double ctrly21 = (ctrly2 + centery) / 2.0;
    centerx = (ctrlx12 + ctrlx21) / 2.0;
    centery = (ctrly12 + ctrly21) / 2.0;
    if (left != null) {
        left.setCurve(x1, y1, ctrlx1, ctrly1, ctrlx12, ctrly12, centerx, centery);
    }
    if (right != null) {
        right.setCurve(centerx, centery, ctrlx21, ctrly21, ctrlx2, ctrly2, x2, y2);
    }
}