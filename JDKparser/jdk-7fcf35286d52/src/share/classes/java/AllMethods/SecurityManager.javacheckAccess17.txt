/**
 * Throws a <code>SecurityException</code> if the
 * calling thread is not allowed to modify the thread group argument.
 * <p>
 * This method is invoked for the current security manager when a
 * new child thread or child thread group is created, and by the
 * <code>setDaemon</code>, <code>setMaxPriority</code>,
 * <code>stop</code>, <code>suspend</code>, <code>resume</code>, and
 * <code>destroy</code> methods of class <code>ThreadGroup</code>.
 * <p>
 * If the thread group argument is the system thread group (
 * has a <code>null</code> parent) then
 * this method calls <code>checkPermission</code> with the
 * <code>RuntimePermission("modifyThreadGroup")</code> permission.
 * If the thread group argument is <i>not</i> the system thread group,
 * this method just returns silently.
 * <p>
 * Applications that want a stricter policy should override this
 * method. If this method is overridden, the method that overrides
 * it should additionally check to see if the calling thread has the
 * <code>RuntimePermission("modifyThreadGroup")</code> permission, and
 * if so, return silently. This is to ensure that code granted
 * that permission (such as the JDK itself) is allowed to
 * manipulate any thread.
 * <p>
 * If this method is overridden, then
 * <code>super.checkAccess</code> should
 * be called by the first statement in the overridden method, or the
 * equivalent security check should be placed in the overridden method.
 *
 * @param      g   the thread group to be checked.
 * @exception  SecurityException  if the calling thread does not have
 *             permission to modify the thread group.
 * @exception  NullPointerException if the thread group argument is
 *             <code>null</code>.
 * @see        java.lang.ThreadGroup#destroy() destroy
 * @see        java.lang.ThreadGroup#resume() resume
 * @see        java.lang.ThreadGroup#setDaemon(boolean) setDaemon
 * @see        java.lang.ThreadGroup#setMaxPriority(int) setMaxPriority
 * @see        java.lang.ThreadGroup#stop() stop
 * @see        java.lang.ThreadGroup#suspend() suspend
 * @see        #checkPermission(java.security.Permission) checkPermission
 */
public void checkAccess(ThreadGroup g) {
    if (g == null) {
        throw new NullPointerException("thread group can't be null");
    }
    if (g == rootGroup) {
        checkPermission(SecurityConstants.MODIFY_THREADGROUP_PERMISSION);
    } else {
    // just return
    }
}