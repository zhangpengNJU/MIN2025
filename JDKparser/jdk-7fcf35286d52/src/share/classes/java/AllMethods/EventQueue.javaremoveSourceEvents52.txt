/*
     * Removes any pending events for the specified source object.
     * If removeAllEvents parameter is <code>true</code> then all
     * events for the specified source object are removed, if it
     * is <code>false</code> then <code>SequencedEvent</code>, <code>SentEvent</code>,
     * <code>FocusEvent</code>, <code>WindowEvent</code>, <code>KeyEvent</code>,
     * and <code>InputMethodEvent</code> are kept in the queue, but all other
     * events are removed.
     *
     * This method is normally called by the source's
     * <code>removeNotify</code> method.
     */
final void removeSourceEvents(Object source, boolean removeAllEvents) {
    SunToolkit.flushPendingEvents(appContext);
    pushPopLock.lock();
    try {
        for (int i = 0; i < NUM_PRIORITIES; i++) {
            EventQueueItem entry = queues[i].head;
            EventQueueItem prev = null;
            while (entry != null) {
                if ((entry.event.getSource() == source) && (removeAllEvents || !(entry.event instanceof SequencedEvent || entry.event instanceof SentEvent || entry.event instanceof FocusEvent || entry.event instanceof WindowEvent || entry.event instanceof KeyEvent || entry.event instanceof InputMethodEvent))) {
                    if (entry.event instanceof SequencedEvent) {
                        ((SequencedEvent) entry.event).dispose();
                    }
                    if (entry.event instanceof SentEvent) {
                        ((SentEvent) entry.event).dispose();
                    }
                    if (entry.event instanceof InvocationEvent) {
                        AWTAccessor.getInvocationEventAccessor().dispose((InvocationEvent) entry.event);
                    }
                    if (prev == null) {
                        queues[i].head = entry.next;
                    } else {
                        prev.next = entry.next;
                    }
                    uncacheEQItem(entry);
                } else {
                    prev = entry;
                }
                entry = entry.next;
            }
            queues[i].tail = prev;
        }
    } finally {
        pushPopLock.unlock();
    }
}