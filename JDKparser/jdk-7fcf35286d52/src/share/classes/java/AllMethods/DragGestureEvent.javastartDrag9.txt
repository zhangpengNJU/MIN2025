/**
 * Starts the drag operation given the <code>Cursor</code> for this drag
 * operation and the <code>Transferable</code> representing the source data
 * for this drag operation.
 * <br>
 * If a <code>null</code> <code>Cursor</code> is specified no exception will
 * be thrown and default drag cursors will be used instead.
 * <br>
 * If a <code>null</code> <code>Transferable</code> is specified
 * <code>NullPointerException</code> will be thrown.
 * @param dragCursor     The initial {@code Cursor} for this drag operation
 *                       or {@code null} for the default cursor handling;
 *                       see
 *                       <a href="DragSourceContext.html#defaultCursor">DragSourceContext</a>
 *                       for more details on the cursor handling mechanism
 *                       during drag and drop
 * @param transferable The <code>Transferable</code> representing the source
 *                     data for this drag operation.
 *
 * @throws InvalidDnDOperationException if the Drag and Drop
 *         system is unable to initiate a drag operation, or if the user
 *         attempts to start a drag while an existing drag operation is
 *         still executing.
 * @throws NullPointerException if the {@code Transferable} is {@code null}
 * @since 1.4
 */
public void startDrag(Cursor dragCursor, Transferable transferable) throws InvalidDnDOperationException {
    dragSource.startDrag(this, dragCursor, transferable, null);
}