/* Public Class Methods */
/**
 * Creates and returns a <code>PrinterJob</code> which is initially
 * associated with the default printer.
 * If no printers are available on the system, a PrinterJob will still
 * be returned from this method, but <code>getPrintService()</code>
 * will return <code>null</code>, and calling
 * {@link #print() print} with this <code>PrinterJob</code> might
 * generate an exception.  Applications that need to determine if
 * there are suitable printers before creating a <code>PrinterJob</code>
 * should ensure that the array returned from
 * {@link #lookupPrintServices() lookupPrintServices} is not empty.
 * @return a new <code>PrinterJob</code>.
 *
 * @throws  SecurityException if a security manager exists and its
 *          {@link java.lang.SecurityManager#checkPrintJobAccess}
 *          method disallows this thread from creating a print job request
 */
public static PrinterJob getPrinterJob() {
    SecurityManager security = System.getSecurityManager();
    if (security != null) {
        security.checkPrintJobAccess();
    }
    return (PrinterJob) java.security.AccessController.doPrivileged(new java.security.PrivilegedAction() {

        public Object run() {
            String nm = System.getProperty("java.awt.printerjob", null);
            try {
                return (PrinterJob) Class.forName(nm).newInstance();
            } catch (ClassNotFoundException e) {
                throw new AWTError("PrinterJob not found: " + nm);
            } catch (InstantiationException e) {
                throw new AWTError("Could not instantiate PrinterJob: " + nm);
            } catch (IllegalAccessException e) {
                throw new AWTError("Could not access PrinterJob: " + nm);
            }
        }
    });
}