/**
 * Returns the index of the last occurrence of the specified element in
 * this vector, searching backwards from {@code index}, or returns -1 if
 * the element is not found.
 * More formally, returns the highest index {@code i} such that
 * <tt>(i&nbsp;&lt;=&nbsp;index&nbsp;&amp;&amp;&nbsp;(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i))))</tt>,
 * or -1 if there is no such index.
 *
 * @param o element to search for
 * @param index index to start searching backwards from
 * @return the index of the last occurrence of the element at position
 *         less than or equal to {@code index} in this vector;
 *         -1 if the element is not found.
 * @throws IndexOutOfBoundsException if the specified index is greater
 *         than or equal to the current size of this vector
 */
public synchronized int lastIndexOf(Object o, int index) {
    if (index >= elementCount)
        throw new IndexOutOfBoundsException(index + " >= " + elementCount);
    if (o == null) {
        for (int i = index; i >= 0; i--) if (elementData[i] == null)
            return i;
    } else {
        for (int i = index; i >= 0; i--) if (o.equals(elementData[i]))
            return i;
    }
    return -1;
}