/**
 * Returns an input stream for reading the specified resource.
 * If this loader is closed, then any resources opened by this method
 * will be closed.
 *
 * <p> The search order is described in the documentation for {@link
 * #getResource(String)}.  </p>
 *
 * @param  name
 *         The resource name
 *
 * @return  An input stream for reading the resource, or {@code null}
 *          if the resource could not be found
 *
 * @since  1.7
 */
public InputStream getResourceAsStream(String name) {
    URL url = getResource(name);
    try {
        if (url == null) {
            return null;
        }
        URLConnection urlc = url.openConnection();
        InputStream is = urlc.getInputStream();
        if (urlc instanceof JarURLConnection) {
            JarURLConnection juc = (JarURLConnection) urlc;
            JarFile jar = juc.getJarFile();
            synchronized (closeables) {
                if (!closeables.containsKey(jar)) {
                    closeables.put(jar, null);
                }
            }
        } else if (urlc instanceof sun.net.www.protocol.file.FileURLConnection) {
            synchronized (closeables) {
                closeables.put(is, null);
            }
        }
        return is;
    } catch (IOException e) {
        return null;
    }
}