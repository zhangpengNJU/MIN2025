/**
 * Returns the value for the given class.
 * If no value has yet been computed, it is obtained by
 * an invocation of the {@link #computeValue computeValue} method.
 * <p>
 * The actual installation of the value on the class
 * is performed atomically.
 * At that point, if several racing threads have
 * computed values, one is chosen, and returned to
 * all the racing threads.
 * <p>
 * The {@code type} parameter is typically a class, but it may be any type,
 * such as an interface, a primitive type (like {@code int.class}), or {@code void.class}.
 * <p>
 * In the absence of {@code remove} calls, a class value has a simple
 * state diagram:  uninitialized and initialized.
 * When {@code remove} calls are made,
 * the rules for value observation are more complex.
 * See the documentation for {@link #remove remove} for more information.
 *
 * @param type the type whose class value must be computed or retrieved
 * @return the current value associated with this {@code ClassValue}, for the given class or interface
 * @throws NullPointerException if the argument is null
 * @see #remove
 * @see #computeValue
 */
public T get(Class<?> type) {
    // non-racing this.hashCodeForCache : final int
    Entry<?>[] cache;
    Entry<T> e = probeHomeLocation(cache = getCacheCarefully(type), this);
    // racing e : current value <=> stale value from current cache or from stale cache
    // invariant:  e is null or an Entry with readable Entry.version and Entry.value
    if (match(e))
        // invariant:  No false positive matches.  False negatives are OK if rare.
        // The key fact that makes this work: if this.version == e.version,
        // then this thread has a right to observe (final) e.value.
        return e.value();
    // The fast path can fail for any of these reasons:
    // 1. no entry has been computed yet
    // 2. hash code collision (before or after reduction mod cache.length)
    // 3. an entry has been removed (either on this type or another)
    // 4. the GC has somehow managed to delete e.version and clear the reference
    return getFromBackup(cache, type);
}