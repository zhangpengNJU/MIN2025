/**
 * Appends the value of a date-time field to the formatter providing full
 * control over formatting.
 * <p>
 * The value of the field will be output during a format.
 * If the value cannot be obtained then an exception will be thrown.
 * <p>
 * This method provides full control of the numeric formatting, including
 * zero-padding and the positive/negative sign.
 * <p>
 * The parser for a variable width value such as this normally behaves greedily,
 * accepting as many digits as possible.
 * This behavior can be affected by 'adjacent value parsing'.
 * See {@link #appendValue(java.time.temporal.TemporalField, int)} for full details.
 * <p>
 * In strict parsing mode, the minimum number of parsed digits is {@code minWidth}
 * and the maximum is {@code maxWidth}.
 * In lenient parsing mode, the minimum number of parsed digits is one
 * and the maximum is 19 (except as limited by adjacent value parsing).
 * <p>
 * If this method is invoked with equal minimum and maximum widths and a sign style of
 * {@code NOT_NEGATIVE} then it delegates to {@code appendValue(TemporalField,int)}.
 * In this scenario, the formatting and parsing behavior described there occur.
 *
 * @param field  the field to append, not null
 * @param minWidth  the minimum field width of the printed field, from 1 to 19
 * @param maxWidth  the maximum field width of the printed field, from 1 to 19
 * @param signStyle  the positive/negative output style, not null
 * @return this, for chaining, not null
 * @throws IllegalArgumentException if the widths are invalid
 */
public DateTimeFormatterBuilder appendValue(TemporalField field, int minWidth, int maxWidth, SignStyle signStyle) {
    if (minWidth == maxWidth && signStyle == SignStyle.NOT_NEGATIVE) {
        return appendValue(field, maxWidth);
    }
    Objects.requireNonNull(field, "field");
    Objects.requireNonNull(signStyle, "signStyle");
    if (minWidth < 1 || minWidth > 19) {
        throw new IllegalArgumentException("The minimum width must be from 1 to 19 inclusive but was " + minWidth);
    }
    if (maxWidth < 1 || maxWidth > 19) {
        throw new IllegalArgumentException("The maximum width must be from 1 to 19 inclusive but was " + maxWidth);
    }
    if (maxWidth < minWidth) {
        throw new IllegalArgumentException("The maximum width must exceed or equal the minimum width but " + maxWidth + " < " + minWidth);
    }
    NumberPrinterParser pp = new NumberPrinterParser(field, minWidth, maxWidth, signStyle);
    appendValue(pp);
    return this;
}