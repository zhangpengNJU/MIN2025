/**
 * Obtains a {@code JapaneseDate} representing a date in the Japanese calendar
 * system from the era, year-of-era and day-of-year fields.
 * <p>
 * This returns a {@code JapaneseDate} with the specified fields.
 * The day must be valid for the year, otherwise an exception will be thrown.
 * <p>
 * The day-of-year in this factory is expressed relative to the start of the year-of-era.
 * This definition changes the normal meaning of day-of-year only in those years
 * where the year-of-era is reset to one due to a change in the era.
 * For example:
 * <pre>
 *  6th Jan Showa 64 = day-of-year 6
 *  7th Jan Showa 64 = day-of-year 7
 *  8th Jan Heisei 1 = day-of-year 1
 *  9th Jan Heisei 1 = day-of-year 2
 * </pre>
 *
 * @param era  the Japanese era, not null
 * @param yearOfEra  the Japanese year-of-era
 * @param dayOfYear  the chronology day-of-year, from 1 to 366
 * @return the date in Japanese calendar system, not null
 * @throws DateTimeException if the value of any field is out of range,
 *  or if the day-of-year is invalid for the year
 */
static JapaneseDate ofYearDay(JapaneseEra era, int yearOfEra, int dayOfYear) {
    Objects.requireNonNull(era, "era");
    CalendarDate firstDay = era.getPrivateEra().getSinceDate();
    LocalGregorianCalendar.Date jdate = JapaneseChronology.JCAL.newCalendarDate(null);
    jdate.setEra(era.getPrivateEra());
    if (yearOfEra == 1) {
        jdate.setDate(yearOfEra, firstDay.getMonth(), firstDay.getDayOfMonth() + dayOfYear - 1);
    } else {
        jdate.setDate(yearOfEra, 1, dayOfYear);
    }
    JapaneseChronology.JCAL.normalize(jdate);
    if (era.getPrivateEra() != jdate.getEra() || yearOfEra != jdate.getYear()) {
        throw new DateTimeException("Invalid parameters");
    }
    LocalDate localdate = LocalDate.of(jdate.getNormalizedYear(), jdate.getMonth(), jdate.getDayOfMonth());
    return new JapaneseDate(era, yearOfEra, localdate);
}