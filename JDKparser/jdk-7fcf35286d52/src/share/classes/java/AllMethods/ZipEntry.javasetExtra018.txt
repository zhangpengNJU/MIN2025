/**
 * Sets the optional extra field data for the entry.
 *
 * @param extra
 *        the extra field data bytes
 * @param doZIP64
 *        if true, set size and csize from ZIP64 fields if present
 */
void setExtra0(byte[] extra, boolean doZIP64) {
    if (extra != null) {
        if (extra.length > 0xFFFF) {
            throw new IllegalArgumentException("invalid extra field length");
        }
        // extra fields are in "HeaderID(2)DataSize(2)Data... format
        int off = 0;
        int len = extra.length;
        while (off + 4 < len) {
            int tag = get16(extra, off);
            int sz = get16(extra, off + 2);
            off += 4;
            if (// invalid data
            off + sz > len)
                break;
            switch(tag) {
                case EXTID_ZIP64:
                    if (doZIP64) {
                        // LOC extra zip64 entry MUST include BOTH original
                        // and compressed file size fields.
                        // If invalid zip64 extra fields, simply skip. Even
                        // it's rare, it's possible the entry size happens to
                        // be the magic value and it "accidently" has some
                        // bytes in extra match the id.
                        if (sz >= 16) {
                            size = get64(extra, off);
                            csize = get64(extra, off + 8);
                        }
                    }
                    break;
                case EXTID_NTFS:
                    if (// reserved  4 bytes + tag 2 bytes + size 2 bytes
                    sz < 32)
                        // m[a|c]time 24 bytes
                        break;
                    // reserved 4 bytes
                    int pos = off + 4;
                    if (get16(extra, pos) != 0x0001 || get16(extra, pos + 2) != 24)
                        break;
                    mtime = winTimeToFileTime(get64(extra, pos + 4));
                    atime = winTimeToFileTime(get64(extra, pos + 12));
                    ctime = winTimeToFileTime(get64(extra, pos + 20));
                    break;
                case EXTID_EXTT:
                    int flag = Byte.toUnsignedInt(extra[off]);
                    int sz0 = 1;
                    // The CEN-header extra field contains the modification
                    // time only, or no timestamp at all. 'sz' is used to
                    // flag its presence or absence. But if mtime is present
                    // in LOC it must be present in CEN as well.
                    if ((flag & 0x1) != 0 && (sz0 + 4) <= sz) {
                        mtime = unixTimeToFileTime(get32(extra, off + sz0));
                        sz0 += 4;
                    }
                    if ((flag & 0x2) != 0 && (sz0 + 4) <= sz) {
                        atime = unixTimeToFileTime(get32(extra, off + sz0));
                        sz0 += 4;
                    }
                    if ((flag & 0x4) != 0 && (sz0 + 4) <= sz) {
                        ctime = unixTimeToFileTime(get32(extra, off + sz0));
                        sz0 += 4;
                    }
                    break;
                default:
            }
            off += sz;
        }
    }
    this.extra = extra;
}