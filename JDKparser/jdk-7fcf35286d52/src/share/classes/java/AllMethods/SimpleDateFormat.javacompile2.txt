/**
 * Returns the compiled form of the given pattern. The syntax of
 * the compiled pattern is:
 * <blockquote>
 * CompiledPattern:
 *     EntryList
 * EntryList:
 *     Entry
 *     EntryList Entry
 * Entry:
 *     TagField
 *     TagField data
 * TagField:
 *     Tag Length
 *     TaggedData
 * Tag:
 *     pattern_char_index
 *     TAG_QUOTE_CHARS
 * Length:
 *     short_length
 *     long_length
 * TaggedData:
 *     TAG_QUOTE_ASCII_CHAR ascii_char
 *
 * </blockquote>
 *
 * where `short_length' is an 8-bit unsigned integer between 0 and
 * 254.  `long_length' is a sequence of an 8-bit integer 255 and a
 * 32-bit signed integer value which is split into upper and lower
 * 16-bit fields in two char's. `pattern_char_index' is an 8-bit
 * integer between 0 and 18. `ascii_char' is an 7-bit ASCII
 * character value. `data' depends on its Tag value.
 * <p>
 * If Length is short_length, Tag and short_length are packed in a
 * single char, as illustrated below.
 * <blockquote>
 *     char[0] = (Tag << 8) | short_length;
 * </blockquote>
 *
 * If Length is long_length, Tag and 255 are packed in the first
 * char and a 32-bit integer, as illustrated below.
 * <blockquote>
 *     char[0] = (Tag << 8) | 255;
 *     char[1] = (char) (long_length >>> 16);
 *     char[2] = (char) (long_length & 0xffff);
 * </blockquote>
 * <p>
 * If Tag is a pattern_char_index, its Length is the number of
 * pattern characters. For example, if the given pattern is
 * "yyyy", Tag is 1 and Length is 4, followed by no data.
 * <p>
 * If Tag is TAG_QUOTE_CHARS, its Length is the number of char's
 * following the TagField. For example, if the given pattern is
 * "'o''clock'", Length is 7 followed by a char sequence of
 * <code>o&nbs;'&nbs;c&nbs;l&nbs;o&nbs;c&nbs;k</code>.
 * <p>
 * TAG_QUOTE_ASCII_CHAR is a special tag and has an ASCII
 * character in place of Length. For example, if the given pattern
 * is "'o'", the TaggedData entry is
 * <code>((TAG_QUOTE_ASCII_CHAR&nbs;<<&nbs;8)&nbs;|&nbs;'o')</code>.
 *
 * @exception NullPointerException if the given pattern is null
 * @exception IllegalArgumentException if the given pattern is invalid
 */
private char[] compile(String pattern) {
    int length = pattern.length();
    boolean inQuote = false;
    StringBuilder compiledCode = new StringBuilder(length * 2);
    StringBuilder tmpBuffer = null;
    int count = 0, tagcount = 0;
    int lastTag = -1, prevTag = -1;
    for (int i = 0; i < length; i++) {
        char c = pattern.charAt(i);
        if (c == '\'') {
            // '' is treated as a single quote regardless of being
            // in a quoted section.
            if ((i + 1) < length) {
                c = pattern.charAt(i + 1);
                if (c == '\'') {
                    i++;
                    if (count != 0) {
                        encode(lastTag, count, compiledCode);
                        tagcount++;
                        prevTag = lastTag;
                        lastTag = -1;
                        count = 0;
                    }
                    if (inQuote) {
                        tmpBuffer.append(c);
                    } else {
                        compiledCode.append((char) (TAG_QUOTE_ASCII_CHAR << 8 | c));
                    }
                    continue;
                }
            }
            if (!inQuote) {
                if (count != 0) {
                    encode(lastTag, count, compiledCode);
                    tagcount++;
                    prevTag = lastTag;
                    lastTag = -1;
                    count = 0;
                }
                if (tmpBuffer == null) {
                    tmpBuffer = new StringBuilder(length);
                } else {
                    tmpBuffer.setLength(0);
                }
                inQuote = true;
            } else {
                int len = tmpBuffer.length();
                if (len == 1) {
                    char ch = tmpBuffer.charAt(0);
                    if (ch < 128) {
                        compiledCode.append((char) (TAG_QUOTE_ASCII_CHAR << 8 | ch));
                    } else {
                        compiledCode.append((char) (TAG_QUOTE_CHARS << 8 | 1));
                        compiledCode.append(ch);
                    }
                } else {
                    encode(TAG_QUOTE_CHARS, len, compiledCode);
                    compiledCode.append(tmpBuffer);
                }
                inQuote = false;
            }
            continue;
        }
        if (inQuote) {
            tmpBuffer.append(c);
            continue;
        }
        if (!(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z')) {
            if (count != 0) {
                encode(lastTag, count, compiledCode);
                tagcount++;
                prevTag = lastTag;
                lastTag = -1;
                count = 0;
            }
            if (c < 128) {
                // In most cases, c would be a delimiter, such as ':'.
                compiledCode.append((char) (TAG_QUOTE_ASCII_CHAR << 8 | c));
            } else {
                // Take any contiguous non-ASCII alphabet characters and
                // put them in a single TAG_QUOTE_CHARS.
                int j;
                for (j = i + 1; j < length; j++) {
                    char d = pattern.charAt(j);
                    if (d == '\'' || (d >= 'a' && d <= 'z' || d >= 'A' && d <= 'Z')) {
                        break;
                    }
                }
                compiledCode.append((char) (TAG_QUOTE_CHARS << 8 | (j - i)));
                for (; i < j; i++) {
                    compiledCode.append(pattern.charAt(i));
                }
                i--;
            }
            continue;
        }
        int tag;
        if ((tag = DateFormatSymbols.patternChars.indexOf(c)) == -1) {
            throw new IllegalArgumentException("Illegal pattern character " + "'" + c + "'");
        }
        if (lastTag == -1 || lastTag == tag) {
            lastTag = tag;
            count++;
            continue;
        }
        encode(lastTag, count, compiledCode);
        tagcount++;
        prevTag = lastTag;
        lastTag = tag;
        count = 1;
    }
    if (inQuote) {
        throw new IllegalArgumentException("Unterminated quote");
    }
    if (count != 0) {
        encode(lastTag, count, compiledCode);
        tagcount++;
        prevTag = lastTag;
    }
    forceStandaloneForm = (tagcount == 1 && prevTag == PATTERN_MONTH);
    // Copy the compiled pattern to a char array
    int len = compiledCode.length();
    char[] r = new char[len];
    compiledCode.getChars(0, len, r, 0);
    return r;
}