static MethodHandle makePairwiseConvertIndirect(MethodHandle target, MethodType srcType, boolean strict, boolean monobox) {
    assert (target.type().parameterCount() == srcType.parameterCount());
    // Calculate extra arguments (temporaries) required in the names array.
    Object[] convSpecs = computeValueConversions(srcType, target.type(), strict, monobox);
    final int INARG_COUNT = srcType.parameterCount();
    int convCount = countNonNull(convSpecs);
    boolean retConv = (convSpecs[INARG_COUNT] != null);
    boolean retVoid = srcType.returnType() == void.class;
    if (retConv && retVoid) {
        convCount -= 1;
        retConv = false;
    }
    final int IN_MH = 0;
    final int INARG_BASE = 1;
    final int INARG_LIMIT = INARG_BASE + INARG_COUNT;
    final int NAME_LIMIT = INARG_LIMIT + convCount + 1;
    final int RETURN_CONV = (!retConv ? -1 : NAME_LIMIT - 1);
    final int OUT_CALL = (!retConv ? NAME_LIMIT : RETURN_CONV) - 1;
    final int RESULT = (retVoid ? -1 : NAME_LIMIT - 1);
    // Now build a LambdaForm.
    MethodType lambdaType = srcType.basicType().invokerType();
    Name[] names = arguments(NAME_LIMIT - INARG_LIMIT, lambdaType);
    // Collect the arguments to the outgoing call, maybe with conversions:
    // target MH is Name.function, name Name.arguments[0]
    final int OUTARG_BASE = 0;
    Object[] outArgs = new Object[OUTARG_BASE + INARG_COUNT];
    int nameCursor = INARG_LIMIT;
    for (int i = 0; i < INARG_COUNT; i++) {
        Object convSpec = convSpecs[i];
        if (convSpec == null) {
            // do nothing: difference is trivial
            outArgs[OUTARG_BASE + i] = names[INARG_BASE + i];
            continue;
        }
        Name conv;
        if (convSpec instanceof Class) {
            Class<?> convClass = (Class<?>) convSpec;
            conv = new Name(Lazy.MH_castReference, convClass, names[INARG_BASE + i]);
        } else {
            MethodHandle fn = (MethodHandle) convSpec;
            conv = new Name(fn, names[INARG_BASE + i]);
        }
        assert (names[nameCursor] == null);
        names[nameCursor++] = conv;
        assert (outArgs[OUTARG_BASE + i] == null);
        outArgs[OUTARG_BASE + i] = conv;
    }
    // Build argument array for the call.
    assert (nameCursor == OUT_CALL);
    names[OUT_CALL] = new Name(target, outArgs);
    Object convSpec = convSpecs[INARG_COUNT];
    if (!retConv) {
        assert (OUT_CALL == names.length - 1);
    } else {
        Name conv;
        if (convSpec == void.class) {
            conv = new Name(LambdaForm.constantZero(BasicType.basicType(srcType.returnType())));
        } else if (convSpec instanceof Class) {
            Class<?> convClass = (Class<?>) convSpec;
            conv = new Name(Lazy.MH_castReference, convClass, names[OUT_CALL]);
        } else {
            MethodHandle fn = (MethodHandle) convSpec;
            if (fn.type().parameterCount() == 0)
                // don't pass retval to void conversion
                conv = new Name(fn);
            else
                conv = new Name(fn, names[OUT_CALL]);
        }
        assert (names[RETURN_CONV] == null);
        names[RETURN_CONV] = conv;
        assert (RETURN_CONV == names.length - 1);
    }
    LambdaForm form = new LambdaForm("convert", lambdaType.parameterCount(), names, RESULT);
    return SimpleMethodHandle.make(srcType, form);
}