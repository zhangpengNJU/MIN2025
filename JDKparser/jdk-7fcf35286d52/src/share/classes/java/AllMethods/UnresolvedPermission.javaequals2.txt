/**
 * Checks two UnresolvedPermission objects for equality.
 * Checks that <i>obj</i> is an UnresolvedPermission, and has
 * the same type (class) name, permission name, actions, and
 * certificates as this object.
 *
 * <p> To determine certificate equality, this method only compares
 * actual signer certificates.  Supporting certificate chains
 * are not taken into consideration by this method.
 *
 * @param obj the object we are testing for equality with this object.
 *
 * @return true if obj is an UnresolvedPermission, and has the same
 * type (class) name, permission name, actions, and
 * certificates as this object.
 */
public boolean equals(Object obj) {
    if (obj == this)
        return true;
    if (!(obj instanceof UnresolvedPermission))
        return false;
    UnresolvedPermission that = (UnresolvedPermission) obj;
    // check type
    if (!this.type.equals(that.type)) {
        return false;
    }
    // check name
    if (this.name == null) {
        if (that.name != null) {
            return false;
        }
    } else if (!this.name.equals(that.name)) {
        return false;
    }
    // check actions
    if (this.actions == null) {
        if (that.actions != null) {
            return false;
        }
    } else {
        if (!this.actions.equals(that.actions)) {
            return false;
        }
    }
    // check certs
    if ((this.certs == null && that.certs != null) || (this.certs != null && that.certs == null) || (this.certs != null && that.certs != null && this.certs.length != that.certs.length)) {
        return false;
    }
    int i, j;
    boolean match;
    for (i = 0; this.certs != null && i < this.certs.length; i++) {
        match = false;
        for (j = 0; j < that.certs.length; j++) {
            if (this.certs[i].equals(that.certs[j])) {
                match = true;
                break;
            }
        }
        if (!match)
            return false;
    }
    for (i = 0; that.certs != null && i < that.certs.length; i++) {
        match = false;
        for (j = 0; j < this.certs.length; j++) {
            if (that.certs[i].equals(this.certs[j])) {
                match = true;
                break;
            }
        }
        if (!match)
            return false;
    }
    return true;
}