/**
 * Writes a sequence of bytes to this channel from the given buffer,
 * starting at the given file position.
 *
 * <p> This method works in the same manner as the {@link
 * #write(ByteBuffer)} method, except that bytes are written starting at
 * the given file position rather than at the channel's current position.
 * This method does not modify this channel's position.  If the given
 * position is greater than the file's current size then the file will be
 * grown to accommodate the new bytes; the values of any bytes between the
 * previous end-of-file and the newly-written bytes are unspecified.  </p>
 *
 * @param  src
 *         The buffer from which bytes are to be transferred
 *
 * @param  position
 *         The file position at which the transfer is to begin;
 *         must be non-negative
 *
 * @return  The number of bytes written, possibly zero
 *
 * @throws  IllegalArgumentException
 *          If the position is negative
 *
 * @throws  NonWritableChannelException
 *          If this channel was not opened for writing
 *
 * @throws  ClosedChannelException
 *          If this channel is closed
 *
 * @throws  AsynchronousCloseException
 *          If another thread closes this channel
 *          while the write operation is in progress
 *
 * @throws  ClosedByInterruptException
 *          If another thread interrupts the current thread
 *          while the write operation is in progress, thereby
 *          closing the channel and setting the current thread's
 *          interrupt status
 *
 * @throws  IOException
 *          If some other I/O error occurs
 */
public abstract int write(ByteBuffer src, long position) throws IOException;