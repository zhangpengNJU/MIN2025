/**
 * Creates an asynchronous channel group with a given thread pool that
 * creates new threads as needed.
 *
 * <p> The {@code executor} parameter is an {@code ExecutorService} that
 * creates new threads as needed to execute tasks that are submitted to
 * handle I/O events and dispatch completion results for operations initiated
 * on asynchronous channels in the group. It may reuse previously constructed
 * threads when they are available.
 *
 * <p> The {@code initialSize} parameter may be used by the implementation
 * as a <em>hint</em> as to the initial number of tasks it may submit. For
 * example, it may be used to indicate the initial number of threads that
 * wait on I/O events.
 *
 * <p> The executor is intended to be used exclusively by the resulting
 * asynchronous channel group. Termination of the group results in the
 * orderly  {@link ExecutorService#shutdown shutdown} of the executor
 * service. Shutting down the executor service by other means results in
 * unspecified behavior.
 *
 * <p> The group is created by invoking the {@link
 * AsynchronousChannelProvider#openAsynchronousChannelGroup(ExecutorService,int)
 * openAsynchronousChannelGroup(ExecutorService,int)} method of the system-wide
 * default {@link AsynchronousChannelProvider} object.
 *
 * @param   executor
 *          The thread pool for the resulting group
 * @param   initialSize
 *          A value {@code >=0} or a negative value for implementation
 *          specific default
 *
 * @return  A new asynchronous channel group
 *
 * @throws  IOException
 *          If an I/O error occurs
 *
 * @see java.util.concurrent.Executors#newCachedThreadPool
 */
public static AsynchronousChannelGroup withCachedThreadPool(ExecutorService executor, int initialSize) throws IOException {
    return AsynchronousChannelProvider.provider().openAsynchronousChannelGroup(executor, initialSize);
}