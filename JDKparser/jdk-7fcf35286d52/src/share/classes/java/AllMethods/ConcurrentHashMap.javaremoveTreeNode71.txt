/**
 * Removes the given node, that must be present before this
 * call.  This is messier than typical red-black deletion code
 * because we cannot swap the contents of an interior node
 * with a leaf successor that is pinned by "next" pointers
 * that are accessible independently of lock. So instead we
 * swap the tree linkages.
 *
 * @return true if now too small, so should be untreeified
 */
final boolean removeTreeNode(TreeNode<K, V> p) {
    TreeNode<K, V> next = (TreeNode<K, V>) p.next;
    // unlink traversal pointers
    TreeNode<K, V> pred = p.prev;
    TreeNode<K, V> r, rl;
    if (pred == null)
        first = next;
    else
        pred.next = next;
    if (next != null)
        next.prev = pred;
    if (first == null) {
        root = null;
        return true;
    }
    if (// too small
    (r = root) == null || r.right == null || (rl = r.left) == null || rl.left == null)
        return true;
    lockRoot();
    try {
        TreeNode<K, V> replacement;
        TreeNode<K, V> pl = p.left;
        TreeNode<K, V> pr = p.right;
        if (pl != null && pr != null) {
            TreeNode<K, V> s = pr, sl;
            while (// find successor
            (sl = s.left) != null) s = sl;
            // swap colors
            boolean c = s.red;
            // swap colors
            s.red = p.red;
            // swap colors
            p.red = c;
            TreeNode<K, V> sr = s.right;
            TreeNode<K, V> pp = p.parent;
            if (s == pr) {
                // p was s's direct parent
                p.parent = s;
                s.right = p;
            } else {
                TreeNode<K, V> sp = s.parent;
                if ((p.parent = sp) != null) {
                    if (s == sp.left)
                        sp.left = p;
                    else
                        sp.right = p;
                }
                if ((s.right = pr) != null)
                    pr.parent = s;
            }
            p.left = null;
            if ((p.right = sr) != null)
                sr.parent = p;
            if ((s.left = pl) != null)
                pl.parent = s;
            if ((s.parent = pp) == null)
                r = s;
            else if (p == pp.left)
                pp.left = s;
            else
                pp.right = s;
            if (sr != null)
                replacement = sr;
            else
                replacement = p;
        } else if (pl != null)
            replacement = pl;
        else if (pr != null)
            replacement = pr;
        else
            replacement = p;
        if (replacement != p) {
            TreeNode<K, V> pp = replacement.parent = p.parent;
            if (pp == null)
                r = replacement;
            else if (p == pp.left)
                pp.left = replacement;
            else
                pp.right = replacement;
            p.left = p.right = p.parent = null;
        }
        root = (p.red) ? r : balanceDeletion(r, replacement);
        if (p == replacement) {
            // detach pointers
            TreeNode<K, V> pp;
            if ((pp = p.parent) != null) {
                if (p == pp.left)
                    pp.left = null;
                else if (p == pp.right)
                    pp.right = null;
                p.parent = null;
            }
        }
    } finally {
        unlockRoot();
    }
    assert checkInvariants(root);
    return false;
}