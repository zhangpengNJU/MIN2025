void doDispose() {
    class DisposeAction implements Runnable {

        public void run() {
            disposing = true;
            try {
                // Check if this window is the fullscreen window for the
                // device. Exit the fullscreen mode prior to disposing
                // of the window if that's the case.
                GraphicsDevice gd = getGraphicsConfiguration().getDevice();
                if (gd.getFullScreenWindow() == Window.this) {
                    gd.setFullScreenWindow(null);
                }
                Object[] ownedWindowArray;
                synchronized (ownedWindowList) {
                    ownedWindowArray = new Object[ownedWindowList.size()];
                    ownedWindowList.copyInto(ownedWindowArray);
                }
                for (int i = 0; i < ownedWindowArray.length; i++) {
                    Window child = (Window) (((WeakReference) (ownedWindowArray[i])).get());
                    if (child != null) {
                        child.disposeImpl();
                    }
                }
                hide();
                beforeFirstShow = true;
                removeNotify();
                synchronized (inputContextLock) {
                    if (inputContext != null) {
                        inputContext.dispose();
                        inputContext = null;
                    }
                }
                clearCurrentFocusCycleRootOnHide();
            } finally {
                disposing = false;
            }
        }
    }
    boolean fireWindowClosedEvent = isDisplayable();
    DisposeAction action = new DisposeAction();
    if (EventQueue.isDispatchThread()) {
        action.run();
    } else {
        try {
            EventQueue.invokeAndWait(this, action);
        } catch (InterruptedException e) {
            System.err.println("Disposal was interrupted:");
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            System.err.println("Exception during disposal:");
            e.printStackTrace();
        }
    }
    // Execute outside the Runnable because postWindowEvent is
    // synchronized on (this). We don't need to synchronize the call
    // on the EventQueue anyways.
    if (fireWindowClosedEvent) {
        postWindowEvent(WindowEvent.WINDOW_CLOSED);
    }
}