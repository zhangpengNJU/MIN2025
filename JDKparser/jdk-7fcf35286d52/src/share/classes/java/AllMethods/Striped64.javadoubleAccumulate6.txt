/**
 * Same as longAccumulate, but injecting long/double conversions
 * in too many places to sensibly merge with long version, given
 * the low-overhead requirements of this class. So must instead be
 * maintained by copy/paste/adapt.
 */
final void doubleAccumulate(double x, DoubleBinaryOperator fn, boolean wasUncontended) {
    int h;
    if ((h = getProbe()) == 0) {
        // force initialization
        ThreadLocalRandom.current();
        h = getProbe();
        wasUncontended = true;
    }
    // True if last slot nonempty
    boolean collide = false;
    for (; ; ) {
        Cell[] as;
        Cell a;
        int n;
        long v;
        if ((as = cells) != null && (n = as.length) > 0) {
            if ((a = as[(n - 1) & h]) == null) {
                if (cellsBusy == 0) {
                    // Try to attach new Cell
                    Cell r = new Cell(Double.doubleToRawLongBits(x));
                    if (cellsBusy == 0 && casCellsBusy()) {
                        boolean created = false;
                        try {
                            // Recheck under lock
                            Cell[] rs;
                            int m, j;
                            if ((rs = cells) != null && (m = rs.length) > 0 && rs[j = (m - 1) & h] == null) {
                                rs[j] = r;
                                created = true;
                            }
                        } finally {
                            cellsBusy = 0;
                        }
                        if (created)
                            break;
                        // Slot is now non-empty
                        continue;
                    }
                }
                collide = false;
            } else if (// CAS already known to fail
            !wasUncontended)
                // Continue after rehash
                wasUncontended = true;
            else if (a.cas(v = a.value, ((fn == null) ? Double.doubleToRawLongBits(Double.longBitsToDouble(v) + x) : Double.doubleToRawLongBits(fn.applyAsDouble(Double.longBitsToDouble(v), x)))))
                break;
            else if (n >= NCPU || cells != as)
                // At max size or stale
                collide = false;
            else if (!collide)
                collide = true;
            else if (cellsBusy == 0 && casCellsBusy()) {
                try {
                    if (cells == as) {
                        // Expand table unless stale
                        Cell[] rs = new Cell[n << 1];
                        for (int i = 0; i < n; ++i) rs[i] = as[i];
                        cells = rs;
                    }
                } finally {
                    cellsBusy = 0;
                }
                collide = false;
                // Retry with expanded table
                continue;
            }
            h = advanceProbe(h);
        } else if (cellsBusy == 0 && cells == as && casCellsBusy()) {
            boolean init = false;
            try {
                // Initialize table
                if (cells == as) {
                    Cell[] rs = new Cell[2];
                    rs[h & 1] = new Cell(Double.doubleToRawLongBits(x));
                    cells = rs;
                    init = true;
                }
            } finally {
                cellsBusy = 0;
            }
            if (init)
                break;
        } else if (casBase(v = base, ((fn == null) ? Double.doubleToRawLongBits(Double.longBitsToDouble(v) + x) : Double.doubleToRawLongBits(fn.applyAsDouble(Double.longBitsToDouble(v), x)))))
            // Fall back on using base
            break;
    }
}