/**
 * Reads the value of a file attribute.
 *
 * <p> The {@code attribute} parameter identifies the attribute to be read
 * and takes the form:
 * <blockquote>
 * [<i>view-name</i><b>:</b>]<i>attribute-name</i>
 * </blockquote>
 * where square brackets [...] delineate an optional component and the
 * character {@code ':'} stands for itself.
 *
 * <p> <i>view-name</i> is the {@link FileAttributeView#name name} of a {@link
 * FileAttributeView} that identifies a set of file attributes. If not
 * specified then it defaults to {@code "basic"}, the name of the file
 * attribute view that identifies the basic set of file attributes common to
 * many file systems. <i>attribute-name</i> is the name of the attribute.
 *
 * <p> The {@code options} array may be used to indicate how symbolic links
 * are handled for the case that the file is a symbolic link. By default,
 * symbolic links are followed and the file attribute of the final target
 * of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS
 * NOFOLLOW_LINKS} is present then symbolic links are not followed.
 *
 * <p> <b>Usage Example:</b>
 * Suppose we require the user ID of the file owner on a system that
 * supports a "{@code unix}" view:
 * <pre>
 *    Path path = ...
 *    int uid = (Integer)Files.getAttribute(path, "unix:uid");
 * </pre>
 *
 * @param   path
 *          the path to the file
 * @param   attribute
 *          the attribute to read
 * @param   options
 *          options indicating how symbolic links are handled
 *
 * @return  the attribute value
 *
 * @throws  UnsupportedOperationException
 *          if the attribute view is not available
 * @throws  IllegalArgumentException
 *          if the attribute name is not specified or is not recognized
 * @throws  IOException
 *          if an I/O error occurs
 * @throws  SecurityException
 *          In the case of the default provider, and a security manager is
 *          installed, its {@link SecurityManager#checkRead(String) checkRead}
 *          method denies read access to the file. If this method is invoked
 *          to read security sensitive attributes then the security manager
 *          may be invoked to check for additional permissions.
 */
public static Object getAttribute(Path path, String attribute, LinkOption... options) throws IOException {
    // only one attribute should be read
    if (attribute.indexOf('*') >= 0 || attribute.indexOf(',') >= 0)
        throw new IllegalArgumentException(attribute);
    Map<String, Object> map = readAttributes(path, attribute, options);
    assert map.size() == 1;
    String name;
    int pos = attribute.indexOf(':');
    if (pos == -1) {
        name = attribute;
    } else {
        name = (pos == attribute.length()) ? "" : attribute.substring(pos + 1);
    }
    return map.get(name);
}