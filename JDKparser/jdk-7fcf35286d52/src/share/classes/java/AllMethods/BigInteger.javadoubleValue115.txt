/**
 * Converts this BigInteger to a {@code double}.  This
 * conversion is similar to the
 * <i>narrowing primitive conversion</i> from {@code double} to
 * {@code float} as defined in section 5.1.3 of
 * <cite>The Java&trade; Language Specification</cite>:
 * if this BigInteger has too great a magnitude
 * to represent as a {@code double}, it will be converted to
 * {@link Double#NEGATIVE_INFINITY} or {@link
 * Double#POSITIVE_INFINITY} as appropriate.  Note that even when
 * the return value is finite, this conversion can lose
 * information about the precision of the BigInteger value.
 *
 * @return this BigInteger converted to a {@code double}.
 */
public double doubleValue() {
    if (signum == 0) {
        return 0.0;
    }
    int exponent = ((mag.length - 1) << 5) + bitLengthForInt(mag[0]) - 1;
    // exponent == floor(log2(abs(this))Double)
    if (exponent < Long.SIZE - 1) {
        return longValue();
    } else if (exponent > Double.MAX_EXPONENT) {
        return signum > 0 ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
    }
    /*
         * We need the top SIGNIFICAND_WIDTH bits, including the "implicit"
         * one bit. To make rounding easier, we pick out the top
         * SIGNIFICAND_WIDTH + 1 bits, so we have one to help us round up or
         * down. twiceSignifFloor will contain the top SIGNIFICAND_WIDTH + 1
         * bits, and signifFloor the top SIGNIFICAND_WIDTH.
         *
         * It helps to consider the real number signif = abs(this) *
         * 2^(SIGNIFICAND_WIDTH - 1 - exponent).
         */
    int shift = exponent - DoubleConsts.SIGNIFICAND_WIDTH;
    long twiceSignifFloor;
    // twiceSignifFloor will be == abs().shiftRight(shift).longValue()
    // We do the shift into a long directly to improve performance.
    int nBits = shift & 0x1f;
    int nBits2 = 32 - nBits;
    int highBits;
    int lowBits;
    if (nBits == 0) {
        highBits = mag[0];
        lowBits = mag[1];
    } else {
        highBits = mag[0] >>> nBits;
        lowBits = (mag[0] << nBits2) | (mag[1] >>> nBits);
        if (highBits == 0) {
            highBits = lowBits;
            lowBits = (mag[1] << nBits2) | (mag[2] >>> nBits);
        }
    }
    twiceSignifFloor = ((highBits & LONG_MASK) << 32) | (lowBits & LONG_MASK);
    long signifFloor = twiceSignifFloor >> 1;
    // remove the implied bit
    signifFloor &= DoubleConsts.SIGNIF_BIT_MASK;
    /*
         * We round up if either the fractional part of signif is strictly
         * greater than 0.5 (which is true if the 0.5 bit is set and any lower
         * bit is set), or if the fractional part of signif is >= 0.5 and
         * signifFloor is odd (which is true if both the 0.5 bit and the 1 bit
         * are set). This is equivalent to the desired HALF_EVEN rounding.
         */
    boolean increment = (twiceSignifFloor & 1) != 0 && ((signifFloor & 1) != 0 || abs().getLowestSetBit() < shift);
    long signifRounded = increment ? signifFloor + 1 : signifFloor;
    long bits = (long) ((exponent + DoubleConsts.EXP_BIAS)) << (DoubleConsts.SIGNIFICAND_WIDTH - 1);
    bits += signifRounded;
    /*
         * If signifRounded == 2^53, we'd need to set all of the significand
         * bits to zero and add 1 to the exponent. This is exactly the behavior
         * we get from just adding signifRounded to bits directly. If the
         * exponent is Double.MAX_EXPONENT, we round up (correctly) to
         * Double.POSITIVE_INFINITY.
         */
    bits |= signum & DoubleConsts.SIGN_BIT_MASK;
    return Double.longBitsToDouble(bits);
}