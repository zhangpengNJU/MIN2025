/**
 * Returns a lexicographic-order comparator with a function that
 * extracts a key to be compared with the given {@code Comparator}.
 *
 * @implSpec This default implementation behaves as if {@code
 *           thenComparing(comparing(keyExtractor, cmp))}.
 *
 * @param  <U>  the type of the sort key
 * @param  keyExtractor the function used to extract the sort key
 * @param  keyComparator the {@code Comparator} used to compare the sort key
 * @return a lexicographic-order comparator composed of this comparator
 *         and then comparing on the key extracted by the keyExtractor function
 * @throws NullPointerException if either argument is null.
 * @see #comparing(Function, Comparator)
 * @see #thenComparing(Comparator)
 * @since 1.8
 */
default <U> Comparator<T> thenComparing(Function<? super T, ? extends U> keyExtractor, Comparator<? super U> keyComparator) {
    return thenComparing(comparing(keyExtractor, keyComparator));
}