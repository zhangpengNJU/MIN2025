/**
 * Returns a KeyFactory object that converts
 * public/private keys of the specified algorithm.
 *
 * <p> A new KeyFactory object encapsulating the
 * KeyFactorySpi implementation from the specified Provider
 * object is returned.  Note that the specified Provider object
 * does not have to be registered in the provider list.
 *
 * @param algorithm the name of the requested key algorithm.
 * See the KeyFactory section in the <a href=
 * "{@docRoot}/../technotes/guides/security/StandardNames.html#KeyFactory">
 * Java Cryptography Architecture Standard Algorithm Name Documentation</a>
 * for information about standard algorithm names.
 *
 * @param provider the provider.
 *
 * @return the new KeyFactory object.
 *
 * @exception NoSuchAlgorithmException if a KeyFactorySpi
 *          implementation for the specified algorithm is not available
 *          from the specified Provider object.
 *
 * @exception IllegalArgumentException if the specified provider is null.
 *
 * @see Provider
 *
 * @since 1.4
 */
public static KeyFactory getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException {
    Instance instance = GetInstance.getInstance("KeyFactory", KeyFactorySpi.class, algorithm, provider);
    return new KeyFactory((KeyFactorySpi) instance.impl, instance.provider, algorithm);
}