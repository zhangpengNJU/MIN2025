/**
 * Returns a data element array representation of a pixel in this
 * <code>ColorModel</code>, given an array of unnormalized color/alpha
 * components.  This array can then be passed to the
 * <code>setDataElements</code> method of a <code>WritableRaster</code>
 * object.  This method will throw an <code>IllegalArgumentException</code>
 * if color component values for this <code>ColorModel</code> are not
 * conveniently representable in the unnormalized form.
 * An <code>ArrayIndexOutOfBoundsException</code> is thrown
 * if the <code>components</code> array is not large enough to hold
 * all the color and alpha components (starting at
 * <code>offset</code>).  If the <code>obj</code> variable is
 * <code>null</code>, a new array will be allocated.  If
 * <code>obj</code> is not <code>null</code>, it must be a primitive
 * array of type transferType; otherwise, a
 * <code>ClassCastException</code> is thrown.  An
 * <code>ArrayIndexOutOfBoundsException</code> is thrown if
 * <code>obj</code> is not large enough to hold a pixel value for this
 * <code>ColorModel</code>.
 * Since <code>ColorModel</code> is an abstract class,
 * any instance is an instance of a subclass.  Subclasses must
 * override this method since the implementation in this abstract
 * class throws an <code>UnsupportedOperationException</code>.
 * @param components an array of unnormalized color and alpha
 * components
 * @param offset the index into <code>components</code> at which to
 * begin retrieving color and alpha components
 * @param obj the <code>Object</code> representing an array of color
 * and alpha components
 * @return an <code>Object</code> representing an array of color and
 * alpha components.
 * @throws ClassCastException if <code>obj</code>
 *  is not a primitive array of type <code>transferType</code>
 * @throws ArrayIndexOutOfBoundsException if
 *  <code>obj</code> is not large enough to hold a pixel value
 *  for this <code>ColorModel</code> or the <code>components</code>
 *  array is not large enough to hold all of the color and alpha
 *  components starting at <code>offset</code>
 * @throws IllegalArgumentException if
 *  component values for this <code>ColorModel</code> are not
 *  conveniently representable in the unnormalized form
 * @throws UnsupportedOperationException if this
 *  method is not supported by this <code>ColorModel</code>
 * @see WritableRaster#setDataElements
 * @see SampleModel#setDataElements
 */
public Object getDataElements(int[] components, int offset, Object obj) {
    throw new UnsupportedOperationException("This method has not been implemented " + "for this color model.");
}