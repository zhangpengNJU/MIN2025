/**
 * Opens a directory, returning a {@link DirectoryStream} to iterate over
 * all entries in the directory. The elements returned by the directory
 * stream's {@link DirectoryStream#iterator iterator} are of type {@code
 * Path}, each one representing an entry in the directory. The {@code Path}
 * objects are obtained as if by {@link Path#resolve(Path) resolving} the
 * name of the directory entry against {@code dir}.
 *
 * <p> When not using the try-with-resources construct, then directory
 * stream's {@code close} method should be invoked after iteration is
 * completed so as to free any resources held for the open directory.
 *
 * <p> When an implementation supports operations on entries in the
 * directory that execute in a race-free manner then the returned directory
 * stream is a {@link SecureDirectoryStream}.
 *
 * @param   dir
 *          the path to the directory
 *
 * @return  a new and open {@code DirectoryStream} object
 *
 * @throws  NotDirectoryException
 *          if the file could not otherwise be opened because it is not
 *          a directory <i>(optional specific exception)</i>
 * @throws  IOException
 *          if an I/O error occurs
 * @throws  SecurityException
 *          In the case of the default provider, and a security manager is
 *          installed, the {@link SecurityManager#checkRead(String) checkRead}
 *          method is invoked to check read access to the directory.
 */
public static DirectoryStream<Path> newDirectoryStream(Path dir) throws IOException {
    return provider(dir).newDirectoryStream(dir, AcceptAllFilter.FILTER);
}