/**
 * Returns the alpha component for the specified pixel, scaled from
 * 0 to 255.  The pixel value is specified by an array of data
 * elements of type <CODE>transferType</CODE> passed in as an
 * object reference.  Since <code>ComponentColorModel</code> can be
 * subclassed, subclasses inherit the
 * implementation of this method and if they don't override it then
 * they throw an exception if they use an unsupported
 * <code>transferType</code>.
 *
 * @param inData The pixel from which you want to get the alpha component,
 * specified by an array of data elements of type <CODE>transferType</CODE>.
 *
 * @return The alpha component for the specified pixel, as an int.
 *
 * @throws ClassCastException If <CODE>inData</CODE> is not a primitive array
 * of type <CODE>transferType</CODE>.
 * @throws ArrayIndexOutOfBoundsException if <CODE>inData</CODE> is not
 * large enough to hold a pixel value for this
 * <CODE>ColorModel</CODE>.
 * @throws UnsupportedOperationException If the transfer type of
 * this <CODE>ComponentColorModel</CODE>
 * is not one of the supported transfer types:
 * <CODE>DataBuffer.TYPE_BYTE</CODE>, <CODE>DataBuffer.TYPE_USHORT</CODE>,
 * <CODE>DataBuffer.TYPE_INT</CODE>, <CODE>DataBuffer.TYPE_SHORT</CODE>,
 * <CODE>DataBuffer.TYPE_FLOAT</CODE>, or <CODE>DataBuffer.TYPE_DOUBLE</CODE>.
 */
public int getAlpha(Object inData) {
    if (supportsAlpha == false) {
        return 255;
    }
    int alpha = 0;
    int aIdx = numColorComponents;
    int mask = (1 << nBits[aIdx]) - 1;
    switch(transferType) {
        case DataBuffer.TYPE_SHORT:
            short[] sdata = (short[]) inData;
            alpha = (int) ((sdata[aIdx] / 32767.0f) * 255.0f + 0.5f);
            return alpha;
        case DataBuffer.TYPE_FLOAT:
            float[] fdata = (float[]) inData;
            alpha = (int) (fdata[aIdx] * 255.0f + 0.5f);
            return alpha;
        case DataBuffer.TYPE_DOUBLE:
            double[] ddata = (double[]) inData;
            alpha = (int) (ddata[aIdx] * 255.0 + 0.5);
            return alpha;
        case DataBuffer.TYPE_BYTE:
            byte[] bdata = (byte[]) inData;
            alpha = bdata[aIdx] & mask;
            break;
        case DataBuffer.TYPE_USHORT:
            short[] usdata = (short[]) inData;
            alpha = usdata[aIdx] & mask;
            break;
        case DataBuffer.TYPE_INT:
            int[] idata = (int[]) inData;
            alpha = idata[aIdx];
            break;
        default:
            throw new UnsupportedOperationException("This method has not " + "been implemented for transferType " + transferType);
    }
    if (nBits[aIdx] == 8) {
        return alpha;
    } else {
        return (int) ((((float) alpha) / ((float) ((1 << nBits[aIdx]) - 1))) * 255.0f + 0.5f);
    }
}