@Override
public void compute() {
    SizedCollectorTask<P_IN, P_OUT, T_SINK, K> task = this;
    Spliterator<P_IN> rightSplit = spliterator, leftSplit;
    while (rightSplit.estimateSize() > task.targetSize && (leftSplit = rightSplit.trySplit()) != null) {
        task.setPendingCount(1);
        long leftSplitSize = leftSplit.estimateSize();
        task.makeChild(leftSplit, task.offset, leftSplitSize).fork();
        task = task.makeChild(rightSplit, task.offset + leftSplitSize, task.length - leftSplitSize);
    }
    assert task.offset + task.length < MAX_ARRAY_SIZE;
    @SuppressWarnings("unchecked")
    T_SINK sink = (T_SINK) task;
    task.helper.wrapAndCopyInto(sink, rightSplit);
    task.propagateCompletion();
}