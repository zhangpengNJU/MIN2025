public final void compute() {
    // localize all params
    long[] a = this.a, w = this.w;
    int lb = this.lbase, ln = this.lsize, rb = this.rbase, rn = this.rsize, k = this.wbase, g = this.gran;
    if (a == null || w == null || lb < 0 || rb < 0 || k < 0)
        // hoist checks
        throw new IllegalStateException();
    for (int lh, rh; ; ) {
        // split larger, find point in smaller
        if (ln >= rn) {
            if (ln <= g)
                break;
            rh = rn;
            long split = a[(lh = ln >>> 1) + lb];
            for (int lo = 0; lo < rh; ) {
                int rm = (lo + rh) >>> 1;
                if (split <= a[rm + rb])
                    rh = rm;
                else
                    lo = rm + 1;
            }
        } else {
            if (rn <= g)
                break;
            lh = ln;
            long split = a[(rh = rn >>> 1) + rb];
            for (int lo = 0; lo < lh; ) {
                int lm = (lo + lh) >>> 1;
                if (split <= a[lm + lb])
                    lh = lm;
                else
                    lo = lm + 1;
            }
        }
        Merger m = new Merger(this, a, w, lb + lh, ln - lh, rb + rh, rn - rh, k + lh + rh, g);
        rn = rh;
        ln = lh;
        addToPendingCount(1);
        m.fork();
    }
    // index bounds
    int lf = lb + ln, rf = rb + rn;
    while (lb < lf && rb < rf) {
        long t, al, ar;
        if ((al = a[lb]) <= (ar = a[rb])) {
            lb++;
            t = al;
        } else {
            rb++;
            t = ar;
        }
        w[k++] = t;
    }
    if (rb < rf)
        System.arraycopy(a, rb, w, k, rf - rb);
    else if (lb < lf)
        System.arraycopy(a, lb, w, k, lf - lb);
    tryComplete();
}