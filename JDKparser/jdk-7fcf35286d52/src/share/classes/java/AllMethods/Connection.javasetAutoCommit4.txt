/**
 *  Sets this connection's auto-commit mode to the given state.
 *  If a connection is in auto-commit mode, then all its SQL
 *  statements will be executed and committed as individual
 *  transactions.  Otherwise, its SQL statements are grouped into
 *  transactions that are terminated by a call to either
 *  the method <code>commit</code> or the method <code>rollback</code>.
 *  By default, new connections are in auto-commit
 *  mode.
 *  <P>
 *  The commit occurs when the statement completes. The time when the statement
 *  completes depends on the type of SQL Statement:
 *  <ul>
 *  <li>For DML statements, such as Insert, Update or Delete, and DDL statements,
 *  the statement is complete as soon as it has finished executing.
 *  <li>For Select statements, the statement is complete when the associated result
 *  set is closed.
 *  <li>For <code>CallableStatement</code> objects or for statements that return
 *  multiple results, the statement is complete
 *  when all of the associated result sets have been closed, and all update
 *  counts and output parameters have been retrieved.
 * </ul>
 *  <P>
 *  <B>NOTE:</B>  If this method is called during a transaction and the
 *  auto-commit mode is changed, the transaction is committed.  If
 *  <code>setAutoCommit</code> is called and the auto-commit mode is
 *  not changed, the call is a no-op.
 *
 *  @param autoCommit <code>true</code> to enable auto-commit mode;
 *          <code>false</code> to disable it
 *  @exception SQLException if a database access error occurs,
 *   setAutoCommit(true) is called while participating in a distributed transaction,
 *  or this method is called on a closed connection
 *  @see #getAutoCommit
 */
void setAutoCommit(boolean autoCommit) throws SQLException;