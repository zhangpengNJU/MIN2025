/**
 * Creates a {@link Spliterator} over the elements in this collection.
 *
 * Implementations should document characteristic values reported by the
 * spliterator.  Such characteristic values are not required to be reported
 * if the spliterator reports {@link Spliterator#SIZED} and this collection
 * contains no elements.
 *
 * <p>The default implementation should be overridden by subclasses that
 * can return a more efficient spliterator.  In order to
 * preserve expected laziness behavior for the {@link #stream()} and
 * {@link #parallelStream()}} methods, spliterators should either have the
 * characteristic of {@code IMMUTABLE} or {@code CONCURRENT}, or be
 * <em><a href="Spliterator.html#binding">late-binding</a></em>.
 * If none of these is practical, the overriding class should describe the
 * spliterator's documented policy of binding and structural interference,
 * and should override the {@link #stream()} and {@link #parallelStream()}
 * methods to create streams using a {@code Supplier} of the spliterator,
 * as in:
 * <pre>{@code
 *     Stream<E> s = StreamSupport.stream(() -> spliterator(), spliteratorCharacteristics)
 * }</pre>
 * <p>These requirements ensure that streams produced by the
 * {@link #stream()} and {@link #parallelStream()} methods will reflect the
 * contents of the collection as of initiation of the terminal stream
 * operation.
 *
 * @implSpec
 * The default implementation creates a
 * <em><a href="Spliterator.html#binding">late-binding</a></em> spliterator
 * from the collections's {@code Iterator}.  The spliterator inherits the
 * <em>fail-fast</em> properties of the collection's iterator.
 * <p>
 * The created {@code Spliterator} reports {@link Spliterator#SIZED}.
 *
 * @implNote
 * The created {@code Spliterator} additionally reports
 * {@link Spliterator#SUBSIZED}.
 *
 * <p>If a spliterator covers no elements then the reporting of additional
 * characteristic values, beyond that of {@code SIZED} and {@code SUBSIZED},
 * does not aid clients to control, specialize or simplify computation.
 * However, this does enable shared use of an immutable and empty
 * spliterator instance (see {@link Spliterators#emptySpliterator()}) for
 * empty collections, and enables clients to determine if such a spliterator
 * covers no elements.
 *
 * @return a {@code Spliterator} over the elements in this collection
 * @since 1.8
 */
@Override
default Spliterator<E> spliterator() {
    return Spliterators.spliterator(this, 0);
}