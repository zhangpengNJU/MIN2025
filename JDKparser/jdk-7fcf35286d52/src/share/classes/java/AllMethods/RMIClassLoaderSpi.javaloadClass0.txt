/**
 * Provides the implementation for
 * {@link RMIClassLoader#loadClass(URL,String)},
 * {@link RMIClassLoader#loadClass(String,String)}, and
 * {@link RMIClassLoader#loadClass(String,String,ClassLoader)}.
 *
 * Loads a class from a codebase URL path, optionally using the
 * supplied loader.
 *
 * Typically, a provider implementation will attempt to
 * resolve the named class using the given <code>defaultLoader</code>,
 * if specified, before attempting to resolve the class from the
 * codebase URL path.
 *
 * <p>An implementation of this method must either return a class
 * with the given name or throw an exception.
 *
 * @param   codebase the list of URLs (separated by spaces) to load
 * the class from, or <code>null</code>
 *
 * @param   name the name of the class to load
 *
 * @param   defaultLoader additional contextual class loader
 * to use, or <code>null</code>
 *
 * @return  the <code>Class</code> object representing the loaded class
 *
 * @throws  MalformedURLException if <code>codebase</code> is
 * non-<code>null</code> and contains an invalid URL, or
 * if <code>codebase</code> is <code>null</code> and a provider-specific
 * URL used to load classes is invalid
 *
 * @throws  ClassNotFoundException if a definition for the class
 * could not be found at the specified location
 */
public abstract Class<?> loadClass(String codebase, String name, ClassLoader defaultLoader) throws MalformedURLException, ClassNotFoundException;