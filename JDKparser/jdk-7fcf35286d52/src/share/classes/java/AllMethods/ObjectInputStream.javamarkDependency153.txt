/**
 * Registers a dependency (in exception status) of one handle on
 * another.  The dependent handle must be "open" (i.e., assigned, but
 * not finished yet).  No action is taken if either dependent or target
 * handle is NULL_HANDLE.
 */
void markDependency(int dependent, int target) {
    if (dependent == NULL_HANDLE || target == NULL_HANDLE) {
        return;
    }
    switch(status[dependent]) {
        case STATUS_UNKNOWN:
            switch(status[target]) {
                case STATUS_OK:
                    // ignore dependencies on objs with no exception
                    break;
                case STATUS_EXCEPTION:
                    // eagerly propagate exception
                    markException(dependent, (ClassNotFoundException) entries[target]);
                    break;
                case STATUS_UNKNOWN:
                    // add to dependency list of target
                    if (deps[target] == null) {
                        deps[target] = new HandleList();
                    }
                    deps[target].add(dependent);
                    // remember lowest unresolved target seen
                    if (lowDep < 0 || lowDep > target) {
                        lowDep = target;
                    }
                    break;
                default:
                    throw new InternalError();
            }
            break;
        case STATUS_EXCEPTION:
            break;
        default:
            throw new InternalError();
    }
}