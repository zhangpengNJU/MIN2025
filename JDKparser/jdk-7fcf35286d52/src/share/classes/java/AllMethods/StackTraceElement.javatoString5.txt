/**
 * Returns a string representation of this stack trace element.  The
 * format of this string depends on the implementation, but the following
 * examples may be regarded as typical:
 * <ul>
 * <li>
 *   {@code "MyClass.mash(MyClass.java:9)"} - Here, {@code "MyClass"}
 *   is the <i>fully-qualified name</i> of the class containing the
 *   execution point represented by this stack trace element,
 *   {@code "mash"} is the name of the method containing the execution
 *   point, {@code "MyClass.java"} is the source file containing the
 *   execution point, and {@code "9"} is the line number of the source
 *   line containing the execution point.
 * <li>
 *   {@code "MyClass.mash(MyClass.java)"} - As above, but the line
 *   number is unavailable.
 * <li>
 *   {@code "MyClass.mash(Unknown Source)"} - As above, but neither
 *   the file name nor the line  number are available.
 * <li>
 *   {@code "MyClass.mash(Native Method)"} - As above, but neither
 *   the file name nor the line  number are available, and the method
 *   containing the execution point is known to be a native method.
 * </ul>
 * @see    Throwable#printStackTrace()
 */
public String toString() {
    return getClassName() + "." + methodName + (isNativeMethod() ? "(Native Method)" : (fileName != null && lineNumber >= 0 ? "(" + fileName + ":" + lineNumber + ")" : (fileName != null ? "(" + fileName + ")" : "(Unknown Source)")));
}