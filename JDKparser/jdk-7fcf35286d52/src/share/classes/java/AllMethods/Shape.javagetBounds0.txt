/**
 * Returns an integer {@link Rectangle} that completely encloses the
 * <code>Shape</code>.  Note that there is no guarantee that the
 * returned <code>Rectangle</code> is the smallest bounding box that
 * encloses the <code>Shape</code>, only that the <code>Shape</code>
 * lies entirely within the indicated  <code>Rectangle</code>.  The
 * returned <code>Rectangle</code> might also fail to completely
 * enclose the <code>Shape</code> if the <code>Shape</code> overflows
 * the limited range of the integer data type.  The
 * <code>getBounds2D</code> method generally returns a
 * tighter bounding box due to its greater flexibility in
 * representation.
 *
 * <p>
 * Note that the <a href="{@docRoot}/java/awt/Shape.html#def_insideness">
 * definition of insideness</a> can lead to situations where points
 * on the defining outline of the {@code shape} may not be considered
 * contained in the returned {@code bounds} object, but only in cases
 * where those points are also not considered contained in the original
 * {@code shape}.
 * </p>
 * <p>
 * If a {@code point} is inside the {@code shape} according to the
 * {@link #contains(double x, double y) contains(point)} method, then
 * it must be inside the returned {@code Rectangle} bounds object
 * according to the {@link #contains(double x, double y) contains(point)}
 * method of the {@code bounds}. Specifically:
 * </p>
 * <p>
 *  {@code shape.contains(x,y)} requires {@code bounds.contains(x,y)}
 * </p>
 * <p>
 * If a {@code point} is not inside the {@code shape}, then it might
 * still be contained in the {@code bounds} object:
 * </p>
 * <p>
 *  {@code bounds.contains(x,y)} does not imply {@code shape.contains(x,y)}
 * </p>
 * @return an integer <code>Rectangle</code> that completely encloses
 *                 the <code>Shape</code>.
 * @see #getBounds2D
 * @since 1.2
 */
public Rectangle getBounds();