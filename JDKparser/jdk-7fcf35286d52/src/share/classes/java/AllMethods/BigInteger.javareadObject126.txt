/**
 * Reconstitute the {@code BigInteger} instance from a stream (that is,
 * deserialize it). The magnitude is read in as an array of bytes
 * for historical reasons, but it is converted to an array of ints
 * and the byte array is discarded.
 * Note:
 * The current convention is to initialize the cache fields, bitCount,
 * bitLength and lowestSetBit, to 0 rather than some other marker value.
 * Therefore, no explicit action to set these fields needs to be taken in
 * readObject because those fields already have a 0 value be default since
 * defaultReadObject is not being used.
 */
private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
    /*
         * In order to maintain compatibility with previous serialized forms,
         * the magnitude of a BigInteger is serialized as an array of bytes.
         * The magnitude field is used as a temporary store for the byte array
         * that is deserialized. The cached computation fields should be
         * transient but are serialized for compatibility reasons.
         */
    // prepare to read the alternate persistent fields
    ObjectInputStream.GetField fields = s.readFields();
    // Read the alternate persistent fields that we care about
    int sign = fields.get("signum", -2);
    byte[] magnitude = (byte[]) fields.get("magnitude", null);
    // Validate signum
    if (sign < -1 || sign > 1) {
        String message = "BigInteger: Invalid signum value";
        if (fields.defaulted("signum"))
            message = "BigInteger: Signum not present in stream";
        throw new java.io.StreamCorruptedException(message);
    }
    int[] mag = stripLeadingZeroBytes(magnitude);
    if ((mag.length == 0) != (sign == 0)) {
        String message = "BigInteger: signum-magnitude mismatch";
        if (fields.defaulted("magnitude"))
            message = "BigInteger: Magnitude not present in stream";
        throw new java.io.StreamCorruptedException(message);
    }
    // Commit final fields via Unsafe
    UnsafeHolder.putSign(this, sign);
    // Calculate mag field from magnitude and discard magnitude
    UnsafeHolder.putMag(this, mag);
    if (mag.length >= MAX_MAG_LENGTH) {
        try {
            checkRange();
        } catch (ArithmeticException e) {
            throw new java.io.StreamCorruptedException("BigInteger: Out of the supported range");
        }
    }
}