/**
 * Request the Image or ImageProducer to start delivering pixels and
 * wait for all of the pixels in the rectangle of interest to be
 * delivered or until the specified timeout has elapsed.  This method
 * behaves in the following ways, depending on the value of
 * <code>ms</code>:
 * <ul>
 * <li> If {@code ms == 0}, waits until all pixels are delivered
 * <li> If {@code ms > 0}, waits until all pixels are delivered
 * as timeout expires.
 * <li> If {@code ms < 0}, returns <code>true</code> if all pixels
 * are grabbed, <code>false</code> otherwise and does not wait.
 * </ul>
 * @param ms the number of milliseconds to wait for the image pixels
 * to arrive before timing out
 * @return true if the pixels were successfully grabbed, false on
 * abort, error or timeout
 * @exception InterruptedException
 *            Another thread has interrupted this thread.
 */
public synchronized boolean grabPixels(long ms) throws InterruptedException {
    if ((flags & DONEBITS) != 0) {
        return (flags & GRABBEDBITS) != 0;
    }
    long end = ms + System.currentTimeMillis();
    if (!grabbing) {
        grabbing = true;
        flags &= ~(ImageObserver.ABORT);
        producer.startProduction(this);
    }
    while (grabbing) {
        long timeout;
        if (ms == 0) {
            timeout = 0;
        } else {
            timeout = end - System.currentTimeMillis();
            if (timeout <= 0) {
                break;
            }
        }
        wait(timeout);
    }
    return (flags & GRABBEDBITS) != 0;
}