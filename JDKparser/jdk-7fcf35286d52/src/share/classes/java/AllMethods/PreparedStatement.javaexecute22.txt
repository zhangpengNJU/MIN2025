/**
 * Executes the SQL statement in this <code>PreparedStatement</code> object,
 * which may be any kind of SQL statement.
 * Some prepared statements return multiple results; the <code>execute</code>
 * method handles these complex statements as well as the simpler
 * form of statements handled by the methods <code>executeQuery</code>
 * and <code>executeUpdate</code>.
 * <P>
 * The <code>execute</code> method returns a <code>boolean</code> to
 * indicate the form of the first result.  You must call either the method
 * <code>getResultSet</code> or <code>getUpdateCount</code>
 * to retrieve the result; you must call <code>getMoreResults</code> to
 * move to any subsequent result(s).
 *
 * @return <code>true</code> if the first result is a <code>ResultSet</code>
 *         object; <code>false</code> if the first result is an update
 *         count or there is no result
 * @exception SQLException if a database access error occurs;
 * this method is called on a closed <code>PreparedStatement</code>
 * or an argument is supplied to this method
 * @throws SQLTimeoutException when the driver has determined that the
 * timeout value that was specified by the {@code setQueryTimeout}
 * method has been exceeded and has at least attempted to cancel
 * the currently running {@code Statement}
 * @see Statement#execute
 * @see Statement#getResultSet
 * @see Statement#getUpdateCount
 * @see Statement#getMoreResults
 */
boolean execute() throws SQLException;