/**
 * Compresses the input data and fills the specified buffer with compressed
 * data. Returns actual number of bytes of data compressed.
 *
 * <p>Compression flush mode is one of the following three modes:
 *
 * <ul>
 * <li>{@link #NO_FLUSH}: allows the deflater to decide how much data
 * to accumulate, before producing output, in order to achieve the best
 * compression (should be used in normal use scenario). A return value
 * of 0 in this flush mode indicates that {@link #needsInput()} should
 * be called in order to determine if more input data is required.
 *
 * <li>{@link #SYNC_FLUSH}: all pending output in the deflater is flushed,
 * to the specified output buffer, so that an inflater that works on
 * compressed data can get all input data available so far (In particular
 * the {@link #needsInput()} returns {@code true} after this invocation
 * if enough output space is provided). Flushing with {@link #SYNC_FLUSH}
 * may degrade compression for some compression algorithms and so it
 * should be used only when necessary.
 *
 * <li>{@link #FULL_FLUSH}: all pending output is flushed out as with
 * {@link #SYNC_FLUSH}. The compression state is reset so that the inflater
 * that works on the compressed output data can restart from this point
 * if previous compressed data has been damaged or if random access is
 * desired. Using {@link #FULL_FLUSH} too often can seriously degrade
 * compression.
 * </ul>
 *
 * <p>In the case of {@link #FULL_FLUSH} or {@link #SYNC_FLUSH}, if
 * the return value is {@code len}, the space available in output
 * buffer {@code b}, this method should be invoked again with the same
 * {@code flush} parameter and more output space.
 *
 * @param b the buffer for the compressed data
 * @param off the start offset of the data
 * @param len the maximum number of bytes of compressed data
 * @param flush the compression flush mode
 * @return the actual number of bytes of compressed data written to
 *         the output buffer
 *
 * @throws IllegalArgumentException if the flush mode is invalid
 * @since 1.7
 */
public int deflate(byte[] b, int off, int len, int flush) {
    if (b == null) {
        throw new NullPointerException();
    }
    if (off < 0 || len < 0 || off > b.length - len) {
        throw new ArrayIndexOutOfBoundsException();
    }
    synchronized (zsRef) {
        ensureOpen();
        if (flush == NO_FLUSH || flush == SYNC_FLUSH || flush == FULL_FLUSH) {
            int thisLen = this.len;
            int n = deflateBytes(zsRef.address(), b, off, len, flush);
            bytesWritten += n;
            bytesRead += (thisLen - this.len);
            return n;
        }
        throw new IllegalArgumentException();
    }
}