/**
 * Selects the text between the specified start and end positions.
 * <p>
 * This method sets the start and end positions of the
 * selected text, enforcing the restriction that the start position
 * must be greater than or equal to zero.  The end position must be
 * greater than or equal to the start position, and less than or
 * equal to the length of the text component's text.  The
 * character positions are indexed starting with zero.
 * The length of the selection is
 * <code>endPosition</code> - <code>startPosition</code>, so the
 * character at <code>endPosition</code> is not selected.
 * If the start and end positions of the selected text are equal,
 * all text is deselected.
 * <p>
 * If the caller supplies values that are inconsistent or out of
 * bounds, the method enforces these constraints silently, and
 * without failure. Specifically, if the start position or end
 * position is greater than the length of the text, it is reset to
 * equal the text length. If the start position is less than zero,
 * it is reset to zero, and if the end position is less than the
 * start position, it is reset to the start position.
 *
 * @param        selectionStart the zero-based index of the first
 *                       character (<code>char</code> value) to be selected
 * @param        selectionEnd the zero-based end position of the
 *                       text to be selected; the character (<code>char</code> value) at
 *                       <code>selectionEnd</code> is not selected
 * @see          java.awt.TextComponent#setSelectionStart
 * @see          java.awt.TextComponent#setSelectionEnd
 * @see          java.awt.TextComponent#selectAll
 */
public synchronized void select(int selectionStart, int selectionEnd) {
    String text = getText();
    if (selectionStart < 0) {
        selectionStart = 0;
    }
    if (selectionStart > text.length()) {
        selectionStart = text.length();
    }
    if (selectionEnd > text.length()) {
        selectionEnd = text.length();
    }
    if (selectionEnd < selectionStart) {
        selectionEnd = selectionStart;
    }
    this.selectionStart = selectionStart;
    this.selectionEnd = selectionEnd;
    TextComponentPeer peer = (TextComponentPeer) this.peer;
    if (peer != null) {
        peer.select(selectionStart, selectionEnd);
    }
}