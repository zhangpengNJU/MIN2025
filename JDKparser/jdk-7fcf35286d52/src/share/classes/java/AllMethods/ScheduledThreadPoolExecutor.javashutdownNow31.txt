/**
 * Attempts to stop all actively executing tasks, halts the
 * processing of waiting tasks, and returns a list of the tasks
 * that were awaiting execution.
 *
 * <p>This method does not wait for actively executing tasks to
 * terminate.  Use {@link #awaitTermination awaitTermination} to
 * do that.
 *
 * <p>There are no guarantees beyond best-effort attempts to stop
 * processing actively executing tasks.  This implementation
 * cancels tasks via {@link Thread#interrupt}, so any task that
 * fails to respond to interrupts may never terminate.
 *
 * @return list of tasks that never commenced execution.
 *         Each element of this list is a {@link ScheduledFuture},
 *         including those tasks submitted using {@code execute},
 *         which are for scheduling purposes used as the basis of a
 *         zero-delay {@code ScheduledFuture}.
 * @throws SecurityException {@inheritDoc}
 */
public List<Runnable> shutdownNow() {
    return super.shutdownNow();
}