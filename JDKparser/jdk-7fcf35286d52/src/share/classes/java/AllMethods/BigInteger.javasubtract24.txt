/**
 * Subtracts the contents of the second int arrays (little) from the
 * first (big).  The first int array (big) must represent a larger number
 * than the second.  This method allocates the space necessary to hold the
 * answer.
 */
private static int[] subtract(int[] big, int[] little) {
    int bigIndex = big.length;
    int[] result = new int[bigIndex];
    int littleIndex = little.length;
    long difference = 0;
    // Subtract common parts of both numbers
    while (littleIndex > 0) {
        difference = (big[--bigIndex] & LONG_MASK) - (little[--littleIndex] & LONG_MASK) + (difference >> 32);
        result[bigIndex] = (int) difference;
    }
    // Subtract remainder of longer number while borrow propagates
    boolean borrow = (difference >> 32 != 0);
    while (bigIndex > 0 && borrow) borrow = ((result[--bigIndex] = big[bigIndex] - 1) == -1);
    // Copy remainder of longer number
    while (bigIndex > 0) result[--bigIndex] = big[bigIndex];
    return result;
}