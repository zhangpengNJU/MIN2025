/**
 * Converts this {@code BigDecimal} to an {@code int}.
 * This conversion is analogous to the
 * <i>narrowing primitive conversion</i> from {@code double} to
 * {@code short} as defined in section 5.1.3 of
 * <cite>The Java&trade; Language Specification</cite>:
 * any fractional part of this
 * {@code BigDecimal} will be discarded, and if the resulting
 * "{@code BigInteger}" is too big to fit in an
 * {@code int}, only the low-order 32 bits are returned.
 * Note that this conversion can lose information about the
 * overall magnitude and precision of this {@code BigDecimal}
 * value as well as return a result with the opposite sign.
 *
 * @return this {@code BigDecimal} converted to an {@code int}.
 */
public int intValue() {
    return (intCompact != INFLATED && scale == 0) ? (int) intCompact : (int) longValue();
}