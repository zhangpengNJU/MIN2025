/**
 * Generate a writeReplace method that supports serialization
 */
private void generateSerializationFriendlyMethods() {
    TypeConvertingMethodAdapter mv = new TypeConvertingMethodAdapter(cw.visitMethod(ACC_PRIVATE + ACC_FINAL, NAME_METHOD_WRITE_REPLACE, DESCR_METHOD_WRITE_REPLACE, null, null));
    mv.visitCode();
    mv.visitTypeInsn(NEW, NAME_SERIALIZED_LAMBDA);
    mv.visitInsn(DUP);
    mv.visitLdcInsn(Type.getType(targetClass));
    mv.visitLdcInsn(invokedType.returnType().getName().replace('.', '/'));
    mv.visitLdcInsn(samMethodName);
    mv.visitLdcInsn(samMethodType.toMethodDescriptorString());
    mv.visitLdcInsn(implInfo.getReferenceKind());
    mv.visitLdcInsn(implInfo.getDeclaringClass().getName().replace('.', '/'));
    mv.visitLdcInsn(implInfo.getName());
    mv.visitLdcInsn(implInfo.getMethodType().toMethodDescriptorString());
    mv.visitLdcInsn(instantiatedMethodType.toMethodDescriptorString());
    mv.iconst(argDescs.length);
    mv.visitTypeInsn(ANEWARRAY, JAVA_LANG_OBJECT);
    for (int i = 0; i < argDescs.length; i++) {
        mv.visitInsn(DUP);
        mv.iconst(i);
        mv.visitVarInsn(ALOAD, 0);
        mv.visitFieldInsn(GETFIELD, lambdaClassName, argNames[i], argDescs[i]);
        mv.boxIfTypePrimitive(Type.getType(argDescs[i]));
        mv.visitInsn(AASTORE);
    }
    mv.visitMethodInsn(INVOKESPECIAL, NAME_SERIALIZED_LAMBDA, NAME_CTOR, DESCR_CTOR_SERIALIZED_LAMBDA, false);
    mv.visitInsn(ARETURN);
    // Maxs computed by ClassWriter.COMPUTE_MAXS, these arguments ignored
    mv.visitMaxs(-1, -1);
    mv.visitEnd();
}