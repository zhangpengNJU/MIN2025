/**
 * Returns an array of {@code Type} objects that represent the formal
 * parameter types, in declaration order, of the executable represented by
 * this object. Returns an array of length 0 if the
 * underlying executable takes no parameters.
 *
 * <p>If a formal parameter type is a parameterized type,
 * the {@code Type} object returned for it must accurately reflect
 * the actual type parameters used in the source code.
 *
 * <p>If a formal parameter type is a type variable or a parameterized
 * type, it is created. Otherwise, it is resolved.
 *
 * @return an array of {@code Type}s that represent the formal
 *     parameter types of the underlying executable, in declaration order
 * @throws GenericSignatureFormatError
 *     if the generic method signature does not conform to the format
 *     specified in
 *     <cite>The Java&trade; Virtual Machine Specification</cite>
 * @throws TypeNotPresentException if any of the parameter
 *     types of the underlying executable refers to a non-existent type
 *     declaration
 * @throws MalformedParameterizedTypeException if any of
 *     the underlying executable's parameter types refer to a parameterized
 *     type that cannot be instantiated for any reason
 */
public Type[] getGenericParameterTypes() {
    if (hasGenericInformation())
        return getGenericInfo().getParameterTypes();
    else
        return getParameterTypes();
}