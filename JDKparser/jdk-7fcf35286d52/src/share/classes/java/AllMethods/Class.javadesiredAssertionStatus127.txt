/**
 * Returns the assertion status that would be assigned to this
 * class if it were to be initialized at the time this method is invoked.
 * If this class has had its assertion status set, the most recent
 * setting will be returned; otherwise, if any package default assertion
 * status pertains to this class, the most recent setting for the most
 * specific pertinent package default assertion status is returned;
 * otherwise, if this class is not a system class (i.e., it has a
 * class loader) its class loader's default assertion status is returned;
 * otherwise, the system class default assertion status is returned.
 * <p>
 * Few programmers will have any need for this method; it is provided
 * for the benefit of the JRE itself.  (It allows a class to determine at
 * the time that it is initialized whether assertions should be enabled.)
 * Note that this method is not guaranteed to return the actual
 * assertion status that was (or will be) associated with the specified
 * class when it was (or will be) initialized.
 *
 * @return the desired assertion status of the specified class.
 * @see    java.lang.ClassLoader#setClassAssertionStatus
 * @see    java.lang.ClassLoader#setPackageAssertionStatus
 * @see    java.lang.ClassLoader#setDefaultAssertionStatus
 * @since  1.4
 */
public boolean desiredAssertionStatus() {
    ClassLoader loader = getClassLoader();
    // If the loader is null this is a system class, so ask the VM
    if (loader == null)
        return desiredAssertionStatus0(this);
    // If the classloader has been initialized with the assertion
    // directives, ask it. Otherwise, ask the VM.
    synchronized (loader.assertionLock) {
        if (loader.classAssertionStatus != null) {
            return loader.desiredAssertionStatus(getName());
        }
    }
    return desiredAssertionStatus0(this);
}