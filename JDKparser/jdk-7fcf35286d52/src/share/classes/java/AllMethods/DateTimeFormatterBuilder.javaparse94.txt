@Override
public int parse(DateTimeParseContext context, CharSequence text, int position) {
    // new context to avoid overwriting fields like year/month/day
    int minDigits = (fractionalDigits < 0 ? 0 : fractionalDigits);
    int maxDigits = (fractionalDigits < 0 ? 9 : fractionalDigits);
    CompositePrinterParser parser = new DateTimeFormatterBuilder().append(DateTimeFormatter.ISO_LOCAL_DATE).appendLiteral('T').appendValue(HOUR_OF_DAY, 2).appendLiteral(':').appendValue(MINUTE_OF_HOUR, 2).appendLiteral(':').appendValue(SECOND_OF_MINUTE, 2).appendFraction(NANO_OF_SECOND, minDigits, maxDigits, true).appendLiteral('Z').toFormatter().toPrinterParser(false);
    DateTimeParseContext newContext = context.copy();
    int pos = parser.parse(newContext, text, position);
    if (pos < 0) {
        return pos;
    }
    // parser restricts most fields to 2 digits, so definitely int
    // correctly parsed nano is also guaranteed to be valid
    long yearParsed = newContext.getParsed(YEAR);
    int month = newContext.getParsed(MONTH_OF_YEAR).intValue();
    int day = newContext.getParsed(DAY_OF_MONTH).intValue();
    int hour = newContext.getParsed(HOUR_OF_DAY).intValue();
    int min = newContext.getParsed(MINUTE_OF_HOUR).intValue();
    Long secVal = newContext.getParsed(SECOND_OF_MINUTE);
    Long nanoVal = newContext.getParsed(NANO_OF_SECOND);
    int sec = (secVal != null ? secVal.intValue() : 0);
    int nano = (nanoVal != null ? nanoVal.intValue() : 0);
    int days = 0;
    if (hour == 24 && min == 0 && sec == 0 && nano == 0) {
        hour = 0;
        days = 1;
    } else if (hour == 23 && min == 59 && sec == 60) {
        context.setParsedLeapSecond();
        sec = 59;
    }
    int year = (int) yearParsed % 10_000;
    long instantSecs;
    try {
        LocalDateTime ldt = LocalDateTime.of(year, month, day, hour, min, sec, 0).plusDays(days);
        instantSecs = ldt.toEpochSecond(ZoneOffset.UTC);
        instantSecs += Math.multiplyExact(yearParsed / 10_000L, SECONDS_PER_10000_YEARS);
    } catch (RuntimeException ex) {
        return ~position;
    }
    int successPos = pos;
    successPos = context.setParsedField(INSTANT_SECONDS, instantSecs, position, successPos);
    return context.setParsedField(NANO_OF_SECOND, nano, position, successPos);
}