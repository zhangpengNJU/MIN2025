/**
 * Removes the component, specified by <code>index</code>,
 * from this container.
 * This method also notifies the layout manager to remove the
 * component from this container's layout via the
 * <code>removeLayoutComponent</code> method.
 * <p>
 * This method changes layout-related information, and therefore,
 * invalidates the component hierarchy. If the container has already been
 * displayed, the hierarchy must be validated thereafter in order to
 * reflect the changes.
 *
 * @param     index   the index of the component to be removed
 * @throws ArrayIndexOutOfBoundsException if {@code index} is not in
 *         range {@code [0, getComponentCount()-1]}
 * @see #add
 * @see #invalidate
 * @see #validate
 * @see #getComponentCount
 * @since JDK1.1
 */
public void remove(int index) {
    synchronized (getTreeLock()) {
        if (index < 0 || index >= component.size()) {
            throw new ArrayIndexOutOfBoundsException(index);
        }
        Component comp = component.get(index);
        if (peer != null) {
            comp.removeNotify();
        }
        if (layoutMgr != null) {
            layoutMgr.removeLayoutComponent(comp);
        }
        adjustListeningChildren(AWTEvent.HIERARCHY_EVENT_MASK, -comp.numListening(AWTEvent.HIERARCHY_EVENT_MASK));
        adjustListeningChildren(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK, -comp.numListening(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK));
        adjustDescendants(-(comp.countHierarchyMembers()));
        comp.parent = null;
        component.remove(index);
        comp.setGraphicsConfiguration(null);
        invalidateIfValid();
        if (containerListener != null || (eventMask & AWTEvent.CONTAINER_EVENT_MASK) != 0 || Toolkit.enabledOnToolkit(AWTEvent.CONTAINER_EVENT_MASK)) {
            ContainerEvent e = new ContainerEvent(this, ContainerEvent.COMPONENT_REMOVED, comp);
            dispatchEvent(e);
        }
        comp.createHierarchyEvents(HierarchyEvent.HIERARCHY_CHANGED, comp, this, HierarchyEvent.PARENT_CHANGED, Toolkit.enabledOnToolkit(AWTEvent.HIERARCHY_EVENT_MASK));
        if (peer != null && layoutMgr == null && isVisible()) {
            updateCursorImmediately();
        }
    }
}