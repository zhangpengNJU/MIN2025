/**
 * Sets the focus owner. The operation will be cancelled if the Component
 * is not focusable. The focus owner is defined as the Component in an
 * application that will typically receive all KeyEvents generated by the
 * user. KeyEvents which map to the focus owner's focus traversal keys will
 * not be delivered if focus traversal keys are enabled for the focus
 * owner. In addition, KeyEventDispatchers may retarget or consume
 * KeyEvents before they reach the focus owner.
 * <p>
 * This method does not actually set the focus to the specified Component.
 * It merely stores the value to be subsequently returned by
 * <code>getFocusOwner()</code>. Use <code>Component.requestFocus()</code>
 * or <code>Component.requestFocusInWindow()</code> to change the focus
 * owner, subject to platform limitations.
 *
 * @param focusOwner the focus owner
 * @see #getFocusOwner
 * @see #getGlobalFocusOwner
 * @see Component#requestFocus()
 * @see Component#requestFocusInWindow()
 * @see Component#isFocusable
 * @throws SecurityException if this KeyboardFocusManager is not the
 *         current KeyboardFocusManager for the calling thread's context
 *         and if the calling thread does not have "replaceKeyboardFocusManager"
 *         permission
 * @beaninfo
 *       bound: true
 */
protected void setGlobalFocusOwner(Component focusOwner) throws SecurityException {
    Component oldFocusOwner = null;
    boolean shouldFire = false;
    if (focusOwner == null || focusOwner.isFocusable()) {
        synchronized (KeyboardFocusManager.class) {
            checkKFMSecurity();
            oldFocusOwner = getFocusOwner();
            try {
                fireVetoableChange("focusOwner", oldFocusOwner, focusOwner);
            } catch (PropertyVetoException e) {
                // rejected
                return;
            }
            KeyboardFocusManager.focusOwner = focusOwner;
            if (focusOwner != null && (getCurrentFocusCycleRoot() == null || !focusOwner.isFocusCycleRoot(getCurrentFocusCycleRoot()))) {
                Container rootAncestor = focusOwner.getFocusCycleRootAncestor();
                if (rootAncestor == null && (focusOwner instanceof Window)) {
                    rootAncestor = (Container) focusOwner;
                }
                if (rootAncestor != null) {
                    setGlobalCurrentFocusCycleRootPriv(rootAncestor);
                }
            }
            shouldFire = true;
        }
    }
    if (shouldFire) {
        firePropertyChange("focusOwner", oldFocusOwner, focusOwner);
    }
}