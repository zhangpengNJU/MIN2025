/**
 *  Sets the designated parameter to the given input stream, which
 *  will have the specified number of bytes.
 *
 *  When a very large Unicode value is input to a <code>LONGVARCHAR</code>
 *  parameter, it may be more practical to send it via a
 *  <code>java.io.InputStream</code> object. The data will be read from the
 *  stream as needed until end-of-file is reached.  The JDBC driver will
 *  do any necessary conversion from Unicode to the database char format.
 *
 * The byte format of the Unicode stream must be a Java UTF-8, as defined in the
 * Java Virtual Machine Specification.
 *
 *  <P><B>Note:</B> This stream object can either be a standard
 *  Java stream object or your own subclass that implements the
 *  standard interface.
 *
 *  @param parameterIndex the first parameter is 1, the second is 2, ...
 *  @param x a <code>java.io.InputStream</code> object that contains the
 *         Unicode parameter value
 *  @param length the number of bytes in the stream
 *  @exception SQLException if parameterIndex does not correspond to a parameter
 *  marker in the SQL statement; if a database access error occurs or
 *  this method is called on a closed <code>PreparedStatement</code>
 *  @exception SQLFeatureNotSupportedException if the JDBC driver does not support
 *  this method
 *  @deprecated Use {@code setCharacterStream}
 */
@Deprecated
void setUnicodeStream(int parameterIndex, java.io.InputStream x, int length) throws SQLException;