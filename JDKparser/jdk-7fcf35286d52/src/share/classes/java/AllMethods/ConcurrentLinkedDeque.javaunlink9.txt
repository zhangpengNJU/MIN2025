/**
 * Unlinks non-null node x.
 */
void unlink(Node<E> x) {
    // assert x != null;
    // assert x.item == null;
    // assert x != PREV_TERMINATOR;
    // assert x != NEXT_TERMINATOR;
    final Node<E> prev = x.prev;
    final Node<E> next = x.next;
    if (prev == null) {
        unlinkFirst(x, next);
    } else if (next == null) {
        unlinkLast(x, prev);
    } else {
        // Unlink interior node.
        // 
        // This is the common case, since a series of polls at the
        // same end will be "interior" removes, except perhaps for
        // the first one, since end nodes cannot be unlinked.
        // 
        // At any time, all active nodes are mutually reachable by
        // following a sequence of either next or prev pointers.
        // 
        // Our strategy is to find the unique active predecessor
        // and successor of x.  Try to fix up their links so that
        // they point to each other, leaving x unreachable from
        // active nodes.  If successful, and if x has no live
        // predecessor/successor, we additionally try to gc-unlink,
        // leaving active nodes unreachable from x, by rechecking
        // that the status of predecessor and successor are
        // unchanged and ensuring that x is not reachable from
        // tail/head, before setting x's prev/next links to their
        // logical approximate replacements, self/TERMINATOR.
        Node<E> activePred, activeSucc;
        boolean isFirst, isLast;
        int hops = 1;
        // Find active predecessor
        for (Node<E> p = prev; ; ++hops) {
            if (p.item != null) {
                activePred = p;
                isFirst = false;
                break;
            }
            Node<E> q = p.prev;
            if (q == null) {
                if (p.next == p)
                    return;
                activePred = p;
                isFirst = true;
                break;
            } else if (p == q)
                return;
            else
                p = q;
        }
        // Find active successor
        for (Node<E> p = next; ; ++hops) {
            if (p.item != null) {
                activeSucc = p;
                isLast = false;
                break;
            }
            Node<E> q = p.next;
            if (q == null) {
                if (p.prev == p)
                    return;
                activeSucc = p;
                isLast = true;
                break;
            } else if (p == q)
                return;
            else
                p = q;
        }
        // TODO: better HOP heuristics
        if (hops < HOPS && // always squeeze out interior deleted nodes
        (isFirst | isLast))
            return;
        // Squeeze out deleted nodes between activePred and
        // activeSucc, including x.
        skipDeletedSuccessors(activePred);
        skipDeletedPredecessors(activeSucc);
        // Try to gc-unlink, if possible
        if ((isFirst | isLast) && // Recheck expected state of predecessor and successor
        (activePred.next == activeSucc) && (activeSucc.prev == activePred) && (isFirst ? activePred.prev == null : activePred.item != null) && (isLast ? activeSucc.next == null : activeSucc.item != null)) {
            // Ensure x is not reachable from head
            updateHead();
            // Ensure x is not reachable from tail
            updateTail();
            // Finally, actually gc-unlink
            x.lazySetPrev(isFirst ? prevTerminator() : x);
            x.lazySetNext(isLast ? nextTerminator() : x);
        }
    }
}