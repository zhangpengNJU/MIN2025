/**
 * Translates a string from Unicode to ASCII Compatible Encoding (ACE),
 * as defined by the ToASCII operation of <a href="http://www.ietf.org/rfc/rfc3490.txt">RFC 3490</a>.
 *
 * <p>ToASCII operation can fail. ToASCII fails if any step of it fails.
 * If ToASCII operation fails, an IllegalArgumentException will be thrown.
 * In this case, the input string should not be used in an internationalized domain name.
 *
 * <p> A label is an individual part of a domain name. The original ToASCII operation,
 * as defined in RFC 3490, only operates on a single label. This method can handle
 * both label and entire domain name, by assuming that labels in a domain name are
 * always separated by dots. The following characters are recognized as dots:
 * &#0092;u002E (full stop), &#0092;u3002 (ideographic full stop), &#0092;uFF0E (fullwidth full stop),
 * and &#0092;uFF61 (halfwidth ideographic full stop). if dots are
 * used as label separators, this method also changes all of them to &#0092;u002E (full stop)
 * in output translated string.
 *
 * @param input     the string to be processed
 * @param flag      process flag; can be 0 or any logical OR of possible flags
 *
 * @return          the translated {@code String}
 *
 * @throws IllegalArgumentException   if the input string doesn't conform to RFC 3490 specification
 */
public static String toASCII(String input, int flag) {
    int p = 0, q = 0;
    StringBuffer out = new StringBuffer();
    if (isRootLabel(input)) {
        return ".";
    }
    while (p < input.length()) {
        q = searchDots(input, p);
        out.append(toASCIIInternal(input.substring(p, q), flag));
        if (q != (input.length())) {
            // has more labels, or keep the trailing dot as at present
            out.append('.');
        }
        p = q + 1;
    }
    return out.toString();
}