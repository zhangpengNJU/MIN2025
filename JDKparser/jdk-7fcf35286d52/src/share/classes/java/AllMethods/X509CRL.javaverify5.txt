/**
 * Verifies that this CRL was signed using the
 * private key that corresponds to the given public key.
 * This method uses the signature verification engine
 * supplied by the given provider. Note that the specified Provider object
 * does not have to be registered in the provider list.
 *
 * This method was added to version 1.8 of the Java Platform Standard
 * Edition. In order to maintain backwards compatibility with existing
 * service providers, this method is not {@code abstract}
 * and it provides a default implementation.
 *
 * @param key the PublicKey used to carry out the verification.
 * @param sigProvider the signature provider.
 *
 * @exception NoSuchAlgorithmException on unsupported signature
 * algorithms.
 * @exception InvalidKeyException on incorrect key.
 * @exception SignatureException on signature errors.
 * @exception CRLException on encoding errors.
 * @since 1.8
 */
public void verify(PublicKey key, Provider sigProvider) throws CRLException, NoSuchAlgorithmException, InvalidKeyException, SignatureException {
    String sigAlgName = getSigAlgName();
    Signature sig = (sigProvider == null) ? Signature.getInstance(sigAlgName) : Signature.getInstance(sigAlgName, sigProvider);
    try {
        byte[] paramBytes = getSigAlgParams();
        SignatureUtil.initVerifyWithParam(sig, key, SignatureUtil.getParamSpec(sigAlgName, paramBytes));
    } catch (ProviderException e) {
        throw new CRLException(e.getMessage(), e.getCause());
    } catch (InvalidAlgorithmParameterException e) {
        throw new CRLException(e);
    }
    byte[] tbsCRL = getTBSCertList();
    sig.update(tbsCRL, 0, tbsCRL.length);
    if (sig.verify(getSignature()) == false) {
        throw new SignatureException("Signature does not match.");
    }
}