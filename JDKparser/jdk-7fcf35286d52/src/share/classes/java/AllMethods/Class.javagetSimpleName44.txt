/**
 * Returns the simple name of the underlying class as given in the
 * source code. Returns an empty string if the underlying class is
 * anonymous.
 *
 * <p>The simple name of an array is the simple name of the
 * component type with "[]" appended.  In particular the simple
 * name of an array whose component type is anonymous is "[]".
 *
 * @return the simple name of the underlying class
 * @since 1.5
 */
public String getSimpleName() {
    if (isArray())
        return getComponentType().getSimpleName() + "[]";
    String simpleName = getSimpleBinaryName();
    if (simpleName == null) {
        // top level class
        simpleName = getName();
        // strip the package name
        return simpleName.substring(simpleName.lastIndexOf(".") + 1);
    }
    // According to JLS3 "Binary Compatibility" (13.1) the binary
    // name of non-package classes (not top level) is the binary
    // name of the immediately enclosing class followed by a '$' followed by:
    // (for nested and inner classes): the simple name.
    // (for local classes): 1 or more digits followed by the simple name.
    // (for anonymous classes): 1 or more digits.
    // Since getSimpleBinaryName() will strip the binary name of
    // the immediatly enclosing class, we are now looking at a
    // string that matches the regular expression "\$[0-9]*"
    // followed by a simple name (considering the simple of an
    // anonymous class to be the empty string).
    // Remove leading "\$[0-9]*" from the name
    int length = simpleName.length();
    if (length < 1 || simpleName.charAt(0) != '$')
        throw new InternalError("Malformed class name");
    int index = 1;
    while (index < length && isAsciiDigit(simpleName.charAt(index))) index++;
    // Eventually, this is the empty string iff this is an anonymous class
    return simpleName.substring(index);
}