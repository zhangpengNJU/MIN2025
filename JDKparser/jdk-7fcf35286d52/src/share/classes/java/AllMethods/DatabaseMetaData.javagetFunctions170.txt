/**
 * Retrieves a description of the  system and user functions available
 * in the given catalog.
 * <P>
 * Only system and user function descriptions matching the schema and
 * function name criteria are returned.  They are ordered by
 * <code>FUNCTION_CAT</code>, <code>FUNCTION_SCHEM</code>,
 * <code>FUNCTION_NAME</code> and
 * <code>SPECIFIC_ NAME</code>.
 *
 * <P>Each function description has the the following columns:
 *  <OL>
 *  <LI><B>FUNCTION_CAT</B> String {@code =>} function catalog (may be <code>null</code>)
 *  <LI><B>FUNCTION_SCHEM</B> String {@code =>} function schema (may be <code>null</code>)
 *  <LI><B>FUNCTION_NAME</B> String {@code =>} function name.  This is the name
 * used to invoke the function
 *  <LI><B>REMARKS</B> String {@code =>} explanatory comment on the function
 * <LI><B>FUNCTION_TYPE</B> short {@code =>} kind of function:
 *      <UL>
 *      <LI>functionResultUnknown - Cannot determine if a return value
 *       or table will be returned
 *      <LI> functionNoTable- Does not return a table
 *      <LI> functionReturnsTable - Returns a table
 *      </UL>
 *  <LI><B>SPECIFIC_NAME</B> String  {@code =>} the name which uniquely identifies
 *  this function within its schema.  This is a user specified, or DBMS
 * generated, name that may be different then the <code>FUNCTION_NAME</code>
 * for example with overload functions
 *  </OL>
 * <p>
 * A user may not have permission to execute any of the functions that are
 * returned by <code>getFunctions</code>
 *
 * @param catalog a catalog name; must match the catalog name as it
 *        is stored in the database; "" retrieves those without a catalog;
 *        <code>null</code> means that the catalog name should not be used to narrow
 *        the search
 * @param schemaPattern a schema name pattern; must match the schema name
 *        as it is stored in the database; "" retrieves those without a schema;
 *        <code>null</code> means that the schema name should not be used to narrow
 *        the search
 * @param functionNamePattern a function name pattern; must match the
 *        function name as it is stored in the database
 * @return <code>ResultSet</code> - each row is a function description
 * @exception SQLException if a database access error occurs
 * @see #getSearchStringEscape
 * @since 1.6
 */
ResultSet getFunctions(String catalog, String schemaPattern, String functionNamePattern) throws SQLException;