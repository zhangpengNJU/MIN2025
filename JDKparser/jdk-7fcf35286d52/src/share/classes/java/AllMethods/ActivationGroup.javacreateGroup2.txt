/**
 * Create and set the activation group for the current VM.  The
 * activation group can only be set if it is not currently set.
 * An activation group is set using the <code>createGroup</code>
 * method when the <code>Activator</code> initiates the
 * re-creation of an activation group in order to carry out
 * incoming <code>activate</code> requests. A group must first be
 * registered with the <code>ActivationSystem</code> before it can
 * be created via this method.
 *
 * <p>The group class specified by the
 * <code>ActivationGroupDesc</code> must be a concrete subclass of
 * <code>ActivationGroup</code> and have a public constructor that
 * takes two arguments: the <code>ActivationGroupID</code> for the
 * group and the <code>MarshalledObject</code> containing the
 * group's initialization data (obtained from the
 * <code>ActivationGroupDesc</code>.
 *
 * <p>If the group class name specified in the
 * <code>ActivationGroupDesc</code> is <code>null</code>, then
 * this method will behave as if the group descriptor contained
 * the name of the default activation group implementation class.
 *
 * <p>Note that if your application creates its own custom
 * activation group, a security manager must be set for that
 * group.  Otherwise objects cannot be activated in the group.
 * {@link SecurityManager} is set by default.
 *
 * <p>If a security manager is already set in the group VM, this
 * method first calls the security manager's
 * <code>checkSetFactory</code> method.  This could result in a
 * <code>SecurityException</code>. If your application needs to
 * set a different security manager, you must ensure that the
 * policy file specified by the group's
 * <code>ActivationGroupDesc</code> grants the group the necessary
 * permissions to set a new security manager.  (Note: This will be
 * necessary if your group downloads and sets a security manager).
 *
 * <p>After the group is created, the
 * <code>ActivationSystem</code> is informed that the group is
 * active by calling the <code>activeGroup</code> method which
 * returns the <code>ActivationMonitor</code> for the group. The
 * application need not call <code>activeGroup</code>
 * independently since it is taken care of by this method.
 *
 * <p>Once a group is created, subsequent calls to the
 * <code>currentGroupID</code> method will return the identifier
 * for this group until the group becomes inactive.
 *
 * @param id the activation group's identifier
 * @param desc the activation group's descriptor
 * @param incarnation the group's incarnation number (zero on group's
 * initial creation)
 * @return the activation group for the VM
 * @exception ActivationException if group already exists or if error
 * occurs during group creation
 * @exception SecurityException if permission to create group is denied.
 * (Note: The default implementation of the security manager
 * <code>checkSetFactory</code>
 * method requires the RuntimePermission "setFactory")
 * @exception UnsupportedOperationException if and only if activation is
 * not supported by this implementation
 * @see SecurityManager#checkSetFactory
 * @since 1.2
 */
public static synchronized ActivationGroup createGroup(ActivationGroupID id, final ActivationGroupDesc desc, long incarnation) throws ActivationException {
    SecurityManager security = System.getSecurityManager();
    if (security != null)
        security.checkSetFactory();
    if (currGroup != null)
        throw new ActivationException("group already exists");
    if (canCreate == false)
        throw new ActivationException("group deactivated and " + "cannot be recreated");
    try {
        // load group's class
        String groupClassName = desc.getClassName();
        Class<? extends ActivationGroup> cl;
        Class<? extends ActivationGroup> defaultGroupClass = sun.rmi.server.ActivationGroupImpl.class;
        if (// see 4252236
        groupClassName == null || groupClassName.equals(defaultGroupClass.getName())) {
            cl = defaultGroupClass;
        } else {
            Class<?> cl0;
            try {
                cl0 = RMIClassLoader.loadClass(desc.getLocation(), groupClassName);
            } catch (Exception ex) {
                throw new ActivationException("Could not load group implementation class", ex);
            }
            if (ActivationGroup.class.isAssignableFrom(cl0)) {
                cl = cl0.asSubclass(ActivationGroup.class);
            } else {
                throw new ActivationException("group not correct class: " + cl0.getName());
            }
        }
        // create group
        Constructor<? extends ActivationGroup> constructor = cl.getConstructor(ActivationGroupID.class, MarshalledObject.class);
        ActivationGroup newGroup = constructor.newInstance(id, desc.getData());
        currSystem = id.getSystem();
        newGroup.incarnation = incarnation;
        newGroup.monitor = currSystem.activeGroup(id, newGroup, incarnation);
        currGroup = newGroup;
        currGroupID = id;
        canCreate = false;
    } catch (InvocationTargetException e) {
        e.getTargetException().printStackTrace();
        throw new ActivationException("exception in group constructor", e.getTargetException());
    } catch (ActivationException e) {
        throw e;
    } catch (Exception e) {
        throw new ActivationException("exception creating group", e);
    }
    return currGroup;
}