/**
 * Sets the serializable primitive fields of object obj using values
 * unmarshalled from byte array buf starting at offset 0.  The caller
 * is responsible for ensuring that obj is of the proper type.
 */
void setPrimFieldValues(Object obj, byte[] buf) {
    if (obj == null) {
        throw new NullPointerException();
    }
    for (int i = 0; i < numPrimFields; i++) {
        long key = writeKeys[i];
        if (key == Unsafe.INVALID_FIELD_OFFSET) {
            // discard value
            continue;
        }
        int off = offsets[i];
        switch(typeCodes[i]) {
            case 'Z':
                unsafe.putBoolean(obj, key, Bits.getBoolean(buf, off));
                break;
            case 'B':
                unsafe.putByte(obj, key, buf[off]);
                break;
            case 'C':
                unsafe.putChar(obj, key, Bits.getChar(buf, off));
                break;
            case 'S':
                unsafe.putShort(obj, key, Bits.getShort(buf, off));
                break;
            case 'I':
                unsafe.putInt(obj, key, Bits.getInt(buf, off));
                break;
            case 'F':
                unsafe.putFloat(obj, key, Bits.getFloat(buf, off));
                break;
            case 'J':
                unsafe.putLong(obj, key, Bits.getLong(buf, off));
                break;
            case 'D':
                unsafe.putDouble(obj, key, Bits.getDouble(buf, off));
                break;
            default:
                throw new InternalError();
        }
    }
}