// -----------------------------------------------------------------------
/**
 * Fully parses the text producing a temporal object.
 * <p>
 * This parses the entire text producing a temporal object.
 * It is typically more useful to use {@link #parse(CharSequence, TemporalQuery)}.
 * The result of this method is {@code TemporalAccessor} which has been resolved,
 * applying basic validation checks to help ensure a valid date-time.
 * <p>
 * If the parse completes without reading the entire length of the text,
 * or a problem occurs during parsing or merging, then an exception is thrown.
 *
 * @param text  the text to parse, not null
 * @return the parsed temporal object, not null
 * @throws DateTimeParseException if unable to parse the requested result
 */
public TemporalAccessor parse(CharSequence text) {
    Objects.requireNonNull(text, "text");
    try {
        return parseResolved0(text, null);
    } catch (DateTimeParseException ex) {
        throw ex;
    } catch (RuntimeException ex) {
        throw createError(text, ex);
    }
}