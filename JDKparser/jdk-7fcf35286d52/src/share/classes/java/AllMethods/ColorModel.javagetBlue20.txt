/**
 * Returns the blue color component for the specified pixel, scaled
 * from 0 to 255 in the default RGB <code>ColorSpace</code>, sRGB.  A
 * color conversion is done if necessary.  The pixel value is
 * specified by an array of data elements of type transferType passed
 * in as an object reference.  The returned value is a non
 * pre-multiplied value.  For example, if the alpha is premultiplied,
 * this method divides it out before returning the value.  If the
 * alpha value is 0, the blue value will be 0.  If
 * <code>inData</code> is not a primitive array of type transferType,
 * a <code>ClassCastException</code> is thrown.  An
 * <code>ArrayIndexOutOfBoundsException</code> is
 * thrown if <code>inData</code> is not large enough to hold a pixel
 * value for this <code>ColorModel</code>.
 * If this <code>transferType</code> is not supported, a
 * <code>UnsupportedOperationException</code> will be
 * thrown.  Since
 * <code>ColorModel</code> is an abstract class, any instance
 * must be an instance of a subclass.  Subclasses inherit the
 * implementation of this method and if they don't override it, this
 * method throws an exception if the subclass uses a
 * <code>transferType</code> other than
 * <code>DataBuffer.TYPE_BYTE</code>,
 * <code>DataBuffer.TYPE_USHORT</code>, or
 * <code>DataBuffer.TYPE_INT</code>.
 * @param inData an array of pixel values
 * @return the value of the blue component of the specified pixel.
 * @throws ClassCastException if <code>inData</code>
 *  is not a primitive array of type <code>transferType</code>
 * @throws ArrayIndexOutOfBoundsException if
 *  <code>inData</code> is not large enough to hold a pixel value
 *  for this <code>ColorModel</code>
 * @throws UnsupportedOperationException if this
 *  <code>tranferType</code> is not supported by this
 *  <code>ColorModel</code>
 */
public int getBlue(Object inData) {
    int pixel = 0, length = 0;
    switch(transferType) {
        case DataBuffer.TYPE_BYTE:
            byte[] bdata = (byte[]) inData;
            pixel = bdata[0] & 0xff;
            length = bdata.length;
            break;
        case DataBuffer.TYPE_USHORT:
            short[] sdata = (short[]) inData;
            pixel = sdata[0] & 0xffff;
            length = sdata.length;
            break;
        case DataBuffer.TYPE_INT:
            int[] idata = (int[]) inData;
            pixel = idata[0];
            length = idata.length;
            break;
        default:
            throw new UnsupportedOperationException("This method has not been " + "implemented for transferType " + transferType);
    }
    if (length == 1) {
        return getBlue(pixel);
    } else {
        throw new UnsupportedOperationException("This method is not supported by this color model");
    }
}