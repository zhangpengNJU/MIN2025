/**
 * Copies all bytes from a file to an output stream.
 *
 * <p> If an I/O error occurs reading from the file or writing to the output
 * stream, then it may do so after some bytes have been read or written.
 * Consequently the output stream may be in an inconsistent state. It is
 * strongly recommended that the output stream be promptly closed if an I/O
 * error occurs.
 *
 * <p> This method may block indefinitely writing to the output stream (or
 * reading from the file). The behavior for the case that the output stream
 * is <i>asynchronously closed</i> or the thread interrupted during the copy
 * is highly output stream and file system provider specific and therefore
 * not specified.
 *
 * <p> Note that if the given output stream is {@link java.io.Flushable}
 * then its {@link java.io.Flushable#flush flush} method may need to invoked
 * after this method completes so as to flush any buffered output.
 *
 * @param   source
 *          the  path to the file
 * @param   out
 *          the output stream to write to
 *
 * @return  the number of bytes read or written
 *
 * @throws  IOException
 *          if an I/O error occurs when reading or writing
 * @throws  SecurityException
 *          In the case of the default provider, and a security manager is
 *          installed, the {@link SecurityManager#checkRead(String) checkRead}
 *          method is invoked to check read access to the file.
 */
public static long copy(Path source, OutputStream out) throws IOException {
    // ensure not null before opening file
    Objects.requireNonNull(out);
    try (InputStream in = newInputStream(source)) {
        return copy(in, out);
    }
}