/**
 * Compares two {@code Float} objects numerically.  There are
 * two ways in which comparisons performed by this method differ
 * from those performed by the Java language numerical comparison
 * operators ({@code <, <=, ==, >=, >}) when
 * applied to primitive {@code float} values:
 *
 * <ul><li>
 *          {@code Float.NaN} is considered by this method to
 *          be equal to itself and greater than all other
 *          {@code float} values
 *          (including {@code Float.POSITIVE_INFINITY}).
 * <li>
 *          {@code 0.0f} is considered by this method to be greater
 *          than {@code -0.0f}.
 * </ul>
 *
 * This ensures that the <i>natural ordering</i> of {@code Float}
 * objects imposed by this method is <i>consistent with equals</i>.
 *
 * @param   anotherFloat   the {@code Float} to be compared.
 * @return  the value {@code 0} if {@code anotherFloat} is
 *          numerically equal to this {@code Float}; a value
 *          less than {@code 0} if this {@code Float}
 *          is numerically less than {@code anotherFloat};
 *          and a value greater than {@code 0} if this
 *          {@code Float} is numerically greater than
 *          {@code anotherFloat}.
 *
 * @since   1.2
 * @see Comparable#compareTo(Object)
 */
public int compareTo(Float anotherFloat) {
    return Float.compare(value, anotherFloat.value);
}