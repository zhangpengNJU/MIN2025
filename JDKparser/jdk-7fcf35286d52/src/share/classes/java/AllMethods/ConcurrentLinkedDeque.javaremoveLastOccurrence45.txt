/**
 * Removes the last element {@code e} such that
 * {@code o.equals(e)}, if such an element exists in this deque.
 * If the deque does not contain the element, it is unchanged.
 *
 * @param o element to be removed from this deque, if present
 * @return {@code true} if the deque contained the specified element
 * @throws NullPointerException if the specified element is null
 */
public boolean removeLastOccurrence(Object o) {
    checkNotNull(o);
    for (Node<E> p = last(); p != null; p = pred(p)) {
        E item = p.item;
        if (item != null && o.equals(item) && p.casItem(item, null)) {
            unlink(p);
            return true;
        }
    }
    return false;
}