/**
 * Adds a mapping from a single <code>String</code> native to a single
 * <code>DataFlavor</code>. Unlike <code>getFlavorsForNative</code>, the
 * mapping will only be established in one direction, and the native will
 * not be encoded. To establish a two-way mapping, call
 * <code>addUnencodedNativeForFlavor</code> as well. The new mapping will
 * be of lower priority than any existing mapping.
 * This method has no effect if a mapping from the specified
 * <code>String</code> native to the specified or equal
 * <code>DataFlavor</code> already exists.
 *
 * @param nat the <code>String</code> native key for the mapping
 * @param flav the <code>DataFlavor</code> value for the mapping
 * @throws NullPointerException if nat or flav is <code>null</code>
 *
 * @see #addUnencodedNativeForFlavor
 * @since 1.4
 */
public synchronized void addFlavorForUnencodedNative(String nat, DataFlavor flav) {
    Objects.requireNonNull(nat, "Null native not permitted");
    Objects.requireNonNull(flav, "Null flavor not permitted");
    LinkedHashSet<DataFlavor> flavors = getNativeToFlavor().get(nat);
    if (flavors == null) {
        flavors = new LinkedHashSet<>(1);
        getNativeToFlavor().put(nat, flavors);
    }
    flavors.add(flav);
    flavorsForNativeCache.remove(nat);
}