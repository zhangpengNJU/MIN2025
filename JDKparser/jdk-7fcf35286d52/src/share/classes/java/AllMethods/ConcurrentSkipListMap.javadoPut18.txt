/* ---------------- Insertion -------------- */
/**
 * Main insertion method.  Adds element if not present, or
 * replaces value if present and onlyIfAbsent is false.
 * @param key the key
 * @param value the value that must be associated with key
 * @param onlyIfAbsent if should not insert if already present
 * @return the old value, or null if newly inserted
 */
private V doPut(K key, V value, boolean onlyIfAbsent) {
    // added node
    Node<K, V> z;
    if (key == null)
        throw new NullPointerException();
    Comparator<? super K> cmp = comparator;
    outer: for (; ; ) {
        for (Node<K, V> b = findPredecessor(key, cmp), n = b.next; ; ) {
            if (n != null) {
                Object v;
                int c;
                Node<K, V> f = n.next;
                if (// inconsistent read
                n != b.next)
                    break;
                if ((v = n.value) == null) {
                    // n is deleted
                    n.helpDelete(b, f);
                    break;
                }
                if (// b is deleted
                b.value == null || v == n)
                    break;
                if ((c = cpr(cmp, key, n.key)) > 0) {
                    b = n;
                    n = f;
                    continue;
                }
                if (c == 0) {
                    if (onlyIfAbsent || n.casValue(v, value)) {
                        @SuppressWarnings("unchecked")
                        V vv = (V) v;
                        return vv;
                    }
                    // restart if lost race to replace value
                    break;
                }
            // else c < 0; fall through
            }
            z = new Node<K, V>(key, value, n);
            if (!b.casNext(n, z))
                // restart if lost race to append to b
                break;
            break outer;
        }
    }
    int rnd = ThreadLocalRandom.nextSecondarySeed();
    if ((rnd & 0x80000001) == 0) {
        // test highest and lowest bits
        int level = 1, max;
        while (((rnd >>>= 1) & 1) != 0) ++level;
        Index<K, V> idx = null;
        HeadIndex<K, V> h = head;
        if (level <= (max = h.level)) {
            for (int i = 1; i <= level; ++i) idx = new Index<K, V>(z, idx, null);
        } else {
            // try to grow by one level
            // hold in array and later pick the one to use
            level = max + 1;
            @SuppressWarnings("unchecked")
            Index<K, V>[] idxs = (Index<K, V>[]) new Index<?, ?>[level + 1];
            for (int i = 1; i <= level; ++i) idxs[i] = idx = new Index<K, V>(z, idx, null);
            for (; ; ) {
                h = head;
                int oldLevel = h.level;
                if (// lost race to add level
                level <= oldLevel)
                    break;
                HeadIndex<K, V> newh = h;
                Node<K, V> oldbase = h.node;
                for (int j = oldLevel + 1; j <= level; ++j) newh = new HeadIndex<K, V>(oldbase, newh, idxs[j], j);
                if (casHead(h, newh)) {
                    h = newh;
                    idx = idxs[level = oldLevel];
                    break;
                }
            }
        }
        // find insertion points and splice in
        splice: for (int insertionLevel = level; ; ) {
            int j = h.level;
            for (Index<K, V> q = h, r = q.right, t = idx; ; ) {
                if (q == null || t == null)
                    break splice;
                if (r != null) {
                    Node<K, V> n = r.node;
                    // compare before deletion check avoids needing recheck
                    int c = cpr(cmp, key, n.key);
                    if (n.value == null) {
                        if (!q.unlink(r))
                            break;
                        r = q.right;
                        continue;
                    }
                    if (c > 0) {
                        q = r;
                        r = r.right;
                        continue;
                    }
                }
                if (j == insertionLevel) {
                    if (!q.link(r, t))
                        // restart
                        break;
                    if (t.node.value == null) {
                        findNode(key);
                        break splice;
                    }
                    if (--insertionLevel == 0)
                        break splice;
                }
                if (--j >= insertionLevel && j < level)
                    t = t.down;
                q = q.down;
                r = q.right;
            }
        }
    }
    return null;
}