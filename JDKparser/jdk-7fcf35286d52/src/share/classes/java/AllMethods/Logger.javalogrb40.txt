/**
 * Log a message, specifying source class, method, and resource bundle,
 * with associated Throwable information.
 * <p>
 * If the logger is currently enabled for the given message
 * level then the given arguments are stored in a LogRecord
 * which is forwarded to all registered output handlers.
 * <p>
 * The {@code msg} string is localized using the given resource bundle.
 * If the resource bundle is {@code null}, then the {@code msg} string is not
 * localized.
 * <p>
 * Note that the thrown argument is stored in the LogRecord thrown
 * property, rather than the LogRecord parameters property.  Thus it is
 * processed specially by output Formatters and is not treated
 * as a formatting parameter to the LogRecord message property.
 * <p>
 * @param   level   One of the message level identifiers, e.g., SEVERE
 * @param   sourceClass    Name of the class that issued the logging request
 * @param   sourceMethod   Name of the method that issued the logging request
 * @param   bundle         Resource bundle to localize {@code msg},
 *                         can be {@code null}
 * @param   msg     The string message (or a key in the message catalog)
 * @param   thrown  Throwable associated with the log message.
 * @since 1.8
 */
public void logrb(Level level, String sourceClass, String sourceMethod, ResourceBundle bundle, String msg, Throwable thrown) {
    if (!isLoggable(level)) {
        return;
    }
    LogRecord lr = new LogRecord(level, msg);
    lr.setSourceClassName(sourceClass);
    lr.setSourceMethodName(sourceMethod);
    lr.setThrown(thrown);
    doLog(lr, bundle);
}