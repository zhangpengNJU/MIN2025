/**
 * The <code>writeObject</code> is a single entry point to the persistence
 * and is used by a <code>Encoder</code> in the traditional
 * mode of delegation. Although this method is not final,
 * it should not need to be subclassed under normal circumstances.
 * <p>
 * This implementation first checks to see if the stream
 * has already encountered this object. Next the
 * <code>mutatesTo</code> method is called to see if
 * that candidate returned from the stream can
 * be mutated into an accurate copy of <code>oldInstance</code>.
 * If it can, the <code>initialize</code> method is called to
 * perform the initialization. If not, the candidate is removed
 * from the stream, and the <code>instantiate</code> method
 * is called to create a new candidate for this object.
 *
 * @param oldInstance The instance that will be created by this expression.
 * @param out The stream to which this expression will be written.
 *
 * @throws NullPointerException if {@code out} is {@code null}
 */
public void writeObject(Object oldInstance, Encoder out) {
    Object newInstance = out.get(oldInstance);
    if (!mutatesTo(oldInstance, newInstance)) {
        out.remove(oldInstance);
        out.writeExpression(instantiate(oldInstance, out));
    } else {
        initialize(oldInstance.getClass(), oldInstance, newInstance, out);
    }
}