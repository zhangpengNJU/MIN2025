/**
 * Throws a <code>SecurityException</code> if the
 * calling thread is not allowed to open a socket connection to the
 * specified host and port number.
 * <p>
 * A port number of <code>-1</code> indicates that the calling
 * method is attempting to determine the IP address of the specified
 * host name.
 * <p>
 * This method calls <code>checkPermission</code> with the
 * <code>SocketPermission(host+":"+port,"connect")</code> permission if
 * the port is not equal to -1. If the port is equal to -1, then
 * it calls <code>checkPermission</code> with the
 * <code>SocketPermission(host,"resolve")</code> permission.
 * <p>
 * If you override this method, then you should make a call to
 * <code>super.checkConnect</code>
 * at the point the overridden method would normally throw an
 * exception.
 *
 * @param      host   the host name port to connect to.
 * @param      port   the protocol port to connect to.
 * @exception  SecurityException  if the calling thread does not have
 *             permission to open a socket connection to the specified
 *               <code>host</code> and <code>port</code>.
 * @exception  NullPointerException if the <code>host</code> argument is
 *             <code>null</code>.
 * @see        #checkPermission(java.security.Permission) checkPermission
 */
public void checkConnect(String host, int port) {
    if (host == null) {
        throw new NullPointerException("host can't be null");
    }
    if (!host.startsWith("[") && host.indexOf(':') != -1) {
        host = "[" + host + "]";
    }
    if (port == -1) {
        checkPermission(new SocketPermission(host, SecurityConstants.SOCKET_RESOLVE_ACTION));
    } else {
        checkPermission(new SocketPermission(host + ":" + port, SecurityConstants.SOCKET_CONNECT_ACTION));
    }
}