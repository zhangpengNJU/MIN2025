/**
 * Parses the string argument as a signed decimal {@code long}.
 * The characters in the string must all be decimal digits, except
 * that the first character may be an ASCII minus sign {@code '-'}
 * ({@code \u005Cu002D'}) to indicate a negative value or an
 * ASCII plus sign {@code '+'} ({@code '\u005Cu002B'}) to
 * indicate a positive value. The resulting {@code long} value is
 * returned, exactly as if the argument and the radix {@code 10}
 * were given as arguments to the {@link
 * #parseLong(java.lang.String, int)} method.
 *
 * <p>Note that neither the character {@code L}
 * ({@code '\u005Cu004C'}) nor {@code l}
 * ({@code '\u005Cu006C'}) is permitted to appear at the end
 * of the string as a type indicator, as would be permitted in
 * Java programming language source code.
 *
 * @param      s   a {@code String} containing the {@code long}
 *             representation to be parsed
 * @return     the {@code long} represented by the argument in
 *             decimal.
 * @throws     NumberFormatException  if the string does not contain a
 *             parsable {@code long}.
 */
public static long parseLong(String s) throws NumberFormatException {
    return parseLong(s, 10);
}