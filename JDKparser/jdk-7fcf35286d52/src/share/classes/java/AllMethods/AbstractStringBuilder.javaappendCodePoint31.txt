/**
 * Appends the string representation of the {@code codePoint}
 * argument to this sequence.
 *
 * <p> The argument is appended to the contents of this sequence.
 * The length of this sequence increases by
 * {@link Character#charCount(int) Character.charCount(codePoint)}.
 *
 * <p> The overall effect is exactly as if the argument were
 * converted to a {@code char} array by the method
 * {@link Character#toChars(int)} and the character in that array
 * were then {@link #append(char[]) appended} to this character
 * sequence.
 *
 * @param   codePoint   a Unicode code point
 * @return  a reference to this object.
 * @exception IllegalArgumentException if the specified
 * {@code codePoint} isn't a valid Unicode code point
 */
public AbstractStringBuilder appendCodePoint(int codePoint) {
    final int count = this.count;
    if (Character.isBmpCodePoint(codePoint)) {
        ensureCapacityInternal(count + 1);
        value[count] = (char) codePoint;
        this.count = count + 1;
    } else if (Character.isValidCodePoint(codePoint)) {
        ensureCapacityInternal(count + 2);
        Character.toSurrogates(codePoint, value, count);
        this.count = count + 2;
    } else {
        throw new IllegalArgumentException();
    }
    return this;
}