/**
 * Returns the UnicodeBlock with the given name. Block
 * names are determined by The Unicode Standard. The file
 * Blocks-&lt;version&gt;.txt defines blocks for a particular
 * version of the standard. The {@link Character} class specifies
 * the version of the standard that it supports.
 * <p>
 * This method accepts block names in the following forms:
 * <ol>
 * <li> Canonical block names as defined by the Unicode Standard.
 * For example, the standard defines a "Basic Latin" block. Therefore, this
 * method accepts "Basic Latin" as a valid block name. The documentation of
 * each UnicodeBlock provides the canonical name.
 * <li>Canonical block names with all spaces removed. For example, "BasicLatin"
 * is a valid block name for the "Basic Latin" block.
 * <li>The text representation of each constant UnicodeBlock identifier.
 * For example, this method will return the {@link #BASIC_LATIN} block if
 * provided with the "BASIC_LATIN" name. This form replaces all spaces and
 * hyphens in the canonical name with underscores.
 * </ol>
 * Finally, character case is ignored for all of the valid block name forms.
 * For example, "BASIC_LATIN" and "basic_latin" are both valid block names.
 * The en_US locale's case mapping rules are used to provide case-insensitive
 * string comparisons for block name validation.
 * <p>
 * If the Unicode Standard changes block names, both the previous and
 * current names will be accepted.
 *
 * @param blockName A {@code UnicodeBlock} name.
 * @return The {@code UnicodeBlock} instance identified
 *         by {@code blockName}
 * @throws IllegalArgumentException if {@code blockName} is an
 *         invalid name
 * @throws NullPointerException if {@code blockName} is null
 * @since 1.5
 */
public static final UnicodeBlock forName(String blockName) {
    UnicodeBlock block = map.get(blockName.toUpperCase(Locale.US));
    if (block == null) {
        throw new IllegalArgumentException();
    }
    return block;
}