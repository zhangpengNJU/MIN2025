// -----------------------------------------------------------------------
/**
 * Obtains a clock that always returns the same instant.
 * <p>
 * This clock simply returns the specified instant.
 * As such, it is not a clock in the conventional sense.
 * The main use case for this is in testing, where the fixed clock ensures
 * tests are not dependent on the current clock.
 * <p>
 * The returned implementation is immutable, thread-safe and {@code Serializable}.
 *
 * @param fixedInstant  the instant to use as the clock, not null
 * @param zone  the time-zone to use to convert the instant to date-time, not null
 * @return a clock that always returns the same instant, not null
 */
public static Clock fixed(Instant fixedInstant, ZoneId zone) {
    Objects.requireNonNull(fixedInstant, "fixedInstant");
    Objects.requireNonNull(zone, "zone");
    return new FixedClock(fixedInstant, zone);
}