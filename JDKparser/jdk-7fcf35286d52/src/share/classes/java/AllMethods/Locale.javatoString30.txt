/**
 * Returns a string representation of this <code>Locale</code>
 * object, consisting of language, country, variant, script,
 * and extensions as below:
 * <blockquote>
 * language + "_" + country + "_" + (variant + "_#" | "#") + script + "-" + extensions
 * </blockquote>
 *
 * Language is always lower case, country is always upper case, script is always title
 * case, and extensions are always lower case.  Extensions and private use subtags
 * will be in canonical order as explained in {@link #toLanguageTag}.
 *
 * <p>When the locale has neither script nor extensions, the result is the same as in
 * Java 6 and prior.
 *
 * <p>If both the language and country fields are missing, this function will return
 * the empty string, even if the variant, script, or extensions field is present (you
 * can't have a locale with just a variant, the variant must accompany a well-formed
 * language or country code).
 *
 * <p>If script or extensions are present and variant is missing, no underscore is
 * added before the "#".
 *
 * <p>This behavior is designed to support debugging and to be compatible with
 * previous uses of <code>toString</code> that expected language, country, and variant
 * fields only.  To represent a Locale as a String for interchange purposes, use
 * {@link #toLanguageTag}.
 *
 * <p>Examples: <ul>
 * <li><tt>en</tt></li>
 * <li><tt>de_DE</tt></li>
 * <li><tt>_GB</tt></li>
 * <li><tt>en_US_WIN</tt></li>
 * <li><tt>de__POSIX</tt></li>
 * <li><tt>zh_CN_#Hans</tt></li>
 * <li><tt>zh_TW_#Hant-x-java</tt></li>
 * <li><tt>th_TH_TH_#u-nu-thai</tt></li></ul>
 *
 * @return A string representation of the Locale, for debugging.
 * @see #getDisplayName
 * @see #toLanguageTag
 */
@Override
public final String toString() {
    boolean l = (baseLocale.getLanguage().length() != 0);
    boolean s = (baseLocale.getScript().length() != 0);
    boolean r = (baseLocale.getRegion().length() != 0);
    boolean v = (baseLocale.getVariant().length() != 0);
    boolean e = (localeExtensions != null && localeExtensions.getID().length() != 0);
    StringBuilder result = new StringBuilder(baseLocale.getLanguage());
    if (r || (l && (v || s || e))) {
        result.append('_').append(// This may just append '_'
        baseLocale.getRegion());
    }
    if (v && (l || r)) {
        result.append('_').append(baseLocale.getVariant());
    }
    if (s && (l || r)) {
        result.append("_#").append(baseLocale.getScript());
    }
    if (e && (l || r)) {
        result.append('_');
        if (!s) {
            result.append('#');
        }
        result.append(localeExtensions.getID());
    }
    return result.toString();
}