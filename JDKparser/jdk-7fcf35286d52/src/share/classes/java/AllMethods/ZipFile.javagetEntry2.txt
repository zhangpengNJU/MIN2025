/**
 * Returns the zip file entry for the specified name, or null
 * if not found.
 *
 * @param name the name of the entry
 * @return the zip file entry, or null if not found
 * @throws IllegalStateException if the zip file has been closed
 */
public ZipEntry getEntry(String name) {
    if (name == null) {
        throw new NullPointerException("name");
    }
    long jzentry = 0;
    synchronized (this) {
        ensureOpen();
        jzentry = getEntry(jzfile, zc.getBytes(name), true);
        if (jzentry != 0) {
            // If no entry is found for the specified 'name' and
            // the 'name' does not end with a forward slash '/',
            // the implementation tries to find the entry with a
            // slash '/' appended to the end of the 'name', before
            // returning null. When such entry is found, the name
            // that actually is found (with a slash '/' attached)
            // is used
            // (disabled if jdk.util.zip.ensureTrailingSlash=false)
            ZipEntry ze = ensuretrailingslash ? getZipEntry(null, jzentry) : getZipEntry(name, jzentry);
            freeEntry(jzfile, jzentry);
            return ze;
        }
    }
    return null;
}