/**
 * Returns an array of all the objects currently registered
 * as <code><em>Foo</em>Listener</code>s
 * upon this <code>Component</code>.
 * <code><em>Foo</em>Listener</code>s are registered using the
 * <code>add<em>Foo</em>Listener</code> method.
 *
 * <p>
 * You can specify the <code>listenerType</code> argument
 * with a class literal, such as
 * <code><em>Foo</em>Listener.class</code>.
 * For example, you can query a
 * <code>Component</code> <code>c</code>
 * for its mouse listeners with the following code:
 *
 * <pre>MouseListener[] mls = (MouseListener[])(c.getListeners(MouseListener.class));</pre>
 *
 * If no such listeners exist, this method returns an empty array.
 *
 * @param listenerType the type of listeners requested; this parameter
 *          should specify an interface that descends from
 *          <code>java.util.EventListener</code>
 * @return an array of all objects registered as
 *          <code><em>Foo</em>Listener</code>s on this component,
 *          or an empty array if no such listeners have been added
 * @exception ClassCastException if <code>listenerType</code>
 *          doesn't specify a class or interface that implements
 *          <code>java.util.EventListener</code>
 * @throws NullPointerException if {@code listenerType} is {@code null}
 * @see #getComponentListeners
 * @see #getFocusListeners
 * @see #getHierarchyListeners
 * @see #getHierarchyBoundsListeners
 * @see #getKeyListeners
 * @see #getMouseListeners
 * @see #getMouseMotionListeners
 * @see #getMouseWheelListeners
 * @see #getInputMethodListeners
 * @see #getPropertyChangeListeners
 *
 * @since 1.3
 */
@SuppressWarnings("unchecked")
public <T extends EventListener> T[] getListeners(Class<T> listenerType) {
    EventListener l = null;
    if (listenerType == ComponentListener.class) {
        l = componentListener;
    } else if (listenerType == FocusListener.class) {
        l = focusListener;
    } else if (listenerType == HierarchyListener.class) {
        l = hierarchyListener;
    } else if (listenerType == HierarchyBoundsListener.class) {
        l = hierarchyBoundsListener;
    } else if (listenerType == KeyListener.class) {
        l = keyListener;
    } else if (listenerType == MouseListener.class) {
        l = mouseListener;
    } else if (listenerType == MouseMotionListener.class) {
        l = mouseMotionListener;
    } else if (listenerType == MouseWheelListener.class) {
        l = mouseWheelListener;
    } else if (listenerType == InputMethodListener.class) {
        l = inputMethodListener;
    } else if (listenerType == PropertyChangeListener.class) {
        return (T[]) getPropertyChangeListeners();
    }
    return AWTEventMulticaster.getListeners(l, listenerType);
}