/**
 * Compares two {@code Double} objects numerically.  There
 * are two ways in which comparisons performed by this method
 * differ from those performed by the Java language numerical
 * comparison operators ({@code <, <=, ==, >=, >})
 * when applied to primitive {@code double} values:
 * <ul><li>
 *          {@code Double.NaN} is considered by this method
 *          to be equal to itself and greater than all other
 *          {@code double} values (including
 *          {@code Double.POSITIVE_INFINITY}).
 * <li>
 *          {@code 0.0d} is considered by this method to be greater
 *          than {@code -0.0d}.
 * </ul>
 * This ensures that the <i>natural ordering</i> of
 * {@code Double} objects imposed by this method is <i>consistent
 * with equals</i>.
 *
 * @param   anotherDouble   the {@code Double} to be compared.
 * @return  the value {@code 0} if {@code anotherDouble} is
 *          numerically equal to this {@code Double}; a value
 *          less than {@code 0} if this {@code Double}
 *          is numerically less than {@code anotherDouble};
 *          and a value greater than {@code 0} if this
 *          {@code Double} is numerically greater than
 *          {@code anotherDouble}.
 *
 * @since   1.2
 */
public int compareTo(Double anotherDouble) {
    return Double.compare(value, anotherDouble.value);
}