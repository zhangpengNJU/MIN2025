/**
 * Lays out the container argument using this border layout.
 * <p>
 * This method actually reshapes the components in the specified
 * container in order to satisfy the constraints of this
 * <code>BorderLayout</code> object. The <code>NORTH</code>
 * and <code>SOUTH</code> components, if any, are placed at
 * the top and bottom of the container, respectively. The
 * <code>WEST</code> and <code>EAST</code> components are
 * then placed on the left and right, respectively. Finally,
 * the <code>CENTER</code> object is placed in any remaining
 * space in the middle.
 * <p>
 * Most applications do not call this method directly. This method
 * is called when a container calls its <code>doLayout</code> method.
 * @param   target   the container in which to do the layout.
 * @see     java.awt.Container
 * @see     java.awt.Container#doLayout()
 */
public void layoutContainer(Container target) {
    synchronized (target.getTreeLock()) {
        Insets insets = target.getInsets();
        int top = insets.top;
        int bottom = target.height - insets.bottom;
        int left = insets.left;
        int right = target.width - insets.right;
        boolean ltr = target.getComponentOrientation().isLeftToRight();
        Component c = null;
        if ((c = getChild(NORTH, ltr)) != null) {
            c.setSize(right - left, c.height);
            Dimension d = c.getPreferredSize();
            c.setBounds(left, top, right - left, d.height);
            top += d.height + vgap;
        }
        if ((c = getChild(SOUTH, ltr)) != null) {
            c.setSize(right - left, c.height);
            Dimension d = c.getPreferredSize();
            c.setBounds(left, bottom - d.height, right - left, d.height);
            bottom -= d.height + vgap;
        }
        if ((c = getChild(EAST, ltr)) != null) {
            c.setSize(c.width, bottom - top);
            Dimension d = c.getPreferredSize();
            c.setBounds(right - d.width, top, d.width, bottom - top);
            right -= d.width + hgap;
        }
        if ((c = getChild(WEST, ltr)) != null) {
            c.setSize(c.width, bottom - top);
            Dimension d = c.getPreferredSize();
            c.setBounds(left, top, d.width, bottom - top);
            left += d.width + hgap;
        }
        if ((c = getChild(CENTER, ltr)) != null) {
            c.setBounds(left, top, right - left, bottom - top);
        }
    }
}