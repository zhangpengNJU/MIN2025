/**
 * Joins a multicast group to begin receiving all datagrams sent to the group,
 * returning a membership key.
 *
 * <p> If this channel is currently a member of the group on the given
 * interface to receive all datagrams then the membership key, representing
 * that membership, is returned. Otherwise this channel joins the group and
 * the resulting new membership key is returned. The resulting membership key
 * is not {@link MembershipKey#sourceAddress source-specific}.
 *
 * <p> A multicast channel may join several multicast groups, including
 * the same group on more than one interface. An implementation may impose a
 * limit on the number of groups that may be joined at the same time.
 *
 * @param   group
 *          The multicast address to join
 * @param   interf
 *          The network interface on which to join the group
 *
 * @return  The membership key
 *
 * @throws  IllegalArgumentException
 *          If the group parameter is not a {@link InetAddress#isMulticastAddress
 *          multicast} address, or the group parameter is an address type
 *          that is not supported by this channel
 * @throws  IllegalStateException
 *          If the channel already has source-specific membership of the
 *          group on the interface
 * @throws  UnsupportedOperationException
 *          If the channel's socket is not an Internet Protocol socket
 * @throws  ClosedChannelException
 *          If this channel is closed
 * @throws  IOException
 *          If an I/O error occurs
 * @throws  SecurityException
 *          If a security manager is set, and its
 *          {@link SecurityManager#checkMulticast(InetAddress) checkMulticast}
 *          method denies access to the multiast group
 */
MembershipKey join(InetAddress group, NetworkInterface interf) throws IOException;