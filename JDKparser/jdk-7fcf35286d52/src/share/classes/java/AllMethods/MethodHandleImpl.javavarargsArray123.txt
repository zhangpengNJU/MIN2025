/**
 * Return a method handle that takes the indicated number of
 *  typed arguments and returns an array of them.
 *  The type argument is the array type.
 */
static MethodHandle varargsArray(Class<?> arrayType, int nargs) {
    Class<?> elemType = arrayType.getComponentType();
    if (elemType == null)
        throw new IllegalArgumentException("not an array: " + arrayType);
    // FIXME: Need more special casing and caching here.
    if (nargs >= MAX_JVM_ARITY / 2 - 1) {
        int slots = nargs;
        // 1 for receiver MH
        final int MAX_ARRAY_SLOTS = MAX_JVM_ARITY - 1;
        if (slots <= MAX_ARRAY_SLOTS && elemType.isPrimitive())
            slots *= Wrapper.forPrimitiveType(elemType).stackSlots();
        if (slots > MAX_ARRAY_SLOTS)
            throw new IllegalArgumentException("too many arguments: " + arrayType.getSimpleName() + ", length " + nargs);
    }
    if (elemType == Object.class)
        return varargsArray(nargs);
    // other cases:  primitive arrays, subtypes of Object[]
    MethodHandle[] cache = TYPED_COLLECTORS.get(elemType);
    MethodHandle mh = nargs < cache.length ? cache[nargs] : null;
    if (mh != null)
        return mh;
    if (nargs == 0) {
        Object example = java.lang.reflect.Array.newInstance(arrayType.getComponentType(), 0);
        mh = MethodHandles.constant(arrayType, example);
    } else if (elemType.isPrimitive()) {
        MethodHandle builder = Lazy.MH_fillNewArray;
        MethodHandle producer = buildArrayProducer(arrayType);
        mh = buildVarargsArray(builder, producer, nargs);
    } else {
        Class<? extends Object[]> objArrayType = arrayType.asSubclass(Object[].class);
        Object[] example = Arrays.copyOf(NO_ARGS_ARRAY, 0, objArrayType);
        MethodHandle builder = Lazy.MH_fillNewTypedArray.bindTo(example);
        // must be weakly typed
        MethodHandle producer = Lazy.MH_arrayIdentity;
        mh = buildVarargsArray(builder, producer, nargs);
    }
    mh = mh.asType(MethodType.methodType(arrayType, Collections.<Class<?>>nCopies(nargs, elemType)));
    mh = makeIntrinsic(mh, Intrinsic.NEW_ARRAY);
    assert (assertCorrectArity(mh, nargs));
    if (nargs < cache.length)
        cache[nargs] = mh;
    return mh;
}