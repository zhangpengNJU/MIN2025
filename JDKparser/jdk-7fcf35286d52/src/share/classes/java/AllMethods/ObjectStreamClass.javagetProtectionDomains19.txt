/**
 * Aggregate the ProtectionDomains of all the classes that separate
 * a concrete class {@code cl} from its ancestor's class declaring
 * a constructor {@code cons}.
 *
 * If {@code cl} is defined by the boot loader, or the constructor
 * {@code cons} is declared by {@code cl}, or if there is no security
 * manager, then this method does nothing and {@code null} is returned.
 *
 * @param cons A constructor declared by {@code cl} or one of its
 *             ancestors.
 * @param cl A concrete class, which is either the class declaring
 *           the constructor {@code cons}, or a serializable subclass
 *           of that class.
 * @return An array of ProtectionDomain representing the set of
 *         ProtectionDomain that separate the concrete class {@code cl}
 *         from its ancestor's declaring {@code cons}, or {@code null}.
 */
private ProtectionDomain[] getProtectionDomains(Constructor<?> cons, Class<?> cl) {
    ProtectionDomain[] domains = null;
    if (cons != null && cl.getClassLoader() != null && System.getSecurityManager() != null) {
        Class<?> cls = cl;
        Class<?> fnscl = cons.getDeclaringClass();
        Set<ProtectionDomain> pds = null;
        while (cls != fnscl) {
            ProtectionDomain pd = cls.getProtectionDomain();
            if (pd != null) {
                if (pds == null)
                    pds = new HashSet<>();
                pds.add(pd);
            }
            cls = cls.getSuperclass();
            if (cls == null) {
                // that's not supposed to happen
                // make a ProtectionDomain with no permission.
                // should we throw instead?
                if (pds == null)
                    pds = new HashSet<>();
                else
                    pds.clear();
                pds.add(noPermissionsDomain());
                break;
            }
        }
        if (pds != null) {
            domains = pds.toArray(new ProtectionDomain[0]);
        }
    }
    return domains;
}