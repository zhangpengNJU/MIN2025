/**
 * {@inheritDoc}
 *
 * @implSpec
 * The default implementation is equivalent to performing the following
 * steps for this {@code map}, then returning the current value or
 * {@code null} if absent:
 *
 * <pre> {@code
 * V oldValue = map.get(key);
 * V newValue = remappingFunction.apply(key, oldValue);
 * if (oldValue != null ) {
 *    if (newValue != null)
 *       map.replace(key, oldValue, newValue);
 *    else
 *       map.remove(key, oldValue);
 * } else {
 *    if (newValue != null)
 *       map.putIfAbsent(key, newValue);
 *    else
 *       return null;
 * }
 * }</pre>
 *
 * The default implementation may retry these steps when multiple
 * threads attempt updates including potentially calling the remapping
 * function multiple times.
 *
 * <p>This implementation assumes that the ConcurrentMap cannot contain null
 * values and {@code get()} returning null unambiguously means the key is
 * absent. Implementations which support null values <strong>must</strong>
 * override this default implementation.
 *
 * @throws UnsupportedOperationException {@inheritDoc}
 * @throws ClassCastException {@inheritDoc}
 * @throws NullPointerException {@inheritDoc}
 * @since 1.8
 */
@Override
default V compute(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction) {
    Objects.requireNonNull(remappingFunction);
    V oldValue = get(key);
    for (; ; ) {
        V newValue = remappingFunction.apply(key, oldValue);
        if (newValue == null) {
            // delete mapping
            if (oldValue != null || containsKey(key)) {
                // something to remove
                if (remove(key, oldValue)) {
                    // removed the old value as expected
                    return null;
                }
                // some other value replaced old value. try again.
                oldValue = get(key);
            } else {
                // nothing to do. Leave things as they were.
                return null;
            }
        } else {
            // add or replace old mapping
            if (oldValue != null) {
                // replace
                if (replace(key, oldValue, newValue)) {
                    // replaced as expected.
                    return newValue;
                }
                // some other value replaced old value. try again.
                oldValue = get(key);
            } else {
                // add (replace if oldValue was null)
                if ((oldValue = putIfAbsent(key, newValue)) == null) {
                    // replaced
                    return newValue;
                }
            // some other value replaced old value. try again.
            }
        }
    }
}