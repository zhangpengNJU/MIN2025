/**
 * Returns a {@link Collection} view of the values contained in this map.
 * The collection is backed by the map, so changes to the map are
 * reflected in the collection, and vice-versa.  If the map is
 * modified while an iteration over the collection is in progress,
 * the results of the iteration are undefined.  The collection
 * supports element removal, which removes the corresponding
 * mapping from the map, via the <tt>Iterator.remove</tt>,
 * <tt>Collection.remove</tt>, <tt>removeAll</tt>,
 * <tt>retainAll</tt> and <tt>clear</tt> methods.  It does not
 * support the <tt>add</tt> or <tt>addAll</tt> methods.
 *
 * <p><b>While the object returned by this method implements the
 * <tt>Collection</tt> interface, it does <i>not</i> obey
 * <tt>Collection's</tt> general contract.  Like its backing map,
 * the collection returned by this method defines element equality as
 * reference-equality rather than object-equality.  This affects the
 * behavior of its <tt>contains</tt>, <tt>remove</tt> and
 * <tt>containsAll</tt> methods.</b>
 */
public Collection<V> values() {
    Collection<V> vs = values;
    if (vs == null) {
        vs = new Values();
        values = vs;
    }
    return vs;
}