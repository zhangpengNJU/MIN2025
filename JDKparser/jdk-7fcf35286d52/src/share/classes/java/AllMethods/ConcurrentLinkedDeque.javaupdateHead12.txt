/**
 * Guarantees that any node which was unlinked before a call to
 * this method will be unreachable from head after it returns.
 * Does not guarantee to eliminate slack, only that head will
 * point to a node that was active while this method was running.
 */
private final void updateHead() {
    // Either head already points to an active node, or we keep
    // trying to cas it to the first node until it does.
    Node<E> h, p, q;
    restartFromHead: while ((h = head).item == null && (p = h.prev) != null) {
        for (; ; ) {
            if ((q = p.prev) == null || (q = (p = q).prev) == null) {
                // It is possible that p is PREV_TERMINATOR,
                // but if so, the CAS is guaranteed to fail.
                if (casHead(h, p))
                    return;
                else
                    continue restartFromHead;
            } else if (h != head)
                continue restartFromHead;
            else
                p = q;
        }
    }
}