/**
 * Returns a transformation matrix that translates user
 * space rendering to the requested orientation
 * of the page.  The values are placed into the
 * array as
 * {&nbsp;m00,&nbsp;m10,&nbsp;m01,&nbsp;m11,&nbsp;m02,&nbsp;m12} in
 * the form required by the {@link AffineTransform}
 * constructor.
 * @return the matrix used to translate user space rendering
 * to the orientation of the page.
 * @see java.awt.geom.AffineTransform
 */
public double[] getMatrix() {
    double[] matrix = new double[6];
    switch(mOrientation) {
        case LANDSCAPE:
            matrix[0] = 0;
            matrix[1] = -1;
            matrix[2] = 1;
            matrix[3] = 0;
            matrix[4] = 0;
            matrix[5] = mPaper.getHeight();
            break;
        case PORTRAIT:
            matrix[0] = 1;
            matrix[1] = 0;
            matrix[2] = 0;
            matrix[3] = 1;
            matrix[4] = 0;
            matrix[5] = 0;
            break;
        case REVERSE_LANDSCAPE:
            matrix[0] = 0;
            matrix[1] = 1;
            matrix[2] = -1;
            matrix[3] = 0;
            matrix[4] = mPaper.getWidth();
            matrix[5] = 0;
            break;
        default:
            throw new IllegalArgumentException();
    }
    return matrix;
}