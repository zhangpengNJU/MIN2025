/**
 * @throws NullPointerException       {@inheritDoc}
 * @throws RejectedExecutionException {@inheritDoc}
 */
public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) {
    // In previous versions of this class, this method constructed
    // a task to run ForkJoinTask.invokeAll, but now external
    // invocation of multiple tasks is at least as efficient.
    ArrayList<Future<T>> futures = new ArrayList<>(tasks.size());
    boolean done = false;
    try {
        for (Callable<T> t : tasks) {
            ForkJoinTask<T> f = new ForkJoinTask.AdaptedCallable<T>(t);
            futures.add(f);
            externalPush(f);
        }
        for (int i = 0, size = futures.size(); i < size; i++) ((ForkJoinTask<?>) futures.get(i)).quietlyJoin();
        done = true;
        return futures;
    } finally {
        if (!done)
            for (int i = 0, size = futures.size(); i < size; i++) futures.get(i).cancel(false);
    }
}