/**
 * Returns a string map view of this process builder's environment.
 *
 * Whenever a process builder is created, the environment is
 * initialized to a copy of the current process environment (see
 * {@link System#getenv()}).  Subprocesses subsequently started by
 * this object's {@link #start()} method will use this map as
 * their environment.
 *
 * <p>The returned object may be modified using ordinary {@link
 * java.util.Map Map} operations.  These modifications will be
 * visible to subprocesses started via the {@link #start()}
 * method.  Two {@code ProcessBuilder} instances always
 * contain independent process environments, so changes to the
 * returned map will never be reflected in any other
 * {@code ProcessBuilder} instance or the values returned by
 * {@link System#getenv System.getenv}.
 *
 * <p>If the system does not support environment variables, an
 * empty map is returned.
 *
 * <p>The returned map does not permit null keys or values.
 * Attempting to insert or query the presence of a null key or
 * value will throw a {@link NullPointerException}.
 * Attempting to query the presence of a key or value which is not
 * of type {@link String} will throw a {@link ClassCastException}.
 *
 * <p>The behavior of the returned map is system-dependent.  A
 * system may not allow modifications to environment variables or
 * may forbid certain variable names or values.  For this reason,
 * attempts to modify the map may fail with
 * {@link UnsupportedOperationException} or
 * {@link IllegalArgumentException}
 * if the modification is not permitted by the operating system.
 *
 * <p>Since the external format of environment variable names and
 * values is system-dependent, there may not be a one-to-one
 * mapping between them and Java's Unicode strings.  Nevertheless,
 * the map is implemented in such a way that environment variables
 * which are not modified by Java code will have an unmodified
 * native representation in the subprocess.
 *
 * <p>The returned map and its collection views may not obey the
 * general contract of the {@link Object#equals} and
 * {@link Object#hashCode} methods.
 *
 * <p>The returned map is typically case-sensitive on all platforms.
 *
 * <p>If a security manager exists, its
 * {@link SecurityManager#checkPermission checkPermission} method
 * is called with a
 * {@link RuntimePermission}{@code ("getenv.*")} permission.
 * This may result in a {@link SecurityException} being thrown.
 *
 * <p>When passing information to a Java subprocess,
 * <a href=System.html#EnvironmentVSSystemProperties>system properties</a>
 * are generally preferred over environment variables.
 *
 * @return this process builder's environment
 *
 * @throws SecurityException
 *         if a security manager exists and its
 *         {@link SecurityManager#checkPermission checkPermission}
 *         method doesn't allow access to the process environment
 *
 * @see    Runtime#exec(String[],String[],java.io.File)
 * @see    System#getenv()
 */
public Map<String, String> environment() {
    SecurityManager security = System.getSecurityManager();
    if (security != null)
        security.checkPermission(new RuntimePermission("getenv.*"));
    if (environment == null)
        environment = ProcessEnvironment.environment();
    assert environment != null;
    return environment;
}