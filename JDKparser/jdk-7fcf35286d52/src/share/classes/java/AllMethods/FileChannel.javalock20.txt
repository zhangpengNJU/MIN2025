/**
 * Acquires an exclusive lock on this channel's file.
 *
 * <p> An invocation of this method of the form <tt>fc.lock()</tt> behaves
 * in exactly the same way as the invocation
 *
 * <pre>
 *     fc.{@link #lock(long,long,boolean) lock}(0L, Long.MAX_VALUE, false) </pre>
 *
 * @return  A lock object representing the newly-acquired lock
 *
 * @throws  ClosedChannelException
 *          If this channel is closed
 *
 * @throws  AsynchronousCloseException
 *          If another thread closes this channel while the invoking
 *          thread is blocked in this method
 *
 * @throws  FileLockInterruptionException
 *          If the invoking thread is interrupted while blocked in this
 *          method
 *
 * @throws  OverlappingFileLockException
 *          If a lock that overlaps the requested region is already held by
 *          this Java virtual machine, or if another thread is already
 *          blocked in this method and is attempting to lock an overlapping
 *          region of the same file
 *
 * @throws  NonWritableChannelException
 *          If this channel was not opened for writing
 *
 * @throws  IOException
 *          If some other I/O error occurs
 *
 * @see     #lock(long,long,boolean)
 * @see     #tryLock()
 * @see     #tryLock(long,long,boolean)
 */
public final FileLock lock() throws IOException {
    return lock(0L, Long.MAX_VALUE, false);
}