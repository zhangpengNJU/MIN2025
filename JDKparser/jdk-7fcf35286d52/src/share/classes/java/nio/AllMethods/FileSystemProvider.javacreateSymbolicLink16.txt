/**
 * Creates a symbolic link to a target. This method works in exactly the
 * manner specified by the {@link Files#createSymbolicLink} method.
 *
 * <p> The default implementation of this method throws {@code
 * UnsupportedOperationException}.
 *
 * @param   link
 *          the path of the symbolic link to create
 * @param   target
 *          the target of the symbolic link
 * @param   attrs
 *          the array of attributes to set atomically when creating the
 *          symbolic link
 *
 * @throws  UnsupportedOperationException
 *          if the implementation does not support symbolic links or the
 *          array contains an attribute that cannot be set atomically when
 *          creating the symbolic link
 * @throws  FileAlreadyExistsException
 *          if a file with the name already exists <i>(optional specific
 *          exception)</i>
 * @throws  IOException
 *          if an I/O error occurs
 * @throws  SecurityException
 *          In the case of the default provider, and a security manager
 *          is installed, it denies {@link LinkPermission}<tt>("symbolic")</tt>
 *          or its {@link SecurityManager#checkWrite(String) checkWrite}
 *          method denies write access to the path of the symbolic link.
 */
public void createSymbolicLink(Path link, Path target, FileAttribute<?>... attrs) throws IOException {
    throw new UnsupportedOperationException();
}