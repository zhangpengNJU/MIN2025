// -- File Attributes --
/**
 * Returns a file attribute view of a given type.
 *
 * <p> A file attribute view provides a read-only or updatable view of a
 * set of file attributes. This method is intended to be used where the file
 * attribute view defines type-safe methods to read or update the file
 * attributes. The {@code type} parameter is the type of the attribute view
 * required and the method returns an instance of that type if supported.
 * The {@link BasicFileAttributeView} type supports access to the basic
 * attributes of a file. Invoking this method to select a file attribute
 * view of that type will always return an instance of that class.
 *
 * <p> The {@code options} array may be used to indicate how symbolic links
 * are handled by the resulting file attribute view for the case that the
 * file is a symbolic link. By default, symbolic links are followed. If the
 * option {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} is present then
 * symbolic links are not followed. This option is ignored by implementations
 * that do not support symbolic links.
 *
 * <p> <b>Usage Example:</b>
 * Suppose we want read or set a file's ACL, if supported:
 * <pre>
 *     Path path = ...
 *     AclFileAttributeView view = Files.getFileAttributeView(path, AclFileAttributeView.class);
 *     if (view != null) {
 *         List&lt;AclEntry&gt; acl = view.getAcl();
 *         :
 *     }
 * </pre>
 *
 * @param   <V>
 *          The {@code FileAttributeView} type
 * @param   path
 *          the path to the file
 * @param   type
 *          the {@code Class} object corresponding to the file attribute view
 * @param   options
 *          options indicating how symbolic links are handled
 *
 * @return  a file attribute view of the specified type, or {@code null} if
 *          the attribute view type is not available
 */
public static <V extends FileAttributeView> V getFileAttributeView(Path path, Class<V> type, LinkOption... options) {
    return provider(path).getFileAttributeView(path, type, options);
}