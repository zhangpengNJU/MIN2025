/**
 * Opens or creates a file, returning a seekable byte channel to access the
 * file.
 *
 * <p> This method opens or creates a file in exactly the manner specified
 * by the {@link #newByteChannel(Path,Set,FileAttribute[]) newByteChannel}
 * method.
 *
 * @param   path
 *          the path to the file to open or create
 * @param   options
 *          options specifying how the file is opened
 *
 * @return  a new seekable byte channel
 *
 * @throws  IllegalArgumentException
 *          if the set contains an invalid combination of options
 * @throws  UnsupportedOperationException
 *          if an unsupported open option is specified
 * @throws  FileAlreadyExistsException
 *          if a file of that name already exists and the {@link
 *          StandardOpenOption#CREATE_NEW CREATE_NEW} option is specified
 *          <i>(optional specific exception)</i>
 * @throws  IOException
 *          if an I/O error occurs
 * @throws  SecurityException
 *          In the case of the default provider, and a security manager is
 *          installed, the {@link SecurityManager#checkRead(String) checkRead}
 *          method is invoked to check read access to the path if the file is
 *          opened for reading. The {@link SecurityManager#checkWrite(String)
 *          checkWrite} method is invoked to check write access to the path
 *          if the file is opened for writing. The {@link
 *          SecurityManager#checkDelete(String) checkDelete} method is
 *          invoked to check delete access if the file is opened with the
 *          {@code DELETE_ON_CLOSE} option.
 *
 * @see java.nio.channels.FileChannel#open(Path,OpenOption[])
 */
public static SeekableByteChannel newByteChannel(Path path, OpenOption... options) throws IOException {
    Set<OpenOption> set = new HashSet<OpenOption>(options.length);
    Collections.addAll(set, options);
    return newByteChannel(path, set);
}