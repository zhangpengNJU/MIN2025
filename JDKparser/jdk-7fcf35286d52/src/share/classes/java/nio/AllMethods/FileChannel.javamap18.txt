/**
 * Maps a region of this channel's file directly into memory.
 *
 * <p> A region of a file may be mapped into memory in one of three modes:
 * </p>
 *
 * <ul>
 *
 *   <li><p> <i>Read-only:</i> Any attempt to modify the resulting buffer
 *   will cause a {@link java.nio.ReadOnlyBufferException} to be thrown.
 *   ({@link MapMode#READ_ONLY MapMode.READ_ONLY}) </p></li>
 *
 *   <li><p> <i>Read/write:</i> Changes made to the resulting buffer will
 *   eventually be propagated to the file; they may or may not be made
 *   visible to other programs that have mapped the same file.  ({@link
 *   MapMode#READ_WRITE MapMode.READ_WRITE}) </p></li>
 *
 *   <li><p> <i>Private:</i> Changes made to the resulting buffer will not
 *   be propagated to the file and will not be visible to other programs
 *   that have mapped the same file; instead, they will cause private
 *   copies of the modified portions of the buffer to be created.  ({@link
 *   MapMode#PRIVATE MapMode.PRIVATE}) </p></li>
 *
 * </ul>
 *
 * <p> For a read-only mapping, this channel must have been opened for
 * reading; for a read/write or private mapping, this channel must have
 * been opened for both reading and writing.
 *
 * <p> The {@link MappedByteBuffer <i>mapped byte buffer</i>}
 * returned by this method will have a position of zero and a limit and
 * capacity of <tt>size</tt>; its mark will be undefined.  The buffer and
 * the mapping that it represents will remain valid until the buffer itself
 * is garbage-collected.
 *
 * <p> A mapping, once established, is not dependent upon the file channel
 * that was used to create it.  Closing the channel, in particular, has no
 * effect upon the validity of the mapping.
 *
 * <p> Many of the details of memory-mapped files are inherently dependent
 * upon the underlying operating system and are therefore unspecified.  The
 * behavior of this method when the requested region is not completely
 * contained within this channel's file is unspecified.  Whether changes
 * made to the content or size of the underlying file, by this program or
 * another, are propagated to the buffer is unspecified.  The rate at which
 * changes to the buffer are propagated to the file is unspecified.
 *
 * <p> For most operating systems, mapping a file into memory is more
 * expensive than reading or writing a few tens of kilobytes of data via
 * the usual {@link #read read} and {@link #write write} methods.  From the
 * standpoint of performance it is generally only worth mapping relatively
 * large files into memory.  </p>
 *
 * @param  mode
 *         One of the constants {@link MapMode#READ_ONLY READ_ONLY}, {@link
 *         MapMode#READ_WRITE READ_WRITE}, or {@link MapMode#PRIVATE
 *         PRIVATE} defined in the {@link MapMode} class, according to
 *         whether the file is to be mapped read-only, read/write, or
 *         privately (copy-on-write), respectively
 *
 * @param  position
 *         The position within the file at which the mapped region
 *         is to start; must be non-negative
 *
 * @param  size
 *         The size of the region to be mapped; must be non-negative and
 *         no greater than {@link java.lang.Integer#MAX_VALUE}
 *
 * @return  The mapped byte buffer
 *
 * @throws NonReadableChannelException
 *         If the <tt>mode</tt> is {@link MapMode#READ_ONLY READ_ONLY} but
 *         this channel was not opened for reading
 *
 * @throws NonWritableChannelException
 *         If the <tt>mode</tt> is {@link MapMode#READ_WRITE READ_WRITE} or
 *         {@link MapMode#PRIVATE PRIVATE} but this channel was not opened
 *         for both reading and writing
 *
 * @throws IllegalArgumentException
 *         If the preconditions on the parameters do not hold
 *
 * @throws IOException
 *         If some other I/O error occurs
 *
 * @see java.nio.channels.FileChannel.MapMode
 * @see java.nio.MappedByteBuffer
 */
public abstract MappedByteBuffer map(MapMode mode, long position, long size) throws IOException;