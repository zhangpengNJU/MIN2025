/**
 * Returns an existing {@code FileSystem} created by this provider.
 *
 * <p> This method returns a reference to a {@code FileSystem} that was
 * created by invoking the {@link #newFileSystem(URI,Map) newFileSystem(URI,Map)}
 * method. File systems created the {@link #newFileSystem(Path,Map)
 * newFileSystem(Path,Map)} method are not returned by this method.
 * The file system is identified by its {@code URI}. Its exact form
 * is highly provider dependent. In the case of the default provider the URI's
 * path component is {@code "/"} and the authority, query and fragment components
 * are undefined (Undefined components are represented by {@code null}).
 *
 * <p> Once a file system created by this provider is {@link
 * java.nio.file.FileSystem#close closed} it is provider-dependent if this
 * method returns a reference to the closed file system or throws {@link
 * FileSystemNotFoundException}. If the provider allows a new file system to
 * be created with the same URI as a file system it previously created then
 * this method throws the exception if invoked after the file system is
 * closed (and before a new instance is created by the {@link #newFileSystem
 * newFileSystem} method).
 *
 * <p> If a security manager is installed then a provider implementation
 * may require to check a permission before returning a reference to an
 * existing file system. In the case of the {@link FileSystems#getDefault
 * default} file system, no permission check is required.
 *
 * @param   uri
 *          URI reference
 *
 * @return  The file system
 *
 * @throws  IllegalArgumentException
 *          If the pre-conditions for the {@code uri} parameter aren't met
 * @throws  FileSystemNotFoundException
 *          If the file system does not exist
 * @throws  SecurityException
 *          If a security manager is installed and it denies an unspecified
 *          permission.
 */
public abstract FileSystem getFileSystem(URI uri);