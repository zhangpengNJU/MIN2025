/**
 * Updates (replace) the access control list.
 *
 * <p> Where the file system supports Access Control Lists, and it uses an
 * ACL model that differs from the NFSv4 defined ACL model, then this method
 * must translate the ACL to the model supported by the file system. This
 * method should reject (by throwing {@link IOException IOException}) any
 * attempt to write an ACL that would appear to make the file more secure
 * than would be the case if the ACL were updated. Where an implementation
 * does not support a mapping of {@link AclEntryType#AUDIT} or {@link
 * AclEntryType#ALARM} entries, then this method ignores these entries when
 * writing the ACL.
 *
 * <p> If an ACL entry contains a {@link AclEntry#principal user-principal}
 * that is not associated with the same provider as this attribute view then
 * {@link ProviderMismatchException} is thrown. Additional validation, if
 * any, is implementation dependent.
 *
 * <p> If the file system supports other security related file attributes
 * (such as a file {@link PosixFileAttributes#permissions
 * access-permissions} for example), the updating the access control list
 * may also cause these security related attributes to be updated.
 *
 * @param   acl
 *          the new access control list
 *
 * @throws  IOException
 *          if an I/O error occurs or the ACL is invalid
 * @throws  SecurityException
 *          In the case of the default provider, a security manager is
 *          installed, it denies {@link RuntimePermission}<tt>("accessUserInformation")</tt>
 *          or its {@link SecurityManager#checkWrite(String) checkWrite}
 *          method denies write access to the file.
 */
void setAcl(List<AclEntry> acl) throws IOException;