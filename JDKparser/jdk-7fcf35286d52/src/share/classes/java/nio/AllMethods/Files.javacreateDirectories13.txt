/**
 * Creates a directory by creating all nonexistent parent directories first.
 * Unlike the {@link #createDirectory createDirectory} method, an exception
 * is not thrown if the directory could not be created because it already
 * exists.
 *
 * <p> The {@code attrs} parameter is optional {@link FileAttribute
 * file-attributes} to set atomically when creating the nonexistent
 * directories. Each file attribute is identified by its {@link
 * FileAttribute#name name}. If more than one attribute of the same name is
 * included in the array then all but the last occurrence is ignored.
 *
 * <p> If this method fails, then it may do so after creating some, but not
 * all, of the parent directories.
 *
 * @param   dir
 *          the directory to create
 *
 * @param   attrs
 *          an optional list of file attributes to set atomically when
 *          creating the directory
 *
 * @return  the directory
 *
 * @throws  UnsupportedOperationException
 *          if the array contains an attribute that cannot be set atomically
 *          when creating the directory
 * @throws  FileAlreadyExistsException
 *          if {@code dir} exists but is not a directory <i>(optional specific
 *          exception)</i>
 * @throws  IOException
 *          if an I/O error occurs
 * @throws  SecurityException
 *          in the case of the default provider, and a security manager is
 *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}
 *          method is invoked prior to attempting to create a directory and
 *          its {@link SecurityManager#checkRead(String) checkRead} is
 *          invoked for each parent directory that is checked. If {@code
 *          dir} is not an absolute path then its {@link Path#toAbsolutePath
 *          toAbsolutePath} may need to be invoked to get its absolute path.
 *          This may invoke the security manager's {@link
 *          SecurityManager#checkPropertyAccess(String) checkPropertyAccess}
 *          method to check access to the system property {@code user.dir}
 */
public static Path createDirectories(Path dir, FileAttribute<?>... attrs) throws IOException {
    // attempt to create the directory
    try {
        createAndCheckIsDirectory(dir, attrs);
        return dir;
    } catch (FileAlreadyExistsException x) {
        // file exists and is not a directory
        throw x;
    } catch (IOException x) {
    // parent may not exist or other reason
    }
    SecurityException se = null;
    try {
        dir = dir.toAbsolutePath();
    } catch (SecurityException x) {
        // don't have permission to get absolute path
        se = x;
    }
    // find a decendent that exists
    Path parent = dir.getParent();
    while (parent != null) {
        try {
            provider(parent).checkAccess(parent);
            break;
        } catch (NoSuchFileException x) {
        // does not exist
        }
        parent = parent.getParent();
    }
    if (parent == null) {
        // unable to find existing parent
        if (se == null) {
            throw new FileSystemException(dir.toString(), null, "Unable to determine if root directory exists");
        } else {
            throw se;
        }
    }
    // create directories
    Path child = parent;
    for (Path name : parent.relativize(dir)) {
        child = child.resolve(name);
        createAndCheckIsDirectory(child, attrs);
    }
    return dir;
}