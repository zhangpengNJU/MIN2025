/**
 * Returns the set of permissions corresponding to a given {@code String}
 * representation.
 *
 * <p> The {@code perms} parameter is a {@code String} representing the
 * permissions. It has 9 characters that are interpreted as three sets of
 * three. The first set refers to the owner's permissions; the next to the
 * group permissions and the last to others. Within each set, the first
 * character is {@code 'r'} to indicate permission to read, the second
 * character is {@code 'w'} to indicate permission to write, and the third
 * character is {@code 'x'} for execute permission. Where a permission is
 * not set then the corresponding character is set to {@code '-'}.
 *
 * <p> <b>Usage Example:</b>
 * Suppose we require the set of permissions that indicate the owner has read,
 * write, and execute permissions, the group has read and execute permissions
 * and others have none.
 * <pre>
 *   Set&lt;PosixFilePermission&gt; perms = PosixFilePermissions.fromString("rwxr-x---");
 * </pre>
 *
 * @param   perms
 *          string representing a set of permissions
 *
 * @return  the resulting set of permissions
 *
 * @throws  IllegalArgumentException
 *          if the string cannot be converted to a set of permissions
 *
 * @see #toString(Set)
 */
public static Set<PosixFilePermission> fromString(String perms) {
    if (perms.length() != 9)
        throw new IllegalArgumentException("Invalid mode");
    Set<PosixFilePermission> result = EnumSet.noneOf(PosixFilePermission.class);
    if (isR(perms.charAt(0)))
        result.add(OWNER_READ);
    if (isW(perms.charAt(1)))
        result.add(OWNER_WRITE);
    if (isX(perms.charAt(2)))
        result.add(OWNER_EXECUTE);
    if (isR(perms.charAt(3)))
        result.add(GROUP_READ);
    if (isW(perms.charAt(4)))
        result.add(GROUP_WRITE);
    if (isX(perms.charAt(5)))
        result.add(GROUP_EXECUTE);
    if (isR(perms.charAt(6)))
        result.add(OTHERS_READ);
    if (isW(perms.charAt(7)))
        result.add(OTHERS_WRITE);
    if (isX(perms.charAt(8)))
        result.add(OTHERS_EXECUTE);
    return result;
}