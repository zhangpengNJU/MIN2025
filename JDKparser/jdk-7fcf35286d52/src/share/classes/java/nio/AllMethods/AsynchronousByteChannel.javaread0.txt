/**
 * Reads a sequence of bytes from this channel into the given buffer.
 *
 * <p> This method initiates an asynchronous read operation to read a
 * sequence of bytes from this channel into the given buffer. The {@code
 * handler} parameter is a completion handler that is invoked when the read
 * operation completes (or fails). The result passed to the completion
 * handler is the number of bytes read or {@code -1} if no bytes could be
 * read because the channel has reached end-of-stream.
 *
 * <p> The read operation may read up to <i>r</i> bytes from the channel,
 * where <i>r</i> is the number of bytes remaining in the buffer, that is,
 * {@code dst.remaining()} at the time that the read is attempted. Where
 * <i>r</i> is 0, the read operation completes immediately with a result of
 * {@code 0} without initiating an I/O operation.
 *
 * <p> Suppose that a byte sequence of length <i>n</i> is read, where
 * <tt>0</tt>&nbsp;<tt>&lt;</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;<i>r</i>.
 * This byte sequence will be transferred into the buffer so that the first
 * byte in the sequence is at index <i>p</i> and the last byte is at index
 * <i>p</i>&nbsp;<tt>+</tt>&nbsp;<i>n</i>&nbsp;<tt>-</tt>&nbsp;<tt>1</tt>,
 * where <i>p</i> is the buffer's position at the moment the read is
 * performed. Upon completion the buffer's position will be equal to
 * <i>p</i>&nbsp;<tt>+</tt>&nbsp;<i>n</i>; its limit will not have changed.
 *
 * <p> Buffers are not safe for use by multiple concurrent threads so care
 * should be taken to not access the buffer until the operation has
 * completed.
 *
 * <p> This method may be invoked at any time. Some channel types may not
 * allow more than one read to be outstanding at any given time. If a thread
 * initiates a read operation before a previous read operation has
 * completed then a {@link ReadPendingException} will be thrown.
 *
 * @param   <A>
 *          The type of the attachment
 * @param   dst
 *          The buffer into which bytes are to be transferred
 * @param   attachment
 *          The object to attach to the I/O operation; can be {@code null}
 * @param   handler
 *          The completion handler
 *
 * @throws  IllegalArgumentException
 *          If the buffer is read-only
 * @throws  ReadPendingException
 *          If the channel does not allow more than one read to be outstanding
 *          and a previous read has not completed
 * @throws  ShutdownChannelGroupException
 *          If the channel is associated with a {@link AsynchronousChannelGroup
 *          group} that has terminated
 */
<A> void read(ByteBuffer dst, A attachment, CompletionHandler<Integer, ? super A> handler);