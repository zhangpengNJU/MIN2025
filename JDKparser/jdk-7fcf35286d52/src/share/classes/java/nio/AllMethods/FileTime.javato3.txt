/**
 * Returns the value at the given unit of granularity.
 *
 * <p> Conversion from a coarser granularity that would numerically overflow
 * saturate to {@code Long.MIN_VALUE} if negative or {@code Long.MAX_VALUE}
 * if positive.
 *
 * @param   unit
 *          the unit of granularity for the return value
 *
 * @return  value in the given unit of granularity, since the epoch
 *          since the epoch (1970-01-01T00:00:00Z); can be negative
 */
public long to(TimeUnit unit) {
    Objects.requireNonNull(unit, "unit");
    if (this.unit != null) {
        return unit.convert(this.value, this.unit);
    } else {
        long secs = unit.convert(instant.getEpochSecond(), TimeUnit.SECONDS);
        if (secs == Long.MIN_VALUE || secs == Long.MAX_VALUE) {
            return secs;
        }
        long nanos = unit.convert(instant.getNano(), TimeUnit.NANOSECONDS);
        long r = secs + nanos;
        // Math.addExact() variant
        if (((secs ^ r) & (nanos ^ r)) < 0) {
            return (secs < 0) ? Long.MIN_VALUE : Long.MAX_VALUE;
        }
        return r;
    }
}