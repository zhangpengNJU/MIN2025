/**
 * Tests whether a file is a symbolic link.
 *
 * <p> Where it is required to distinguish an I/O exception from the case
 * that the file is not a symbolic link then the file attributes can be
 * read with the {@link #readAttributes(Path,Class,LinkOption[])
 * readAttributes} method and the file type tested with the {@link
 * BasicFileAttributes#isSymbolicLink} method.
 *
 * @param   path  The path to the file
 *
 * @return  {@code true} if the file is a symbolic link; {@code false} if
 *          the file does not exist, is not a symbolic link, or it cannot
 *          be determined if the file is a symbolic link or not.
 *
 * @throws  SecurityException
 *          In the case of the default provider, and a security manager is
 *          installed, its {@link SecurityManager#checkRead(String) checkRead}
 *          method denies read access to the file.
 */
public static boolean isSymbolicLink(Path path) {
    try {
        return readAttributes(path, BasicFileAttributes.class, LinkOption.NOFOLLOW_LINKS).isSymbolicLink();
    } catch (IOException ioe) {
        return false;
    }
}