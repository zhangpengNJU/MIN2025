/**
 * Attempts to acquire a lock on the given region of this channel's file.
 *
 * <p> This method does not block. An invocation always returns immediately,
 * either having acquired a lock on the requested region or having failed to
 * do so.  If it fails to acquire a lock because an overlapping lock is held
 * by another program then it returns {@code null}.  If it fails to acquire
 * a lock for any other reason then an appropriate exception is thrown.
 *
 * @param  position
 *         The position at which the locked region is to start; must be
 *         non-negative
 *
 * @param  size
 *         The size of the locked region; must be non-negative, and the sum
 *         {@code position}&nbsp;+&nbsp;{@code size} must be non-negative
 *
 * @param  shared
 *         {@code true} to request a shared lock,
 *         {@code false} to request an exclusive lock
 *
 * @return  A lock object representing the newly-acquired lock,
 *          or {@code null} if the lock could not be acquired
 *          because another program holds an overlapping lock
 *
 * @throws  IllegalArgumentException
 *          If the preconditions on the parameters do not hold
 * @throws  ClosedChannelException
 *          If this channel is closed
 * @throws  OverlappingFileLockException
 *          If a lock that overlaps the requested region is already held by
 *          this Java virtual machine, or if another thread is already
 *          blocked in this method and is attempting to lock an overlapping
 *          region of the same file
 * @throws  NonReadableChannelException
 *          If {@code shared} is true but this channel was not opened for reading
 * @throws  NonWritableChannelException
 *          If {@code shared} is false but this channel was not opened for writing
 *
 * @throws  IOException
 *          If some other I/O error occurs
 *
 * @see     #lock(Object,CompletionHandler)
 * @see     #lock(long,long,boolean,Object,CompletionHandler)
 * @see     #tryLock()
 */
public abstract FileLock tryLock(long position, long size, boolean shared) throws IOException;