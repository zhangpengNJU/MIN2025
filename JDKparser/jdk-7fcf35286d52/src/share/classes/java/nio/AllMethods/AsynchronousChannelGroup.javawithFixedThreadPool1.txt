/**
 * Creates an asynchronous channel group with a fixed thread pool.
 *
 * <p> The resulting asynchronous channel group reuses a fixed number of
 * threads. At any point, at most {@code nThreads} threads will be active
 * processing tasks that are submitted to handle I/O events and dispatch
 * completion results for operations initiated on asynchronous channels in
 * the group.
 *
 * <p> The group is created by invoking the {@link
 * AsynchronousChannelProvider#openAsynchronousChannelGroup(int,ThreadFactory)
 * openAsynchronousChannelGroup(int,ThreadFactory)} method of the system-wide
 * default {@link AsynchronousChannelProvider} object.
 *
 * @param   nThreads
 *          The number of threads in the pool
 * @param   threadFactory
 *          The factory to use when creating new threads
 *
 * @return  A new asynchronous channel group
 *
 * @throws  IllegalArgumentException
 *          If {@code nThreads <= 0}
 * @throws  IOException
 *          If an I/O error occurs
 */
public static AsynchronousChannelGroup withFixedThreadPool(int nThreads, ThreadFactory threadFactory) throws IOException {
    return AsynchronousChannelProvider.provider().openAsynchronousChannelGroup(nThreads, threadFactory);
}