/**
 * Checks the existence, and optionally the accessibility, of a file.
 *
 * <p> This method may be used by the {@link Files#isReadable isReadable},
 * {@link Files#isWritable isWritable} and {@link Files#isExecutable
 * isExecutable} methods to check the accessibility of a file.
 *
 * <p> This method checks the existence of a file and that this Java virtual
 * machine has appropriate privileges that would allow it access the file
 * according to all of access modes specified in the {@code modes} parameter
 * as follows:
 *
 * <table border=1 cellpadding=5 summary="">
 * <tr> <th>Value</th> <th>Description</th> </tr>
 * <tr>
 *   <td> {@link AccessMode#READ READ} </td>
 *   <td> Checks that the file exists and that the Java virtual machine has
 *     permission to read the file. </td>
 * </tr>
 * <tr>
 *   <td> {@link AccessMode#WRITE WRITE} </td>
 *   <td> Checks that the file exists and that the Java virtual machine has
 *     permission to write to the file, </td>
 * </tr>
 * <tr>
 *   <td> {@link AccessMode#EXECUTE EXECUTE} </td>
 *   <td> Checks that the file exists and that the Java virtual machine has
 *     permission to {@link Runtime#exec execute} the file. The semantics
 *     may differ when checking access to a directory. For example, on UNIX
 *     systems, checking for {@code EXECUTE} access checks that the Java
 *     virtual machine has permission to search the directory in order to
 *     access file or subdirectories. </td>
 * </tr>
 * </table>
 *
 * <p> If the {@code modes} parameter is of length zero, then the existence
 * of the file is checked.
 *
 * <p> This method follows symbolic links if the file referenced by this
 * object is a symbolic link. Depending on the implementation, this method
 * may require to read file permissions, access control lists, or other
 * file attributes in order to check the effective access to the file. To
 * determine the effective access to a file may require access to several
 * attributes and so in some implementations this method may not be atomic
 * with respect to other file system operations.
 *
 * @param   path
 *          the path to the file to check
 * @param   modes
 *          The access modes to check; may have zero elements
 *
 * @throws  UnsupportedOperationException
 *          an implementation is required to support checking for
 *          {@code READ}, {@code WRITE}, and {@code EXECUTE} access. This
 *          exception is specified to allow for the {@code Access} enum to
 *          be extended in future releases.
 * @throws  NoSuchFileException
 *          if a file does not exist <i>(optional specific exception)</i>
 * @throws  AccessDeniedException
 *          the requested access would be denied or the access cannot be
 *          determined because the Java virtual machine has insufficient
 *          privileges or other reasons. <i>(optional specific exception)</i>
 * @throws  IOException
 *          if an I/O error occurs
 * @throws  SecurityException
 *          In the case of the default provider, and a security manager is
 *          installed, the {@link SecurityManager#checkRead(String) checkRead}
 *          is invoked when checking read access to the file or only the
 *          existence of the file, the {@link SecurityManager#checkWrite(String)
 *          checkWrite} is invoked when checking write access to the file,
 *          and {@link SecurityManager#checkExec(String) checkExec} is invoked
 *          when checking execute access.
 */
public abstract void checkAccess(Path path, AccessMode... modes) throws IOException;