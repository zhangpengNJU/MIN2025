/**
 * Tests whether a file is a directory.
 *
 * <p> The {@code options} array may be used to indicate how symbolic links
 * are handled for the case that the file is a symbolic link. By default,
 * symbolic links are followed and the file attribute of the final target
 * of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS
 * NOFOLLOW_LINKS} is present then symbolic links are not followed.
 *
 * <p> Where it is required to distinguish an I/O exception from the case
 * that the file is not a directory then the file attributes can be
 * read with the {@link #readAttributes(Path,Class,LinkOption[])
 * readAttributes} method and the file type tested with the {@link
 * BasicFileAttributes#isDirectory} method.
 *
 * @param   path
 *          the path to the file to test
 * @param   options
 *          options indicating how symbolic links are handled
 *
 * @return  {@code true} if the file is a directory; {@code false} if
 *          the file does not exist, is not a directory, or it cannot
 *          be determined if the file is a directory or not.
 *
 * @throws  SecurityException
 *          In the case of the default provider, and a security manager is
 *          installed, its {@link SecurityManager#checkRead(String) checkRead}
 *          method denies read access to the file.
 */
public static boolean isDirectory(Path path, LinkOption... options) {
    try {
        return readAttributes(path, BasicFileAttributes.class, options).isDirectory();
    } catch (IOException ioe) {
        return false;
    }
}