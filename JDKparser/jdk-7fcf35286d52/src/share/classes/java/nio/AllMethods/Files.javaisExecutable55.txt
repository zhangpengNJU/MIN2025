/**
 * Tests whether a file is executable. This method checks that a file exists
 * and that this Java virtual machine has appropriate privileges to {@link
 * Runtime#exec execute} the file. The semantics may differ when checking
 * access to a directory. For example, on UNIX systems, checking for
 * execute access checks that the Java virtual machine has permission to
 * search the directory in order to access file or subdirectories.
 *
 * <p> Depending on the implementation, this method may require to read file
 * permissions, access control lists, or other file attributes in order to
 * check the effective access to the file. Consequently, this method may not
 * be atomic with respect to other file system operations.
 *
 * <p> Note that the result of this method is immediately outdated, there is
 * no guarantee that a subsequent attempt to execute the file will succeed
 * (or even that it will access the same file). Care should be taken when
 * using this method in security sensitive applications.
 *
 * @param   path
 *          the path to the file to check
 *
 * @return  {@code true} if the file exists and is executable; {@code false}
 *          if the file does not exist, execute access would be denied because
 *          the Java virtual machine has insufficient privileges, or access
 *          cannot be determined
 *
 * @throws  SecurityException
 *          In the case of the default provider, and a security manager is
 *          installed, the {@link SecurityManager#checkExec(String)
 *          checkExec} is invoked to check execute access to the file.
 */
public static boolean isExecutable(Path path) {
    return isAccessible(path, AccessMode.EXECUTE);
}