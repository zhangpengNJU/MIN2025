/**
 * Constructs a new {@code FileSystem} object identified by a URI. This
 * method is invoked by the {@link FileSystems#newFileSystem(URI,Map)}
 * method to open a new file system identified by a URI.
 *
 * <p> The {@code uri} parameter is an absolute, hierarchical URI, with a
 * scheme equal (without regard to case) to the scheme supported by this
 * provider. The exact form of the URI is highly provider dependent. The
 * {@code env} parameter is a map of provider specific properties to configure
 * the file system.
 *
 * <p> This method throws {@link FileSystemAlreadyExistsException} if the
 * file system already exists because it was previously created by an
 * invocation of this method. Once a file system is {@link
 * java.nio.file.FileSystem#close closed} it is provider-dependent if the
 * provider allows a new file system to be created with the same URI as a
 * file system it previously created.
 *
 * @param   uri
 *          URI reference
 * @param   env
 *          A map of provider specific properties to configure the file system;
 *          may be empty
 *
 * @return  A new file system
 *
 * @throws  IllegalArgumentException
 *          If the pre-conditions for the {@code uri} parameter aren't met,
 *          or the {@code env} parameter does not contain properties required
 *          by the provider, or a property value is invalid
 * @throws  IOException
 *          An I/O error occurs creating the file system
 * @throws  SecurityException
 *          If a security manager is installed and it denies an unspecified
 *          permission required by the file system provider implementation
 * @throws  FileSystemAlreadyExistsException
 *          If the file system has already been created
 */
public abstract FileSystem newFileSystem(URI uri, Map<String, ?> env) throws IOException;