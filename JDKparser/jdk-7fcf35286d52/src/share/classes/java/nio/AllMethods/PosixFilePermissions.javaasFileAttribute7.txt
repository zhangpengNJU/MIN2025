/**
 * Creates a {@link FileAttribute}, encapsulating a copy of the given file
 * permissions, suitable for passing to the {@link java.nio.file.Files#createFile
 * createFile} or {@link java.nio.file.Files#createDirectory createDirectory}
 * methods.
 *
 * @param   perms
 *          the set of permissions
 *
 * @return  an attribute encapsulating the given file permissions with
 *          {@link FileAttribute#name name} {@code "posix:permissions"}
 *
 * @throws  ClassCastException
 *          if the set contains elements that are not of type {@code
 *          PosixFilePermission}
 */
public static FileAttribute<Set<PosixFilePermission>> asFileAttribute(Set<PosixFilePermission> perms) {
    // copy set and check for nulls (CCE will be thrown if an element is not
    // a PosixFilePermission)
    perms = new HashSet<PosixFilePermission>(perms);
    for (PosixFilePermission p : perms) {
        if (p == null)
            throw new NullPointerException();
    }
    final Set<PosixFilePermission> value = perms;
    return new FileAttribute<Set<PosixFilePermission>>() {

        @Override
        public String name() {
            return "posix:permissions";
        }

        @Override
        public Set<PosixFilePermission> value() {
            return Collections.unmodifiableSet(value);
        }
    };
}