/**
 * Creates a new directory in the default temporary-file directory, using
 * the given prefix to generate its name. The resulting {@code Path} is
 * associated with the default {@code FileSystem}.
 *
 * <p> This method works in exactly the manner specified by {@link
 * #createTempDirectory(Path,String,FileAttribute[])} method for the case
 * that the {@code dir} parameter is the temporary-file directory.
 *
 * @param   prefix
 *          the prefix string to be used in generating the directory's name;
 *          may be {@code null}
 * @param   attrs
 *          an optional list of file attributes to set atomically when
 *          creating the directory
 *
 * @return  the path to the newly created directory that did not exist before
 *          this method was invoked
 *
 * @throws  IllegalArgumentException
 *          if the prefix cannot be used to generate a candidate directory name
 * @throws  UnsupportedOperationException
 *          if the array contains an attribute that cannot be set atomically
 *          when creating the directory
 * @throws  IOException
 *          if an I/O error occurs or the temporary-file directory does not
 *          exist
 * @throws  SecurityException
 *          In the case of the default provider, and a security manager is
 *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}
 *          method is invoked to check write access when creating the
 *          directory.
 */
public static Path createTempDirectory(String prefix, FileAttribute<?>... attrs) throws IOException {
    return TempFileHelper.createTempDirectory(null, prefix, attrs);
}