/**
 * Returns the {@link FileStore} representing the file store where a file
 * is located.
 *
 * <p> Once a reference to the {@code FileStore} is obtained it is
 * implementation specific if operations on the returned {@code FileStore},
 * or {@link FileStoreAttributeView} objects obtained from it, continue
 * to depend on the existence of the file. In particular the behavior is not
 * defined for the case that the file is deleted or moved to a different
 * file store.
 *
 * @param   path
 *          the path to the file
 *
 * @return  the file store where the file is stored
 *
 * @throws  IOException
 *          if an I/O error occurs
 * @throws  SecurityException
 *          In the case of the default provider, and a security manager is
 *          installed, the {@link SecurityManager#checkRead(String) checkRead}
 *          method is invoked to check read access to the file, and in
 *          addition it checks {@link RuntimePermission}<tt>
 *          ("getFileStoreAttributes")</tt>
 */
public static FileStore getFileStore(Path path) throws IOException {
    return provider(path).getFileStore(path);
}