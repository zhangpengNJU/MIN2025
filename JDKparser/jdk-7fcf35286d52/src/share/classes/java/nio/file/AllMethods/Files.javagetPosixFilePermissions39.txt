/**
 * Returns a file's POSIX file permissions.
 *
 * <p> The {@code path} parameter is associated with a {@code FileSystem}
 * that supports the {@link PosixFileAttributeView}. This attribute view
 * provides access to file attributes commonly associated with files on file
 * systems used by operating systems that implement the Portable Operating
 * System Interface (POSIX) family of standards.
 *
 * <p> The {@code options} array may be used to indicate how symbolic links
 * are handled for the case that the file is a symbolic link. By default,
 * symbolic links are followed and the file attribute of the final target
 * of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS
 * NOFOLLOW_LINKS} is present then symbolic links are not followed.
 *
 * @param   path
 *          the path to the file
 * @param   options
 *          options indicating how symbolic links are handled
 *
 * @return  the file permissions
 *
 * @throws  UnsupportedOperationException
 *          if the associated file system does not support the {@code
 *          PosixFileAttributeView}
 * @throws  IOException
 *          if an I/O error occurs
 * @throws  SecurityException
 *          In the case of the default provider, a security manager is
 *          installed, and it denies {@link RuntimePermission}<tt>("accessUserInformation")</tt>
 *          or its {@link SecurityManager#checkRead(String) checkRead} method
 *          denies read access to the file.
 */
public static Set<PosixFilePermission> getPosixFilePermissions(Path path, LinkOption... options) throws IOException {
    return readAttributes(path, PosixFileAttributes.class, options).permissions();
}