/**
 * Returns a list of the installed file system providers.
 *
 * <p> The first invocation of this method causes the default provider to be
 * initialized (if not already initialized) and loads any other installed
 * providers as described by the {@link FileSystems} class.
 *
 * @return  An unmodifiable list of the installed file system providers. The
 *          list contains at least one element, that is the default file
 *          system provider
 *
 * @throws  ServiceConfigurationError
 *          When an error occurs while loading a service provider
 */
public static List<FileSystemProvider> installedProviders() {
    if (installedProviders == null) {
        // ensure default provider is initialized
        FileSystemProvider defaultProvider = FileSystems.getDefault().provider();
        synchronized (lock) {
            if (installedProviders == null) {
                if (loadingProviders) {
                    throw new Error("Circular loading of installed providers detected");
                }
                loadingProviders = true;
                List<FileSystemProvider> list = AccessController.doPrivileged(new PrivilegedAction<List<FileSystemProvider>>() {

                    @Override
                    public List<FileSystemProvider> run() {
                        return loadInstalledProviders();
                    }
                });
                // insert the default provider at the start of the list
                list.add(0, defaultProvider);
                installedProviders = Collections.unmodifiableList(list);
            }
        }
    }
    return installedProviders;
}