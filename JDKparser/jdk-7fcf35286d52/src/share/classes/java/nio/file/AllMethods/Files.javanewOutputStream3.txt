/**
 * Opens or creates a file, returning an output stream that may be used to
 * write bytes to the file. The resulting stream will not be buffered. The
 * stream will be safe for access by multiple concurrent threads. Whether
 * the returned stream is <i>asynchronously closeable</i> and/or
 * <i>interruptible</i> is highly file system provider specific and
 * therefore not specified.
 *
 * <p> This method opens or creates a file in exactly the manner specified
 * by the {@link #newByteChannel(Path,Set,FileAttribute[]) newByteChannel}
 * method with the exception that the {@link StandardOpenOption#READ READ}
 * option may not be present in the array of options. If no options are
 * present then this method works as if the {@link StandardOpenOption#CREATE
 * CREATE}, {@link StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING},
 * and {@link StandardOpenOption#WRITE WRITE} options are present. In other
 * words, it opens the file for writing, creating the file if it doesn't
 * exist, or initially truncating an existing {@link #isRegularFile
 * regular-file} to a size of {@code 0} if it exists.
 *
 * <p> <b>Usage Examples:</b>
 * <pre>
 *     Path path = ...
 *
 *     // truncate and overwrite an existing file, or create the file if
 *     // it doesn't initially exist
 *     OutputStream out = Files.newOutputStream(path);
 *
 *     // append to an existing file, fail if the file does not exist
 *     out = Files.newOutputStream(path, APPEND);
 *
 *     // append to an existing file, create file if it doesn't initially exist
 *     out = Files.newOutputStream(path, CREATE, APPEND);
 *
 *     // always create new file, failing if it already exists
 *     out = Files.newOutputStream(path, CREATE_NEW);
 * </pre>
 *
 * @param   path
 *          the path to the file to open or create
 * @param   options
 *          options specifying how the file is opened
 *
 * @return  a new output stream
 *
 * @throws  IllegalArgumentException
 *          if {@code options} contains an invalid combination of options
 * @throws  UnsupportedOperationException
 *          if an unsupported option is specified
 * @throws  IOException
 *          if an I/O error occurs
 * @throws  SecurityException
 *          In the case of the default provider, and a security manager is
 *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}
 *          method is invoked to check write access to the file. The {@link
 *          SecurityManager#checkDelete(String) checkDelete} method is
 *          invoked to check delete access if the file is opened with the
 *          {@code DELETE_ON_CLOSE} option.
 */
public static OutputStream newOutputStream(Path path, OpenOption... options) throws IOException {
    return provider(path).newOutputStream(path, options);
}