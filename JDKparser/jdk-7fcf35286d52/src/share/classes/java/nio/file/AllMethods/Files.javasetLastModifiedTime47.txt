/**
 * Updates a file's last modified time attribute. The file time is converted
 * to the epoch and precision supported by the file system. Converting from
 * finer to coarser granularities result in precision loss. The behavior of
 * this method when attempting to set the last modified time when it is not
 * supported by the file system or is outside the range supported by the
 * underlying file store is not defined. It may or not fail by throwing an
 * {@code IOException}.
 *
 * <p> <b>Usage Example:</b>
 * Suppose we want to set the last modified time to the current time:
 * <pre>
 *    Path path = ...
 *    FileTime now = FileTime.fromMillis(System.currentTimeMillis());
 *    Files.setLastModifiedTime(path, now);
 * </pre>
 *
 * @param   path
 *          the path to the file
 * @param   time
 *          the new last modified time
 *
 * @return  the path
 *
 * @throws  IOException
 *          if an I/O error occurs
 * @throws  SecurityException
 *          In the case of the default provider, the security manager's {@link
 *          SecurityManager#checkWrite(String) checkWrite} method is invoked
 *          to check write access to file
 *
 * @see BasicFileAttributeView#setTimes
 */
public static Path setLastModifiedTime(Path path, FileTime time) throws IOException {
    getFileAttributeView(path, BasicFileAttributeView.class).setTimes(time, null, null);
    return path;
}