/**
 * Creates a new empty file in the specified directory, using the given
 * prefix and suffix strings to generate its name. The resulting
 * {@code Path} is associated with the same {@code FileSystem} as the given
 * directory.
 *
 * <p> The details as to how the name of the file is constructed is
 * implementation dependent and therefore not specified. Where possible
 * the {@code prefix} and {@code suffix} are used to construct candidate
 * names in the same manner as the {@link
 * java.io.File#createTempFile(String,String,File)} method.
 *
 * <p> As with the {@code File.createTempFile} methods, this method is only
 * part of a temporary-file facility. Where used as a <em>work files</em>,
 * the resulting file may be opened using the {@link
 * StandardOpenOption#DELETE_ON_CLOSE DELETE_ON_CLOSE} option so that the
 * file is deleted when the appropriate {@code close} method is invoked.
 * Alternatively, a {@link Runtime#addShutdownHook shutdown-hook}, or the
 * {@link java.io.File#deleteOnExit} mechanism may be used to delete the
 * file automatically.
 *
 * <p> The {@code attrs} parameter is optional {@link FileAttribute
 * file-attributes} to set atomically when creating the file. Each attribute
 * is identified by its {@link FileAttribute#name name}. If more than one
 * attribute of the same name is included in the array then all but the last
 * occurrence is ignored. When no file attributes are specified, then the
 * resulting file may have more restrictive access permissions to files
 * created by the {@link java.io.File#createTempFile(String,String,File)}
 * method.
 *
 * @param   dir
 *          the path to directory in which to create the file
 * @param   prefix
 *          the prefix string to be used in generating the file's name;
 *          may be {@code null}
 * @param   suffix
 *          the suffix string to be used in generating the file's name;
 *          may be {@code null}, in which case "{@code .tmp}" is used
 * @param   attrs
 *          an optional list of file attributes to set atomically when
 *          creating the file
 *
 * @return  the path to the newly created file that did not exist before
 *          this method was invoked
 *
 * @throws  IllegalArgumentException
 *          if the prefix or suffix parameters cannot be used to generate
 *          a candidate file name
 * @throws  UnsupportedOperationException
 *          if the array contains an attribute that cannot be set atomically
 *          when creating the directory
 * @throws  IOException
 *          if an I/O error occurs or {@code dir} does not exist
 * @throws  SecurityException
 *          In the case of the default provider, and a security manager is
 *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}
 *          method is invoked to check write access to the file.
 */
public static Path createTempFile(Path dir, String prefix, String suffix, FileAttribute<?>... attrs) throws IOException {
    return TempFileHelper.createTempFile(Objects.requireNonNull(dir), prefix, suffix, attrs);
}