/**
 * Converts the given URI to a {@link Path} object.
 *
 * <p> This method iterates over the {@link FileSystemProvider#installedProviders()
 * installed} providers to locate the provider that is identified by the
 * URI {@link URI#getScheme scheme} of the given URI. URI schemes are
 * compared without regard to case. If the provider is found then its {@link
 * FileSystemProvider#getPath getPath} method is invoked to convert the
 * URI.
 *
 * <p> In the case of the default provider, identified by the URI scheme
 * "file", the given URI has a non-empty path component, and undefined query
 * and fragment components. Whether the authority component may be present
 * is platform specific. The returned {@code Path} is associated with the
 * {@link FileSystems#getDefault default} file system.
 *
 * <p> The default provider provides a similar <em>round-trip</em> guarantee
 * to the {@link java.io.File} class. For a given {@code Path} <i>p</i> it
 * is guaranteed that
 * <blockquote><tt>
 * Paths.get(</tt><i>p</i><tt>.{@link Path#toUri() toUri}()).equals(</tt>
 * <i>p</i><tt>.{@link Path#toAbsolutePath() toAbsolutePath}())</tt>
 * </blockquote>
 * so long as the original {@code Path}, the {@code URI}, and the new {@code
 * Path} are all created in (possibly different invocations of) the same
 * Java virtual machine. Whether other providers make any guarantees is
 * provider specific and therefore unspecified.
 *
 * @param   uri
 *          the URI to convert
 *
 * @return  the resulting {@code Path}
 *
 * @throws  IllegalArgumentException
 *          if preconditions on the {@code uri} parameter do not hold. The
 *          format of the URI is provider specific.
 * @throws  FileSystemNotFoundException
 *          The file system, identified by the URI, does not exist and
 *          cannot be created automatically, or the provider identified by
 *          the URI's scheme component is not installed
 * @throws  SecurityException
 *          if a security manager is installed and it denies an unspecified
 *          permission to access the file system
 */
public static Path get(URI uri) {
    String scheme = uri.getScheme();
    if (scheme == null)
        throw new IllegalArgumentException("Missing scheme");
    // check for default provider to avoid loading of installed providers
    if (scheme.equalsIgnoreCase("file"))
        return FileSystems.getDefault().provider().getPath(uri);
    // try to find provider
    for (FileSystemProvider provider : FileSystemProvider.installedProviders()) {
        if (provider.getScheme().equalsIgnoreCase(scheme)) {
            return provider.getPath(uri);
        }
    }
    throw new FileSystemNotFoundException("Provider \"" + scheme + "\" not installed");
}