/**
 * Returns a file's last modified time.
 *
 * <p> The {@code options} array may be used to indicate how symbolic links
 * are handled for the case that the file is a symbolic link. By default,
 * symbolic links are followed and the file attribute of the final target
 * of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS
 * NOFOLLOW_LINKS} is present then symbolic links are not followed.
 *
 * @param   path
 *          the path to the file
 * @param   options
 *          options indicating how symbolic links are handled
 *
 * @return  a {@code FileTime} representing the time the file was last
 *          modified, or an implementation specific default when a time
 *          stamp to indicate the time of last modification is not supported
 *          by the file system
 *
 * @throws  IOException
 *          if an I/O error occurs
 * @throws  SecurityException
 *          In the case of the default provider, and a security manager is
 *          installed, its {@link SecurityManager#checkRead(String) checkRead}
 *          method denies read access to the file.
 *
 * @see BasicFileAttributes#lastModifiedTime
 */
public static FileTime getLastModifiedTime(Path path, LinkOption... options) throws IOException {
    return readAttributes(path, BasicFileAttributes.class, options).lastModifiedTime();
}