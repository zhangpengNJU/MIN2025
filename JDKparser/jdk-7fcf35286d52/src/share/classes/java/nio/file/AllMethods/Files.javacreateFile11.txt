// -- Creation and deletion --
/**
 * Creates a new and empty file, failing if the file already exists. The
 * check for the existence of the file and the creation of the new file if
 * it does not exist are a single operation that is atomic with respect to
 * all other filesystem activities that might affect the directory.
 *
 * <p> The {@code attrs} parameter is optional {@link FileAttribute
 * file-attributes} to set atomically when creating the file. Each attribute
 * is identified by its {@link FileAttribute#name name}. If more than one
 * attribute of the same name is included in the array then all but the last
 * occurrence is ignored.
 *
 * @param   path
 *          the path to the file to create
 * @param   attrs
 *          an optional list of file attributes to set atomically when
 *          creating the file
 *
 * @return  the file
 *
 * @throws  UnsupportedOperationException
 *          if the array contains an attribute that cannot be set atomically
 *          when creating the file
 * @throws  FileAlreadyExistsException
 *          if a file of that name already exists
 *          <i>(optional specific exception)</i>
 * @throws  IOException
 *          if an I/O error occurs or the parent directory does not exist
 * @throws  SecurityException
 *          In the case of the default provider, and a security manager is
 *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}
 *          method is invoked to check write access to the new file.
 */
public static Path createFile(Path path, FileAttribute<?>... attrs) throws IOException {
    EnumSet<StandardOpenOption> options = EnumSet.<StandardOpenOption>of(StandardOpenOption.CREATE_NEW, StandardOpenOption.WRITE);
    newByteChannel(path, options, attrs).close();
    return path;
}