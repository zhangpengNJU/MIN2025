/**
 * Opens or creates a file for reading and/or writing, returning a file
 * channel to access the file. This method works in exactly the manner
 * specified by the {@link FileChannel#open(Path,Set,FileAttribute[])
 * FileChannel.open} method. A provider that does not support all the
 * features required to construct a file channel throws {@code
 * UnsupportedOperationException}. The default provider is required to
 * support the creation of file channels. When not overridden, the default
 * implementation throws {@code UnsupportedOperationException}.
 *
 * @param   path
 *          the path of the file to open or create
 * @param   options
 *          options specifying how the file is opened
 * @param   attrs
 *          an optional list of file attributes to set atomically when
 *          creating the file
 *
 * @return  a new file channel
 *
 * @throws  IllegalArgumentException
 *          If the set contains an invalid combination of options
 * @throws  UnsupportedOperationException
 *          If this provider that does not support creating file channels,
 *          or an unsupported open option or file attribute is specified
 * @throws  IOException
 *          If an I/O error occurs
 * @throws  SecurityException
 *          In the case of the default file system, the {@link
 *          SecurityManager#checkRead(String)} method is invoked to check
 *          read access if the file is opened for reading. The {@link
 *          SecurityManager#checkWrite(String)} method is invoked to check
 *          write access if the file is opened for writing
 */
public FileChannel newFileChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException {
    throw new UnsupportedOperationException();
}