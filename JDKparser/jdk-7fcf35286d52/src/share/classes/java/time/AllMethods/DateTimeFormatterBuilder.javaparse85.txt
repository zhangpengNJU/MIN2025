@Override
public int parse(DateTimeParseContext context, CharSequence text, int position) {
    int effectiveMin = (context.isStrict() ? minWidth : 0);
    int effectiveMax = (context.isStrict() ? maxWidth : 9);
    int length = text.length();
    if (position == length) {
        // valid if whole field is optional, invalid if minimum width
        return (effectiveMin > 0 ? ~position : position);
    }
    if (decimalPoint) {
        if (text.charAt(position) != context.getDecimalStyle().getDecimalSeparator()) {
            // valid if whole field is optional, invalid if minimum width
            return (effectiveMin > 0 ? ~position : position);
        }
        position++;
    }
    int minEndPos = position + effectiveMin;
    if (minEndPos > length) {
        // need at least min width digits
        return ~position;
    }
    int maxEndPos = Math.min(position + effectiveMax, length);
    // can use int because we are only parsing up to 9 digits
    int total = 0;
    int pos = position;
    while (pos < maxEndPos) {
        char ch = text.charAt(pos++);
        int digit = context.getDecimalStyle().convertToDigit(ch);
        if (digit < 0) {
            if (pos < minEndPos) {
                // need at least min width digits
                return ~position;
            }
            pos--;
            break;
        }
        total = total * 10 + digit;
    }
    BigDecimal fraction = new BigDecimal(total).movePointLeft(pos - position);
    long value = convertFromFraction(fraction);
    return context.setParsedField(field, value, position, pos);
}