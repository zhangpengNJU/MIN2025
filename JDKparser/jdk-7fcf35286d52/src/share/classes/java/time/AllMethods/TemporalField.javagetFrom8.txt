/**
 * Gets the value of this field from the specified temporal object.
 * <p>
 * This queries the temporal object for the value of this field.
 * <p>
 * There are two equivalent ways of using this method.
 * The first is to invoke this method directly.
 * The second is to use {@link TemporalAccessor#getLong(TemporalField)}
 * (or {@link TemporalAccessor#get(TemporalField)}):
 * <pre>
 *   // these two lines are equivalent, but the second approach is recommended
 *   temporal = thisField.getFrom(temporal);
 *   temporal = temporal.getLong(thisField);
 * </pre>
 * It is recommended to use the second approach, {@code getLong(TemporalField)},
 * as it is a lot clearer to read in code.
 * <p>
 * Implementations should perform any queries or calculations using the fields
 * available in {@link ChronoField}.
 * If the field is not supported an {@code UnsupportedTemporalTypeException} must be thrown.
 *
 * @param temporal  the temporal object to query, not null
 * @return the value of this field, not null
 * @throws DateTimeException if a value for the field cannot be obtained
 * @throws UnsupportedTemporalTypeException if the field is not supported by the temporal
 * @throws ArithmeticException if numeric overflow occurs
 */
long getFrom(TemporalAccessor temporal);