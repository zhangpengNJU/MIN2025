// -----------------------------------------------------------------------
/**
 * Gets the textual representation of this chronology.
 * <p>
 * This returns the textual name used to identify the chronology,
 * suitable for presentation to the user.
 * The parameters control the style of the returned text and the locale.
 *
 * @implSpec
 * The default implementation behaves as though the formatter was used to
 * format the chronology textual name.
 *
 * @param style  the style of the text required, not null
 * @param locale  the locale to use, not null
 * @return the text value of the chronology, not null
 */
default String getDisplayName(TextStyle style, Locale locale) {
    TemporalAccessor temporal = new TemporalAccessor() {

        @Override
        public boolean isSupported(TemporalField field) {
            return false;
        }

        @Override
        public long getLong(TemporalField field) {
            throw new UnsupportedTemporalTypeException("Unsupported field: " + field);
        }

        @SuppressWarnings("unchecked")
        @Override
        public <R> R query(TemporalQuery<R> query) {
            if (query == TemporalQueries.chronology()) {
                return (R) Chronology.this;
            }
            return TemporalAccessor.super.query(query);
        }
    };
    return new DateTimeFormatterBuilder().appendChronologyText(style).toFormatter(locale).format(temporal);
}