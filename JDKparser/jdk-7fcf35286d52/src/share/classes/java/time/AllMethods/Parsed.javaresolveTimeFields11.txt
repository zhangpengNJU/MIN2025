// -----------------------------------------------------------------------
private void resolveTimeFields() {
    // simplify fields
    if (fieldValues.containsKey(CLOCK_HOUR_OF_DAY)) {
        // lenient allows anything, smart allows 0-24, strict allows 1-24
        long ch = fieldValues.remove(CLOCK_HOUR_OF_DAY);
        if (resolverStyle == ResolverStyle.STRICT || (resolverStyle == ResolverStyle.SMART && ch != 0)) {
            CLOCK_HOUR_OF_DAY.checkValidValue(ch);
        }
        updateCheckConflict(CLOCK_HOUR_OF_DAY, HOUR_OF_DAY, ch == 24 ? 0 : ch);
    }
    if (fieldValues.containsKey(CLOCK_HOUR_OF_AMPM)) {
        // lenient allows anything, smart allows 0-12, strict allows 1-12
        long ch = fieldValues.remove(CLOCK_HOUR_OF_AMPM);
        if (resolverStyle == ResolverStyle.STRICT || (resolverStyle == ResolverStyle.SMART && ch != 0)) {
            CLOCK_HOUR_OF_AMPM.checkValidValue(ch);
        }
        updateCheckConflict(CLOCK_HOUR_OF_AMPM, HOUR_OF_AMPM, ch == 12 ? 0 : ch);
    }
    if (fieldValues.containsKey(AMPM_OF_DAY) && fieldValues.containsKey(HOUR_OF_AMPM)) {
        long ap = fieldValues.remove(AMPM_OF_DAY);
        long hap = fieldValues.remove(HOUR_OF_AMPM);
        if (resolverStyle == ResolverStyle.LENIENT) {
            updateCheckConflict(AMPM_OF_DAY, HOUR_OF_DAY, Math.addExact(Math.multiplyExact(ap, 12), hap));
        } else {
            // STRICT or SMART
            AMPM_OF_DAY.checkValidValue(ap);
            HOUR_OF_AMPM.checkValidValue(ap);
            updateCheckConflict(AMPM_OF_DAY, HOUR_OF_DAY, ap * 12 + hap);
        }
    }
    if (fieldValues.containsKey(NANO_OF_DAY)) {
        long nod = fieldValues.remove(NANO_OF_DAY);
        if (resolverStyle != ResolverStyle.LENIENT) {
            NANO_OF_DAY.checkValidValue(nod);
        }
        updateCheckConflict(NANO_OF_DAY, HOUR_OF_DAY, nod / 3600_000_000_000L);
        updateCheckConflict(NANO_OF_DAY, MINUTE_OF_HOUR, (nod / 60_000_000_000L) % 60);
        updateCheckConflict(NANO_OF_DAY, SECOND_OF_MINUTE, (nod / 1_000_000_000L) % 60);
        updateCheckConflict(NANO_OF_DAY, NANO_OF_SECOND, nod % 1_000_000_000L);
    }
    if (fieldValues.containsKey(MICRO_OF_DAY)) {
        long cod = fieldValues.remove(MICRO_OF_DAY);
        if (resolverStyle != ResolverStyle.LENIENT) {
            MICRO_OF_DAY.checkValidValue(cod);
        }
        updateCheckConflict(MICRO_OF_DAY, SECOND_OF_DAY, cod / 1_000_000L);
        updateCheckConflict(MICRO_OF_DAY, MICRO_OF_SECOND, cod % 1_000_000L);
    }
    if (fieldValues.containsKey(MILLI_OF_DAY)) {
        long lod = fieldValues.remove(MILLI_OF_DAY);
        if (resolverStyle != ResolverStyle.LENIENT) {
            MILLI_OF_DAY.checkValidValue(lod);
        }
        updateCheckConflict(MILLI_OF_DAY, SECOND_OF_DAY, lod / 1_000);
        updateCheckConflict(MILLI_OF_DAY, MILLI_OF_SECOND, lod % 1_000);
    }
    if (fieldValues.containsKey(SECOND_OF_DAY)) {
        long sod = fieldValues.remove(SECOND_OF_DAY);
        if (resolverStyle != ResolverStyle.LENIENT) {
            SECOND_OF_DAY.checkValidValue(sod);
        }
        updateCheckConflict(SECOND_OF_DAY, HOUR_OF_DAY, sod / 3600);
        updateCheckConflict(SECOND_OF_DAY, MINUTE_OF_HOUR, (sod / 60) % 60);
        updateCheckConflict(SECOND_OF_DAY, SECOND_OF_MINUTE, sod % 60);
    }
    if (fieldValues.containsKey(MINUTE_OF_DAY)) {
        long mod = fieldValues.remove(MINUTE_OF_DAY);
        if (resolverStyle != ResolverStyle.LENIENT) {
            MINUTE_OF_DAY.checkValidValue(mod);
        }
        updateCheckConflict(MINUTE_OF_DAY, HOUR_OF_DAY, mod / 60);
        updateCheckConflict(MINUTE_OF_DAY, MINUTE_OF_HOUR, mod % 60);
    }
    // combine partial second fields strictly, leaving lenient expansion to later
    if (fieldValues.containsKey(NANO_OF_SECOND)) {
        long nos = fieldValues.get(NANO_OF_SECOND);
        if (resolverStyle != ResolverStyle.LENIENT) {
            NANO_OF_SECOND.checkValidValue(nos);
        }
        if (fieldValues.containsKey(MICRO_OF_SECOND)) {
            long cos = fieldValues.remove(MICRO_OF_SECOND);
            if (resolverStyle != ResolverStyle.LENIENT) {
                MICRO_OF_SECOND.checkValidValue(cos);
            }
            nos = cos * 1000 + (nos % 1000);
            updateCheckConflict(MICRO_OF_SECOND, NANO_OF_SECOND, nos);
        }
        if (fieldValues.containsKey(MILLI_OF_SECOND)) {
            long los = fieldValues.remove(MILLI_OF_SECOND);
            if (resolverStyle != ResolverStyle.LENIENT) {
                MILLI_OF_SECOND.checkValidValue(los);
            }
            updateCheckConflict(MILLI_OF_SECOND, NANO_OF_SECOND, los * 1_000_000L + (nos % 1_000_000L));
        }
    }
    // convert to time if all four fields available (optimization)
    if (fieldValues.containsKey(HOUR_OF_DAY) && fieldValues.containsKey(MINUTE_OF_HOUR) && fieldValues.containsKey(SECOND_OF_MINUTE) && fieldValues.containsKey(NANO_OF_SECOND)) {
        long hod = fieldValues.remove(HOUR_OF_DAY);
        long moh = fieldValues.remove(MINUTE_OF_HOUR);
        long som = fieldValues.remove(SECOND_OF_MINUTE);
        long nos = fieldValues.remove(NANO_OF_SECOND);
        resolveTime(hod, moh, som, nos);
    }
}