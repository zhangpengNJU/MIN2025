/**
 * Obtains an instance of {@code MonthDay}.
 * <p>
 * The day-of-month must be valid for the month within a leap year.
 * Hence, for month 2 (February), day 29 is valid.
 * <p>
 * For example, passing in month 4 (April) and day 31 will throw an exception, as
 * there can never be April 31st in any year. By contrast, passing in
 * February 29th is permitted, as that month-day can sometimes be valid.
 *
 * @param month  the month-of-year to represent, from 1 (January) to 12 (December)
 * @param dayOfMonth  the day-of-month to represent, from 1 to 31
 * @return the month-day, not null
 * @throws DateTimeException if the value of any field is out of range,
 *  or if the day-of-month is invalid for the month
 */
public static MonthDay of(int month, int dayOfMonth) {
    return of(Month.of(month), dayOfMonth);
}