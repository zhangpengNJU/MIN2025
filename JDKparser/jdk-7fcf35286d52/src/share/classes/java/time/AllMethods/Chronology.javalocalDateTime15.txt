/**
 * Obtains a local date-time in this chronology from another temporal object.
 * <p>
 * This obtains a date-time in this chronology based on the specified temporal.
 * A {@code TemporalAccessor} represents an arbitrary set of date and time information,
 * which this factory converts to an instance of {@code ChronoLocalDateTime}.
 * <p>
 * The conversion extracts and combines the {@code ChronoLocalDate} and the
 * {@code LocalTime} from the temporal object.
 * Implementations are permitted to perform optimizations such as accessing
 * those fields that are equivalent to the relevant objects.
 * The result uses this chronology.
 * <p>
 * This method matches the signature of the functional interface {@link TemporalQuery}
 * allowing it to be used as a query via method reference, {@code aChronology::localDateTime}.
 *
 * @param temporal  the temporal object to convert, not null
 * @return the local date-time in this chronology, not null
 * @throws DateTimeException if unable to create the date-time
 * @see ChronoLocalDateTime#from(TemporalAccessor)
 */
default ChronoLocalDateTime<? extends ChronoLocalDate> localDateTime(TemporalAccessor temporal) {
    try {
        return date(temporal).atTime(LocalTime.from(temporal));
    } catch (DateTimeException ex) {
        throw new DateTimeException("Unable to obtain ChronoLocalDateTime from TemporalAccessor: " + temporal.getClass(), ex);
    }
}