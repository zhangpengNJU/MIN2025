// -----------------------------------------------------------------------
/**
 * Obtains an instance of {@code DayOfWeek} from a temporal object.
 * <p>
 * This obtains a day-of-week based on the specified temporal.
 * A {@code TemporalAccessor} represents an arbitrary set of date and time information,
 * which this factory converts to an instance of {@code DayOfWeek}.
 * <p>
 * The conversion extracts the {@link ChronoField#DAY_OF_WEEK DAY_OF_WEEK} field.
 * <p>
 * This method matches the signature of the functional interface {@link TemporalQuery}
 * allowing it to be used as a query via method reference, {@code DayOfWeek::from}.
 *
 * @param temporal  the temporal object to convert, not null
 * @return the day-of-week, not null
 * @throws DateTimeException if unable to convert to a {@code DayOfWeek}
 */
public static DayOfWeek from(TemporalAccessor temporal) {
    if (temporal instanceof DayOfWeek) {
        return (DayOfWeek) temporal;
    }
    try {
        return of(temporal.get(DAY_OF_WEEK));
    } catch (DateTimeException ex) {
        throw new DateTimeException("Unable to obtain DayOfWeek from TemporalAccessor: " + temporal + " of type " + temporal.getClass().getName(), ex);
    }
}