@Override
public boolean format(DateTimePrintContext context, StringBuilder buf) {
    // use INSTANT_SECONDS, thus this code is not bound by Instant.MAX
    Long inSecs = context.getValue(INSTANT_SECONDS);
    Long inNanos = null;
    if (context.getTemporal().isSupported(NANO_OF_SECOND)) {
        inNanos = context.getTemporal().getLong(NANO_OF_SECOND);
    }
    if (inSecs == null) {
        return false;
    }
    long inSec = inSecs;
    int inNano = NANO_OF_SECOND.checkValidIntValue(inNanos != null ? inNanos : 0);
    // format mostly using LocalDateTime.toString
    if (inSec >= -SECONDS_0000_TO_1970) {
        // current era
        long zeroSecs = inSec - SECONDS_PER_10000_YEARS + SECONDS_0000_TO_1970;
        long hi = Math.floorDiv(zeroSecs, SECONDS_PER_10000_YEARS) + 1;
        long lo = Math.floorMod(zeroSecs, SECONDS_PER_10000_YEARS);
        LocalDateTime ldt = LocalDateTime.ofEpochSecond(lo - SECONDS_0000_TO_1970, 0, ZoneOffset.UTC);
        if (hi > 0) {
            buf.append('+').append(hi);
        }
        buf.append(ldt);
        if (ldt.getSecond() == 0) {
            buf.append(":00");
        }
    } else {
        // before current era
        long zeroSecs = inSec + SECONDS_0000_TO_1970;
        long hi = zeroSecs / SECONDS_PER_10000_YEARS;
        long lo = zeroSecs % SECONDS_PER_10000_YEARS;
        LocalDateTime ldt = LocalDateTime.ofEpochSecond(lo - SECONDS_0000_TO_1970, 0, ZoneOffset.UTC);
        int pos = buf.length();
        buf.append(ldt);
        if (ldt.getSecond() == 0) {
            buf.append(":00");
        }
        if (hi < 0) {
            if (ldt.getYear() == -10_000) {
                buf.replace(pos, pos + 2, Long.toString(hi - 1));
            } else if (lo == 0) {
                buf.insert(pos, hi);
            } else {
                buf.insert(pos + 1, Math.abs(hi));
            }
        }
    }
    // add fraction
    if ((fractionalDigits < 0 && inNano > 0) || fractionalDigits > 0) {
        buf.append('.');
        int div = 100_000_000;
        for (int i = 0; ((fractionalDigits == -1 && inNano > 0) || (fractionalDigits == -2 && (inNano > 0 || (i % 3) != 0)) || i < fractionalDigits); i++) {
            int digit = inNano / div;
            buf.append((char) (digit + '0'));
            inNano = inNano - (digit * div);
            div = div / 10;
        }
    }
    buf.append('Z');
    return true;
}