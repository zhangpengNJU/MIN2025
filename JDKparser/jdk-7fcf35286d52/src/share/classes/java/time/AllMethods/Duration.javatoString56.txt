// -----------------------------------------------------------------------
/**
 * A string representation of this duration using ISO-8601 seconds
 * based representation, such as {@code PT8H6M12.345S}.
 * <p>
 * The format of the returned string will be {@code PTnHnMnS}, where n is
 * the relevant hours, minutes or seconds part of the duration.
 * Any fractional seconds are placed after a decimal point i the seconds section.
 * If a section has a zero value, it is omitted.
 * The hours, minutes and seconds will all have the same sign.
 * <p>
 * Examples:
 * <pre>
 *    "20.345 seconds"                 -- "PT20.345S
 *    "15 minutes" (15 * 60 seconds)   -- "PT15M"
 *    "10 hours" (10 * 3600 seconds)   -- "PT10H"
 *    "2 days" (2 * 86400 seconds)     -- "PT48H"
 * </pre>
 * Note that multiples of 24 hours are not output as days to avoid confusion
 * with {@code Period}.
 *
 * @return an ISO-8601 representation of this duration, not null
 */
@Override
public String toString() {
    if (this == ZERO) {
        return "PT0S";
    }
    long hours = seconds / SECONDS_PER_HOUR;
    int minutes = (int) ((seconds % SECONDS_PER_HOUR) / SECONDS_PER_MINUTE);
    int secs = (int) (seconds % SECONDS_PER_MINUTE);
    StringBuilder buf = new StringBuilder(24);
    buf.append("PT");
    if (hours != 0) {
        buf.append(hours).append('H');
    }
    if (minutes != 0) {
        buf.append(minutes).append('M');
    }
    if (secs == 0 && nanos == 0 && buf.length() > 2) {
        return buf.toString();
    }
    if (secs < 0 && nanos > 0) {
        if (secs == -1) {
            buf.append("-0");
        } else {
            buf.append(secs + 1);
        }
    } else {
        buf.append(secs);
    }
    if (nanos > 0) {
        int pos = buf.length();
        if (secs < 0) {
            buf.append(2 * NANOS_PER_SECOND - nanos);
        } else {
            buf.append(nanos + NANOS_PER_SECOND);
        }
        while (buf.charAt(buf.length() - 1) == '0') {
            buf.setLength(buf.length() - 1);
        }
        buf.setCharAt(pos, '.');
    }
    buf.append('S');
    return buf.toString();
}