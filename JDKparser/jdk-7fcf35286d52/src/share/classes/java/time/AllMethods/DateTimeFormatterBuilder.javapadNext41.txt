// -----------------------------------------------------------------------
/**
 * Causes the next added printer/parser to pad to a fixed width using a space.
 * <p>
 * This padding will pad to a fixed width using spaces.
 * <p>
 * During formatting, the decorated element will be output and then padded
 * to the specified width. An exception will be thrown during formatting if
 * the pad width is exceeded.
 * <p>
 * During parsing, the padding and decorated element are parsed.
 * If parsing is lenient, then the pad width is treated as a maximum.
 * The padding is parsed greedily. Thus, if the decorated element starts with
 * the pad character, it will not be parsed.
 *
 * @param padWidth  the pad width, 1 or greater
 * @return this, for chaining, not null
 * @throws IllegalArgumentException if pad width is too small
 */
public DateTimeFormatterBuilder padNext(int padWidth) {
    return padNext(padWidth, ' ');
}