/**
 * Checks if this date is before the specified date.
 * <p>
 * This checks to see if this date represents a point on the
 * local time-line before the other date.
 * <pre>
 *   LocalDate a = LocalDate.of(2012, 6, 30);
 *   LocalDate b = LocalDate.of(2012, 7, 1);
 *   a.isBefore(b) == true
 *   a.isBefore(a) == false
 *   b.isBefore(a) == false
 * </pre>
 * <p>
 * This method only considers the position of the two dates on the local time-line.
 * It does not take into account the chronology, or calendar system.
 * This is different from the comparison in {@link #compareTo(ChronoLocalDate)},
 * but is the same approach as {@link ChronoLocalDate#timeLineOrder()}.
 *
 * @param other  the other date to compare to, not null
 * @return true if this date is before the specified date
 */
// override for Javadoc and performance
@Override
public boolean isBefore(ChronoLocalDate other) {
    if (other instanceof LocalDate) {
        return compareTo0((LocalDate) other) < 0;
    }
    return ChronoLocalDate.super.isBefore(other);
}