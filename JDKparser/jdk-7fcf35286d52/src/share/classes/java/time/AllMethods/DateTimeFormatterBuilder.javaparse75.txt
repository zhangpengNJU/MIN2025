@Override
public int parse(DateTimeParseContext context, CharSequence text, int position) {
    int length = text.length();
    if (position == length) {
        return ~position;
    }
    // IOOBE if invalid position
    char sign = text.charAt(position);
    boolean negative = false;
    boolean positive = false;
    if (sign == context.getDecimalStyle().getPositiveSign()) {
        if (signStyle.parse(true, context.isStrict(), minWidth == maxWidth) == false) {
            return ~position;
        }
        positive = true;
        position++;
    } else if (sign == context.getDecimalStyle().getNegativeSign()) {
        if (signStyle.parse(false, context.isStrict(), minWidth == maxWidth) == false) {
            return ~position;
        }
        negative = true;
        position++;
    } else {
        if (signStyle == SignStyle.ALWAYS && context.isStrict()) {
            return ~position;
        }
    }
    int effMinWidth = (context.isStrict() || isFixedWidth(context) ? minWidth : 1);
    int minEndPos = position + effMinWidth;
    if (minEndPos > length) {
        return ~position;
    }
    int effMaxWidth = (context.isStrict() || isFixedWidth(context) ? maxWidth : 9) + Math.max(subsequentWidth, 0);
    long total = 0;
    BigInteger totalBig = null;
    int pos = position;
    for (int pass = 0; pass < 2; pass++) {
        int maxEndPos = Math.min(pos + effMaxWidth, length);
        while (pos < maxEndPos) {
            char ch = text.charAt(pos++);
            int digit = context.getDecimalStyle().convertToDigit(ch);
            if (digit < 0) {
                pos--;
                if (pos < minEndPos) {
                    // need at least min width digits
                    return ~position;
                }
                break;
            }
            if ((pos - position) > 18) {
                if (totalBig == null) {
                    totalBig = BigInteger.valueOf(total);
                }
                totalBig = totalBig.multiply(BigInteger.TEN).add(BigInteger.valueOf(digit));
            } else {
                total = total * 10 + digit;
            }
        }
        if (subsequentWidth > 0 && pass == 0) {
            // re-parse now we know the correct width
            int parseLen = pos - position;
            effMaxWidth = Math.max(effMinWidth, parseLen - subsequentWidth);
            pos = position;
            total = 0;
            totalBig = null;
        } else {
            break;
        }
    }
    if (negative) {
        if (totalBig != null) {
            if (totalBig.equals(BigInteger.ZERO) && context.isStrict()) {
                // minus zero not allowed
                return ~(position - 1);
            }
            totalBig = totalBig.negate();
        } else {
            if (total == 0 && context.isStrict()) {
                // minus zero not allowed
                return ~(position - 1);
            }
            total = -total;
        }
    } else if (signStyle == SignStyle.EXCEEDS_PAD && context.isStrict()) {
        int parseLen = pos - position;
        if (positive) {
            if (parseLen <= minWidth) {
                // '+' only parsed if minWidth exceeded
                return ~(position - 1);
            }
        } else {
            if (parseLen > minWidth) {
                // '+' must be parsed if minWidth exceeded
                return ~position;
            }
        }
    }
    if (totalBig != null) {
        if (totalBig.bitLength() > 63) {
            // overflow, parse 1 less digit
            totalBig = totalBig.divide(BigInteger.TEN);
            pos--;
        }
        return setValue(context, totalBig.longValue(), position, pos);
    }
    return setValue(context, total, position, pos);
}