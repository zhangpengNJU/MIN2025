/**
 * Returns this formatter as a {@code java.text.Format} instance that will
 * parse using the specified query.
 * <p>
 * The returned {@link Format} instance will format any {@link TemporalAccessor}
 * and parses to the type specified.
 * The type must be one that is supported by {@link #parse}.
 * <p>
 * Exceptions will follow the definitions of {@code Format}, see those methods
 * for details about {@code IllegalArgumentException} during formatting and
 * {@code ParseException} or null during parsing.
 * The format does not support attributing of the returned format string.
 *
 * @param parseQuery  the query defining the type to parse to, not null
 * @return this formatter as a classic format instance, not null
 */
public Format toFormat(TemporalQuery<?> parseQuery) {
    Objects.requireNonNull(parseQuery, "parseQuery");
    return new ClassicFormat(this, parseQuery);
}