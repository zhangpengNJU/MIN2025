/**
 * Obtains a {@code ChronoPeriod} consisting of amount of time between two dates.
 * <p>
 * The start date is included, but the end date is not.
 * The period is calculated using {@link ChronoLocalDate#until(ChronoLocalDate)}.
 * As such, the calculation is chronology specific.
 * <p>
 * The chronology of the first date is used.
 * The chronology of the second date is ignored, with the date being converted
 * to the target chronology system before the calculation starts.
 * <p>
 * The result of this method can be a negative period if the end is before the start.
 * In most cases, the positive/negative sign will be the same in each of the supported fields.
 *
 * @param startDateInclusive  the start date, inclusive, specifying the chronology of the calculation, not null
 * @param endDateExclusive  the end date, exclusive, in any chronology, not null
 * @return the period between this date and the end date, not null
 * @see ChronoLocalDate#until(ChronoLocalDate)
 */
public static ChronoPeriod between(ChronoLocalDate startDateInclusive, ChronoLocalDate endDateExclusive) {
    Objects.requireNonNull(startDateInclusive, "startDateInclusive");
    Objects.requireNonNull(endDateExclusive, "endDateExclusive");
    return startDateInclusive.until(endDateExclusive);
}