/**
 * Binds the {@code ServerSocket} to a specific address
 * (IP address and port number).
 * <p>
 * If the address is {@code null}, then the system will pick up
 * an ephemeral port and a valid local address to bind the socket.
 * <P>
 * The {@code backlog} argument is the requested maximum number of
 * pending connections on the socket. Its exact semantics are implementation
 * specific. In particular, an implementation may impose a maximum length
 * or may choose to ignore the parameter altogther. The value provided
 * should be greater than {@code 0}. If it is less than or equal to
 * {@code 0}, then an implementation specific default will be used.
 * @param   endpoint        The IP address and port number to bind to.
 * @param   backlog         requested maximum length of the queue of
 *                          incoming connections.
 * @throws  IOException if the bind operation fails, or if the socket
 *                     is already bound.
 * @throws  SecurityException       if a {@code SecurityManager} is present and
 * its {@code checkListen} method doesn't allow the operation.
 * @throws  IllegalArgumentException if endpoint is a
 *          SocketAddress subclass not supported by this socket
 * @since 1.4
 */
public void bind(SocketAddress endpoint, int backlog) throws IOException {
    if (isClosed())
        throw new SocketException("Socket is closed");
    if (!oldImpl && isBound())
        throw new SocketException("Already bound");
    if (endpoint == null)
        endpoint = new InetSocketAddress(0);
    if (!(endpoint instanceof InetSocketAddress))
        throw new IllegalArgumentException("Unsupported address type");
    InetSocketAddress epoint = (InetSocketAddress) endpoint;
    if (epoint.isUnresolved())
        throw new SocketException("Unresolved address");
    if (backlog < 1)
        backlog = 50;
    try {
        SecurityManager security = System.getSecurityManager();
        if (security != null)
            security.checkListen(epoint.getPort());
        getImpl().bind(epoint.getAddress(), epoint.getPort());
        getImpl().listen(backlog);
        bound = true;
    } catch (SecurityException e) {
        bound = false;
        throw e;
    } catch (IOException e) {
        bound = false;
        throw e;
    }
}