/*
     * Load and instantiate an underlying impl class
     */
static InetAddressImpl loadImpl(String implName) {
    Object impl = null;
    /*
         * Property "impl.prefix" will be prepended to the classname
         * of the implementation object we instantiate, to which we
         * delegate the real work (like native methods).  This
         * property can vary across implementations of the java.
         * classes.  The default is an empty String "".
         */
    String prefix = AccessController.doPrivileged(new GetPropertyAction("impl.prefix", ""));
    try {
        impl = Class.forName("java.net." + prefix + implName).newInstance();
    } catch (ClassNotFoundException e) {
        System.err.println("Class not found: java.net." + prefix + implName + ":\ncheck impl.prefix property " + "in your properties file.");
    } catch (InstantiationException e) {
        System.err.println("Could not instantiate: java.net." + prefix + implName + ":\ncheck impl.prefix property " + "in your properties file.");
    } catch (IllegalAccessException e) {
        System.err.println("Cannot access class: java.net." + prefix + implName + ":\ncheck impl.prefix property " + "in your properties file.");
    }
    if (impl == null) {
        try {
            impl = Class.forName(implName).newInstance();
        } catch (Exception e) {
            throw new Error("System property impl.prefix incorrect");
        }
    }
    return (InetAddressImpl) impl;
}