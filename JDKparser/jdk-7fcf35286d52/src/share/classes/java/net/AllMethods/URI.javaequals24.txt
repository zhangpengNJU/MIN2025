// -- Equality, comparison, hash code, toString, and serialization --
/**
 * Tests this URI for equality with another object.
 *
 * <p> If the given object is not a URI then this method immediately
 * returns {@code false}.
 *
 * <p> For two URIs to be considered equal requires that either both are
 * opaque or both are hierarchical.  Their schemes must either both be
 * undefined or else be equal without regard to case. Their fragments
 * must either both be undefined or else be equal.
 *
 * <p> For two opaque URIs to be considered equal, their scheme-specific
 * parts must be equal.
 *
 * <p> For two hierarchical URIs to be considered equal, their paths must
 * be equal and their queries must either both be undefined or else be
 * equal.  Their authorities must either both be undefined, or both be
 * registry-based, or both be server-based.  If their authorities are
 * defined and are registry-based, then they must be equal.  If their
 * authorities are defined and are server-based, then their hosts must be
 * equal without regard to case, their port numbers must be equal, and
 * their user-information components must be equal.
 *
 * <p> When testing the user-information, path, query, fragment, authority,
 * or scheme-specific parts of two URIs for equality, the raw forms rather
 * than the encoded forms of these components are compared and the
 * hexadecimal digits of escaped octets are compared without regard to
 * case.
 *
 * <p> This method satisfies the general contract of the {@link
 * java.lang.Object#equals(Object) Object.equals} method. </p>
 *
 * @param   ob   The object to which this object is to be compared
 *
 * @return  {@code true} if, and only if, the given object is a URI that
 *          is identical to this URI
 */
public boolean equals(Object ob) {
    if (ob == this)
        return true;
    if (!(ob instanceof URI))
        return false;
    URI that = (URI) ob;
    if (this.isOpaque() != that.isOpaque())
        return false;
    if (!equalIgnoringCase(this.scheme, that.scheme))
        return false;
    if (!equal(this.fragment, that.fragment))
        return false;
    // Opaque
    if (this.isOpaque())
        return equal(this.schemeSpecificPart, that.schemeSpecificPart);
    // Hierarchical
    if (!equal(this.path, that.path))
        return false;
    if (!equal(this.query, that.query))
        return false;
    // Authorities
    if (this.authority == that.authority)
        return true;
    if (this.host != null) {
        // Server-based
        if (!equal(this.userInfo, that.userInfo))
            return false;
        if (!equalIgnoringCase(this.host, that.host))
            return false;
        if (this.port != that.port)
            return false;
    } else if (this.authority != null) {
        // Registry-based
        if (!equal(this.authority, that.authority))
            return false;
    } else if (this.authority != that.authority) {
        return false;
    }
    return true;
}