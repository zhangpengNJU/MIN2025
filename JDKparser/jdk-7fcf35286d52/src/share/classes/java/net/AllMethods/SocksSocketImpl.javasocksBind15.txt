/**
 * Sends the Bind request to the SOCKS proxy. In the SOCKS protocol, bind
 * means "accept incoming connection from", so the SocketAddress is the
 * the one of the host we do accept connection from.
 *
 * @param      saddr   the Socket address of the remote host.
 * @exception  IOException  if an I/O error occurs when binding this socket.
 */
protected synchronized void socksBind(InetSocketAddress saddr) throws IOException {
    if (socket != null) {
        // this is a client socket, not a server socket, don't
        // call the SOCKS proxy for a bind!
        return;
    }
    // Connects to the SOCKS server
    if (server == null) {
        // This is the general case
        // server is not null only when the socket was created with a
        // specified proxy in which case it does bypass the ProxySelector
        ProxySelector sel = java.security.AccessController.doPrivileged(new java.security.PrivilegedAction<ProxySelector>() {

            public ProxySelector run() {
                return ProxySelector.getDefault();
            }
        });
        if (sel == null) {
            /*
                 * No default proxySelector --> direct connection
                 */
            return;
        }
        URI uri;
        // Use getHostString() to avoid reverse lookups
        String host = saddr.getHostString();
        // IPv6 litteral?
        if (saddr.getAddress() instanceof Inet6Address && (!host.startsWith("[")) && (host.indexOf(":") >= 0)) {
            host = "[" + host + "]";
        }
        try {
            uri = new URI("serversocket://" + ParseUtil.encodePath(host) + ":" + saddr.getPort());
        } catch (URISyntaxException e) {
            // This shouldn't happen
            assert false : e;
            uri = null;
        }
        Proxy p = null;
        Exception savedExc = null;
        java.util.Iterator<Proxy> iProxy = null;
        iProxy = sel.select(uri).iterator();
        if (iProxy == null || !(iProxy.hasNext())) {
            return;
        }
        while (iProxy.hasNext()) {
            p = iProxy.next();
            if (p == null || p.type() != Proxy.Type.SOCKS) {
                return;
            }
            if (!(p.address() instanceof InetSocketAddress))
                throw new SocketException("Unknown address type for proxy: " + p);
            // Use getHostString() to avoid reverse lookups
            server = ((InetSocketAddress) p.address()).getHostString();
            serverPort = ((InetSocketAddress) p.address()).getPort();
            if (p instanceof SocksProxy) {
                if (((SocksProxy) p).protocolVersion() == 4) {
                    useV4 = true;
                }
            }
            // Connects to the SOCKS server
            try {
                AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {

                    public Void run() throws Exception {
                        cmdsock = new Socket(new PlainSocketImpl());
                        cmdsock.connect(new InetSocketAddress(server, serverPort));
                        cmdIn = cmdsock.getInputStream();
                        cmdOut = cmdsock.getOutputStream();
                        return null;
                    }
                });
            } catch (Exception e) {
                // Ooops, let's notify the ProxySelector
                sel.connectFailed(uri, p.address(), new SocketException(e.getMessage()));
                server = null;
                serverPort = -1;
                cmdsock = null;
                savedExc = e;
            // Will continue the while loop and try the next proxy
            }
        }
        /*
             * If server is still null at this point, none of the proxy
             * worked
             */
        if (server == null || cmdsock == null) {
            throw new SocketException("Can't connect to SOCKS proxy:" + savedExc.getMessage());
        }
    } else {
        try {
            AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {

                public Void run() throws Exception {
                    cmdsock = new Socket(new PlainSocketImpl());
                    cmdsock.connect(new InetSocketAddress(server, serverPort));
                    cmdIn = cmdsock.getInputStream();
                    cmdOut = cmdsock.getOutputStream();
                    return null;
                }
            });
        } catch (Exception e) {
            throw new SocketException(e.getMessage());
        }
    }
    BufferedOutputStream out = new BufferedOutputStream(cmdOut, 512);
    InputStream in = cmdIn;
    if (useV4) {
        bindV4(in, out, saddr.getAddress(), saddr.getPort());
        return;
    }
    out.write(PROTO_VERS);
    out.write(2);
    out.write(NO_AUTH);
    out.write(USER_PASSW);
    out.flush();
    byte[] data = new byte[2];
    int i = readSocksReply(in, data);
    if (i != 2 || ((int) data[0]) != PROTO_VERS) {
        // Maybe it's not a V5 sever after all
        // Let's try V4 before we give up
        bindV4(in, out, saddr.getAddress(), saddr.getPort());
        return;
    }
    if (((int) data[1]) == NO_METHODS)
        throw new SocketException("SOCKS : No acceptable methods");
    if (!authenticate(data[1], in, out)) {
        throw new SocketException("SOCKS : authentication failed");
    }
    // We're OK. Let's issue the BIND command.
    out.write(PROTO_VERS);
    out.write(BIND);
    out.write(0);
    int lport = saddr.getPort();
    if (saddr.isUnresolved()) {
        out.write(DOMAIN_NAME);
        out.write(saddr.getHostName().length());
        try {
            out.write(saddr.getHostName().getBytes("ISO-8859-1"));
        } catch (java.io.UnsupportedEncodingException uee) {
            assert false;
        }
        out.write((lport >> 8) & 0xff);
        out.write((lport >> 0) & 0xff);
    } else if (saddr.getAddress() instanceof Inet4Address) {
        byte[] addr1 = saddr.getAddress().getAddress();
        out.write(IPV4);
        out.write(addr1);
        out.write((lport >> 8) & 0xff);
        out.write((lport >> 0) & 0xff);
        out.flush();
    } else if (saddr.getAddress() instanceof Inet6Address) {
        byte[] addr1 = saddr.getAddress().getAddress();
        out.write(IPV6);
        out.write(addr1);
        out.write((lport >> 8) & 0xff);
        out.write((lport >> 0) & 0xff);
        out.flush();
    } else {
        cmdsock.close();
        throw new SocketException("unsupported address type : " + saddr);
    }
    data = new byte[4];
    i = readSocksReply(in, data);
    SocketException ex = null;
    int len, nport;
    byte[] addr;
    switch(data[1]) {
        case REQUEST_OK:
            // success!
            switch(data[3]) {
                case IPV4:
                    addr = new byte[4];
                    i = readSocksReply(in, addr);
                    if (i != 4)
                        throw new SocketException("Reply from SOCKS server badly formatted");
                    data = new byte[2];
                    i = readSocksReply(in, data);
                    if (i != 2)
                        throw new SocketException("Reply from SOCKS server badly formatted");
                    nport = ((int) data[0] & 0xff) << 8;
                    nport += ((int) data[1] & 0xff);
                    external_address = new InetSocketAddress(new Inet4Address("", addr), nport);
                    break;
                case DOMAIN_NAME:
                    len = data[1];
                    byte[] host = new byte[len];
                    i = readSocksReply(in, host);
                    if (i != len)
                        throw new SocketException("Reply from SOCKS server badly formatted");
                    data = new byte[2];
                    i = readSocksReply(in, data);
                    if (i != 2)
                        throw new SocketException("Reply from SOCKS server badly formatted");
                    nport = ((int) data[0] & 0xff) << 8;
                    nport += ((int) data[1] & 0xff);
                    external_address = new InetSocketAddress(new String(host), nport);
                    break;
                case IPV6:
                    len = data[1];
                    addr = new byte[len];
                    i = readSocksReply(in, addr);
                    if (i != len)
                        throw new SocketException("Reply from SOCKS server badly formatted");
                    data = new byte[2];
                    i = readSocksReply(in, data);
                    if (i != 2)
                        throw new SocketException("Reply from SOCKS server badly formatted");
                    nport = ((int) data[0] & 0xff) << 8;
                    nport += ((int) data[1] & 0xff);
                    external_address = new InetSocketAddress(new Inet6Address("", addr), nport);
                    break;
            }
            break;
        case GENERAL_FAILURE:
            ex = new SocketException("SOCKS server general failure");
            break;
        case NOT_ALLOWED:
            ex = new SocketException("SOCKS: Bind not allowed by ruleset");
            break;
        case NET_UNREACHABLE:
            ex = new SocketException("SOCKS: Network unreachable");
            break;
        case HOST_UNREACHABLE:
            ex = new SocketException("SOCKS: Host unreachable");
            break;
        case CONN_REFUSED:
            ex = new SocketException("SOCKS: Connection refused");
            break;
        case TTL_EXPIRED:
            ex = new SocketException("SOCKS: TTL expired");
            break;
        case CMD_NOT_SUPPORTED:
            ex = new SocketException("SOCKS: Command not supported");
            break;
        case ADDR_TYPE_NOT_SUP:
            ex = new SocketException("SOCKS: address type not supported");
            break;
    }
    if (ex != null) {
        in.close();
        out.close();
        cmdsock.close();
        cmdsock = null;
        throw ex;
    }
    cmdIn = in;
    cmdOut = out;
}