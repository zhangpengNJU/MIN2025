/**
 * Sends a datagram packet from this socket. The
 * {@code DatagramPacket} includes information indicating the
 * data to be sent, its length, the IP address of the remote host,
 * and the port number on the remote host.
 *
 * <p>If there is a security manager, and the socket is not currently
 * connected to a remote address, this method first performs some
 * security checks. First, if {@code p.getAddress().isMulticastAddress()}
 * is true, this method calls the
 * security manager's {@code checkMulticast} method
 * with {@code p.getAddress()} as its argument.
 * If the evaluation of that expression is false,
 * this method instead calls the security manager's
 * {@code checkConnect} method with arguments
 * {@code p.getAddress().getHostAddress()} and
 * {@code p.getPort()}. Each call to a security manager method
 * could result in a SecurityException if the operation is not allowed.
 *
 * @param      p   the {@code DatagramPacket} to be sent.
 *
 * @exception  IOException  if an I/O error occurs.
 * @exception  SecurityException  if a security manager exists and its
 *             {@code checkMulticast} or {@code checkConnect}
 *             method doesn't allow the send.
 * @exception  PortUnreachableException may be thrown if the socket is connected
 *             to a currently unreachable destination. Note, there is no
 *             guarantee that the exception will be thrown.
 * @exception  java.nio.channels.IllegalBlockingModeException
 *             if this socket has an associated channel,
 *             and the channel is in non-blocking mode.
 * @exception  IllegalArgumentException if the socket is connected,
 *             and connected address and packet address differ.
 *
 * @see        java.net.DatagramPacket
 * @see        SecurityManager#checkMulticast(InetAddress)
 * @see        SecurityManager#checkConnect
 * @revised 1.4
 * @spec JSR-51
 */
public void send(DatagramPacket p) throws IOException {
    InetAddress packetAddress = null;
    synchronized (p) {
        if (isClosed())
            throw new SocketException("Socket is closed");
        checkAddress(p.getAddress(), "send");
        if (connectState == ST_NOT_CONNECTED) {
            // check the address is ok wiht the security manager on every send.
            SecurityManager security = System.getSecurityManager();
            // The reason you want to synchronize on datagram packet
            // is because you don't want an applet to change the address
            // while you are trying to send the packet for example
            // after the security check but before the send.
            if (security != null) {
                if (p.getAddress().isMulticastAddress()) {
                    security.checkMulticast(p.getAddress());
                } else {
                    security.checkConnect(p.getAddress().getHostAddress(), p.getPort());
                }
            }
        } else {
            // we're connected
            packetAddress = p.getAddress();
            if (packetAddress == null) {
                p.setAddress(connectedAddress);
                p.setPort(connectedPort);
            } else if ((!packetAddress.equals(connectedAddress)) || p.getPort() != connectedPort) {
                throw new IllegalArgumentException("connected address " + "and packet address" + " differ");
            }
        }
        // Check whether the socket is bound
        if (!isBound())
            bind(new InetSocketAddress(0));
        // call the  method to send
        getImpl().send(p);
    }
}