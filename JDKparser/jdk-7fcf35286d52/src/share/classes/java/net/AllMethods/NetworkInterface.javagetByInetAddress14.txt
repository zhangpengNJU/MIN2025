/**
 * Convenience method to search for a network interface that
 * has the specified Internet Protocol (IP) address bound to
 * it.
 * <p>
 * If the specified IP address is bound to multiple network
 * interfaces it is not defined which network interface is
 * returned.
 *
 * @param   addr
 *          The {@code InetAddress} to search with.
 *
 * @return  A {@code NetworkInterface}
 *          or {@code null} if there is no network interface
 *          with the specified IP address.
 *
 * @throws  SocketException
 *          If an I/O error occurs.
 *
 * @throws  NullPointerException
 *          If the specified address is {@code null}.
 */
public static NetworkInterface getByInetAddress(InetAddress addr) throws SocketException {
    if (addr == null) {
        throw new NullPointerException();
    }
    if (addr instanceof Inet4Address) {
        Inet4Address inet4Address = (Inet4Address) addr;
        if (inet4Address.holder.family != InetAddress.IPv4) {
            throw new IllegalArgumentException("invalid family type: " + inet4Address.holder.family);
        }
    } else if (addr instanceof Inet6Address) {
        Inet6Address inet6Address = (Inet6Address) addr;
        if (inet6Address.holder.family != InetAddress.IPv6) {
            throw new IllegalArgumentException("invalid family type: " + inet6Address.holder.family);
        }
    } else {
        throw new IllegalArgumentException("invalid address type: " + addr);
    }
    return getByInetAddress0(addr);
}