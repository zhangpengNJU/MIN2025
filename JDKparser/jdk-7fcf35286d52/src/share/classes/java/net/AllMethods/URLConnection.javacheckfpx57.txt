/**
 * Check for FlashPix image data in InputStream is.  Return true if
 * the stream has FlashPix data, false otherwise.  Before calling this
 * method, the stream should have already been checked to be sure it
 * contains Microsoft Structured Storage data.
 */
static private boolean checkfpx(InputStream is) throws IOException {
    /* Test for FlashPix image data in Microsoft Structured Storage format.
         * In general, should do this with calls to an SS implementation.
         * Lacking that, need to dig via offsets to get to the FlashPix
         * ClassID.  Details:
         *
         * Offset to Fpx ClsID from beginning of stream should be:
         *
         * FpxClsidOffset = rootEntryOffset + clsidOffset
         *
         * where: clsidOffset = 0x50.
         *        rootEntryOffset = headerSize + sectorSize*sectDirStart
         *                          + 128*rootEntryDirectory
         *
         *        where:  headerSize = 0x200 (always)
         *                sectorSize = 2 raised to power of uSectorShift,
         *                             which is found in the header at
         *                             offset 0x1E.
         *                sectDirStart = found in the header at offset 0x30.
         *                rootEntryDirectory = in general, should search for
         *                                     directory labelled as root.
         *                                     We will assume value of 0 (i.e.,
         *                                     rootEntry is in first directory)
         */
    // Mark the stream so we can reset it. 0x100 is enough for the first
    // few reads, but the mark will have to be reset and set again once
    // the offset to the root directory entry is computed. That offset
    // can be very large and isn't know until the stream has been read from
    is.mark(0x100);
    // Get the byte ordering located at 0x1E. 0xFE is Intel,
    // 0xFF is other
    long toSkip = (long) 0x1C;
    long posn;
    if ((posn = skipForward(is, toSkip)) < toSkip) {
        is.reset();
        return false;
    }
    int[] c = new int[16];
    if (readBytes(c, 2, is) < 0) {
        is.reset();
        return false;
    }
    int byteOrder = c[0];
    posn += 2;
    int uSectorShift;
    if (readBytes(c, 2, is) < 0) {
        is.reset();
        return false;
    }
    if (byteOrder == 0xFE) {
        uSectorShift = c[0];
        uSectorShift += c[1] << 8;
    } else {
        uSectorShift = c[0] << 8;
        uSectorShift += c[1];
    }
    posn += 2;
    toSkip = (long) 0x30 - posn;
    long skipped = 0;
    if ((skipped = skipForward(is, toSkip)) < toSkip) {
        is.reset();
        return false;
    }
    posn += skipped;
    if (readBytes(c, 4, is) < 0) {
        is.reset();
        return false;
    }
    int sectDirStart;
    if (byteOrder == 0xFE) {
        sectDirStart = c[0];
        sectDirStart += c[1] << 8;
        sectDirStart += c[2] << 16;
        sectDirStart += c[3] << 24;
    } else {
        sectDirStart = c[0] << 24;
        sectDirStart += c[1] << 16;
        sectDirStart += c[2] << 8;
        sectDirStart += c[3];
    }
    posn += 4;
    // Reset back to the beginning
    is.reset();
    toSkip = 0x200L + (long) (1 << uSectorShift) * sectDirStart + 0x50L;
    // Sanity check!
    if (toSkip < 0) {
        return false;
    }
    /*
         * How far can we skip? Is there any performance problem here?
         * This skip can be fairly long, at least 0x4c650 in at least
         * one case. Have to assume that the skip will fit in an int.
         * Leave room to read whole root dir
         */
    is.mark((int) toSkip + 0x30);
    if ((skipForward(is, toSkip)) < toSkip) {
        is.reset();
        return false;
    }
    /* should be at beginning of ClassID, which is as follows
         * (in Intel byte order):
         *    00 67 61 56 54 C1 CE 11 85 53 00 AA 00 A1 F9 5B
         *
         * This is stored from Windows as long,short,short,char[8]
         * so for byte order changes, the order only changes for
         * the first 8 bytes in the ClassID.
         *
         * Test against this, ignoring second byte (Intel) since
         * this could change depending on part of Fpx file we have.
         */
    if (readBytes(c, 16, is) < 0) {
        is.reset();
        return false;
    }
    // intel byte order
    if (byteOrder == 0xFE && c[0] == 0x00 && c[2] == 0x61 && c[3] == 0x56 && c[4] == 0x54 && c[5] == 0xC1 && c[6] == 0xCE && c[7] == 0x11 && c[8] == 0x85 && c[9] == 0x53 && c[10] == 0x00 && c[11] == 0xAA && c[12] == 0x00 && c[13] == 0xA1 && c[14] == 0xF9 && c[15] == 0x5B) {
        is.reset();
        return true;
    } else // non-intel byte order
    if (c[3] == 0x00 && c[1] == 0x61 && c[0] == 0x56 && c[5] == 0x54 && c[4] == 0xC1 && c[7] == 0xCE && c[6] == 0x11 && c[8] == 0x85 && c[9] == 0x53 && c[10] == 0x00 && c[11] == 0xAA && c[12] == 0x00 && c[13] == 0xA1 && c[14] == 0xF9 && c[15] == 0x5B) {
        is.reset();
        return true;
    }
    is.reset();
    return false;
}