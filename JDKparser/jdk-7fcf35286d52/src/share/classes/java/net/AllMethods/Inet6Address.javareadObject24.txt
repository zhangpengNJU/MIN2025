/**
 * restore the state of this object from stream
 * including the scope information, only if the
 * scoped interface name is valid on this system
 */
private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {
    NetworkInterface scope_ifname = null;
    if (getClass().getClassLoader() != null) {
        throw new SecurityException("invalid address type");
    }
    ObjectInputStream.GetField gf = s.readFields();
    byte[] ipaddress = (byte[]) gf.get("ipaddress", null);
    int scope_id = (int) gf.get("scope_id", -1);
    boolean scope_id_set = (boolean) gf.get("scope_id_set", false);
    boolean scope_ifname_set = (boolean) gf.get("scope_ifname_set", false);
    String ifname = (String) gf.get("ifname", null);
    if (ifname != null && !"".equals(ifname)) {
        try {
            scope_ifname = NetworkInterface.getByName(ifname);
            if (scope_ifname == null) {
                /* the interface does not exist on this system, so we clear
                     * the scope information completely */
                scope_id_set = false;
                scope_ifname_set = false;
                scope_id = 0;
            } else {
                scope_ifname_set = true;
                try {
                    scope_id = deriveNumericScope(ipaddress, scope_ifname);
                } catch (UnknownHostException e) {
                // typically should not happen, but it may be that
                // the machine being used for deserialization has
                // the same interface name but without IPv6 configured.
                }
            }
        } catch (SocketException e) {
        }
    }
    /* if ifname was not supplied, then the numeric info is used */
    ipaddress = ipaddress.clone();
    // Check that our invariants are satisfied
    if (ipaddress.length != INADDRSZ) {
        throw new InvalidObjectException("invalid address length: " + ipaddress.length);
    }
    if (holder.getFamily() != IPv6) {
        throw new InvalidObjectException("invalid address family type");
    }
    Inet6AddressHolder h = new Inet6AddressHolder(ipaddress, scope_id, scope_id_set, scope_ifname, scope_ifname_set);
    UNSAFE.putObject(this, FIELDS_OFFSET, h);
}