// --------------------------JDBC 4.2 -----------------------------
/**
 *  Writes to the stream the data contained in the given object. The
 *  object will be converted to the specified targetSqlType
 *  before being sent to the stream.
 * <p>
 *  When the {@code object} is {@code null}, this
 *  method writes an SQL {@code NULL} to the stream.
 *  <p>
 *  If the object has a custom mapping (is of a class implementing the
 *  interface {@code SQLData}),
 *  the JDBC driver should call the method {@code SQLData.writeSQL} to
 *  write it to the SQL data stream.
 *  If, on the other hand, the object is of a class implementing
 *  {@code Ref}, {@code Blob}, {@code Clob},  {@code NClob},
 *   {@code Struct}, {@code java.net.URL},
 *  or {@code Array}, the driver should pass it to the database as a
 *  value of the corresponding SQL type.
 * <P>
 *  The default implementation will throw {@code SQLFeatureNotSupportedException}
 *
 *  @param x the object containing the input parameter value
 *  @param targetSqlType the SQL type to be sent to the database.
 *  @exception SQLException if a database access error occurs  or
 *             if the Java Object specified by x is an InputStream
 *             or Reader object and the value of the scale parameter is less
 *             than zero
 *  @exception SQLFeatureNotSupportedException if
 *  the JDBC driver does not support this data type
 *  @see JDBCType
 *  @see SQLType
 *  @since 1.8
 */
default void writeObject(Object x, SQLType targetSqlType) throws SQLException {
    throw new SQLFeatureNotSupportedException();
}