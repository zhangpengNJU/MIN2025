/**
 * Retrieves a description of the primary key columns that are
 * referenced by the given table's foreign key columns (the primary keys
 * imported by a table).  They are ordered by PKTABLE_CAT,
 * PKTABLE_SCHEM, PKTABLE_NAME, and KEY_SEQ.
 *
 * <P>Each primary key column description has the following columns:
 *  <OL>
 *  <LI><B>PKTABLE_CAT</B> String {@code =>} primary key table catalog
 *      being imported (may be <code>null</code>)
 *  <LI><B>PKTABLE_SCHEM</B> String {@code =>} primary key table schema
 *      being imported (may be <code>null</code>)
 *  <LI><B>PKTABLE_NAME</B> String {@code =>} primary key table name
 *      being imported
 *  <LI><B>PKCOLUMN_NAME</B> String {@code =>} primary key column name
 *      being imported
 *  <LI><B>FKTABLE_CAT</B> String {@code =>} foreign key table catalog (may be <code>null</code>)
 *  <LI><B>FKTABLE_SCHEM</B> String {@code =>} foreign key table schema (may be <code>null</code>)
 *  <LI><B>FKTABLE_NAME</B> String {@code =>} foreign key table name
 *  <LI><B>FKCOLUMN_NAME</B> String {@code =>} foreign key column name
 *  <LI><B>KEY_SEQ</B> short {@code =>} sequence number within a foreign key( a value
 *  of 1 represents the first column of the foreign key, a value of 2 would
 *  represent the second column within the foreign key).
 *  <LI><B>UPDATE_RULE</B> short {@code =>} What happens to a
 *       foreign key when the primary key is updated:
 *      <UL>
 *      <LI> importedNoAction - do not allow update of primary
 *               key if it has been imported
 *      <LI> importedKeyCascade - change imported key to agree
 *               with primary key update
 *      <LI> importedKeySetNull - change imported key to <code>NULL</code>
 *               if its primary key has been updated
 *      <LI> importedKeySetDefault - change imported key to default values
 *               if its primary key has been updated
 *      <LI> importedKeyRestrict - same as importedKeyNoAction
 *                                 (for ODBC 2.x compatibility)
 *      </UL>
 *  <LI><B>DELETE_RULE</B> short {@code =>} What happens to
 *      the foreign key when primary is deleted.
 *      <UL>
 *      <LI> importedKeyNoAction - do not allow delete of primary
 *               key if it has been imported
 *      <LI> importedKeyCascade - delete rows that import a deleted key
 *      <LI> importedKeySetNull - change imported key to NULL if
 *               its primary key has been deleted
 *      <LI> importedKeyRestrict - same as importedKeyNoAction
 *                                 (for ODBC 2.x compatibility)
 *      <LI> importedKeySetDefault - change imported key to default if
 *               its primary key has been deleted
 *      </UL>
 *  <LI><B>FK_NAME</B> String {@code =>} foreign key name (may be <code>null</code>)
 *  <LI><B>PK_NAME</B> String {@code =>} primary key name (may be <code>null</code>)
 *  <LI><B>DEFERRABILITY</B> short {@code =>} can the evaluation of foreign key
 *      constraints be deferred until commit
 *      <UL>
 *      <LI> importedKeyInitiallyDeferred - see SQL92 for definition
 *      <LI> importedKeyInitiallyImmediate - see SQL92 for definition
 *      <LI> importedKeyNotDeferrable - see SQL92 for definition
 *      </UL>
 *  </OL>
 *
 * @param catalog a catalog name; must match the catalog name as it
 *        is stored in the database; "" retrieves those without a catalog;
 *        <code>null</code> means that the catalog name should not be used to narrow
 *        the search
 * @param schema a schema name; must match the schema name
 *        as it is stored in the database; "" retrieves those without a schema;
 *        <code>null</code> means that the schema name should not be used to narrow
 *        the search
 * @param table a table name; must match the table name as it is stored
 *        in the database
 * @return <code>ResultSet</code> - each row is a primary key column description
 * @exception SQLException if a database access error occurs
 * @see #getExportedKeys
 */
ResultSet getImportedKeys(String catalog, String schema, String table) throws SQLException;