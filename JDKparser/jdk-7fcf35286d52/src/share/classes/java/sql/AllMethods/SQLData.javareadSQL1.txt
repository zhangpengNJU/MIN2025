/**
 * Populates this object with data read from the database.
 * The implementation of the method must follow this protocol:
 * <UL>
 * <LI>It must read each of the attributes or elements of the SQL
 * type  from the given input stream.  This is done
 * by calling a method of the input stream to read each
 * item, in the order that they appear in the SQL definition
 * of the type.
 * <LI>The method <code>readSQL</code> then
 * assigns the data to appropriate fields or
 * elements (of this or other objects).
 * Specifically, it must call the appropriate <i>reader</i> method
 * (<code>SQLInput.readString</code>, <code>SQLInput.readBigDecimal</code>,
 * and so on) method(s) to do the following:
 * for a distinct type, read its single data element;
 * for a structured type, read a value for each attribute of the SQL type.
 * </UL>
 * The JDBC driver initializes the input stream with a type map
 * before calling this method, which is used by the appropriate
 * <code>SQLInput</code> reader method on the stream.
 *
 * @param stream the <code>SQLInput</code> object from which to read the data for
 * the value that is being custom mapped
 * @param typeName the SQL type name of the value on the data stream
 * @exception SQLException if there is a database access error
 * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
 * this method
 * @see SQLInput
 * @since 1.2
 */
void readSQL(SQLInput stream, String typeName) throws SQLException;