/**
 * Sets the designated parameter to SQL <code>NULL</code>.
 * This version of the method <code>setNull</code> should
 * be used for user-defined types and REF type parameters.  Examples
 * of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and
 * named array types.
 *
 * <P><B>Note:</B> To be portable, applications must give the
 * SQL type code and the fully-qualified SQL type name when specifying
 * a NULL user-defined or REF parameter.  In the case of a user-defined type
 * the name is the type name of the parameter itself.  For a REF
 * parameter, the name is the type name of the referenced type.  If
 * a JDBC driver does not need the type code or type name information,
 * it may ignore it.
 *
 * Although it is intended for user-defined and Ref parameters,
 * this method may be used to set a null parameter of any JDBC type.
 * If the parameter does not have a user-defined or REF type, the given
 * typeName is ignored.
 *
 * @param parameterIndex the first parameter is 1, the second is 2, ...
 * @param sqlType a value from <code>java.sql.Types</code>
 * @param typeName the fully-qualified name of an SQL user-defined type;
 *  ignored if the parameter is not a user-defined type or REF
 * @exception SQLException if parameterIndex does not correspond to a parameter
 * marker in the SQL statement; if a database access error occurs or
 * this method is called on a closed <code>PreparedStatement</code>
 * @exception SQLFeatureNotSupportedException if <code>sqlType</code> is
 * a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
 * <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
 * <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
 *  <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
 * or  <code>STRUCT</code> data type and the JDBC driver does not support
 * this data type or if the JDBC driver does not support this method
 * @since 1.2
 */
void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException;