/**
 * Retrieves a description of all the data types supported by
 * this database. They are ordered by DATA_TYPE and then by how
 * closely the data type maps to the corresponding JDBC SQL type.
 *
 * <P>If the database supports SQL distinct types, then getTypeInfo() will return
 * a single row with a TYPE_NAME of DISTINCT and a DATA_TYPE of Types.DISTINCT.
 * If the database supports SQL structured types, then getTypeInfo() will return
 * a single row with a TYPE_NAME of STRUCT and a DATA_TYPE of Types.STRUCT.
 *
 * <P>If SQL distinct or structured types are supported, then information on the
 * individual types may be obtained from the getUDTs() method.
 *
 * <P>Each type description has the following columns:
 *  <OL>
 *  <LI><B>TYPE_NAME</B> String {@code =>} Type name
 *  <LI><B>DATA_TYPE</B> int {@code =>} SQL data type from java.sql.Types
 *  <LI><B>PRECISION</B> int {@code =>} maximum precision
 *  <LI><B>LITERAL_PREFIX</B> String {@code =>} prefix used to quote a literal
 *      (may be <code>null</code>)
 *  <LI><B>LITERAL_SUFFIX</B> String {@code =>} suffix used to quote a literal
 *     (may be <code>null</code>)
 *  <LI><B>CREATE_PARAMS</B> String {@code =>} parameters used in creating
 *      the type (may be <code>null</code>)
 *  <LI><B>NULLABLE</B> short {@code =>} can you use NULL for this type.
 *      <UL>
 *      <LI> typeNoNulls - does not allow NULL values
 *      <LI> typeNullable - allows NULL values
 *      <LI> typeNullableUnknown - nullability unknown
 *      </UL>
 *  <LI><B>CASE_SENSITIVE</B> boolean{@code =>} is it case sensitive.
 *  <LI><B>SEARCHABLE</B> short {@code =>} can you use "WHERE" based on this type:
 *      <UL>
 *      <LI> typePredNone - No support
 *      <LI> typePredChar - Only supported with WHERE .. LIKE
 *      <LI> typePredBasic - Supported except for WHERE .. LIKE
 *      <LI> typeSearchable - Supported for all WHERE ..
 *      </UL>
 *  <LI><B>UNSIGNED_ATTRIBUTE</B> boolean {@code =>} is it unsigned.
 *  <LI><B>FIXED_PREC_SCALE</B> boolean {@code =>} can it be a money value.
 *  <LI><B>AUTO_INCREMENT</B> boolean {@code =>} can it be used for an
 *      auto-increment value.
 *  <LI><B>LOCAL_TYPE_NAME</B> String {@code =>} localized version of type name
 *      (may be <code>null</code>)
 *  <LI><B>MINIMUM_SCALE</B> short {@code =>} minimum scale supported
 *  <LI><B>MAXIMUM_SCALE</B> short {@code =>} maximum scale supported
 *  <LI><B>SQL_DATA_TYPE</B> int {@code =>} unused
 *  <LI><B>SQL_DATETIME_SUB</B> int {@code =>} unused
 *  <LI><B>NUM_PREC_RADIX</B> int {@code =>} usually 2 or 10
 *  </OL>
 *
 * <p>The PRECISION column represents the maximum column size that the server supports for the given datatype.
 * For numeric data, this is the maximum precision.  For character data, this is the length in characters.
 * For datetime datatypes, this is the length in characters of the String representation (assuming the
 * maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,
 * this is the length in bytes. Null is returned for data types where the
 * column size is not applicable.
 *
 * @return a <code>ResultSet</code> object in which each row is an SQL
 *         type description
 * @exception SQLException if a database access error occurs
 */
ResultSet getTypeInfo() throws SQLException;