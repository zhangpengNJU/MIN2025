/**
 * Maps the specified {@code key} to the specified
 * {@code value} in this {@code RenderingHints} object.
 * Neither the key nor the value can be {@code null}.
 * The value can be retrieved by calling the {@code get} method
 * with a key that is equal to the original key.
 * @param      key     the rendering hint key.
 * @param      value   the rendering hint value.
 * @return     the previous value of the specified key in this object
 *             or {@code null} if it did not have one.
 * @exception NullPointerException if the key is
 *            {@code null}.
 * @exception ClassCastException if the key can not
 *            be cast to {@code RenderingHints.Key}
 * @exception IllegalArgumentException if the
 *            {@link Key#isCompatibleValue(java.lang.Object)
 *                   Key.isCompatibleValue()}
 *            method of the specified key returns false for the
 *            specified value
 * @see     #get(Object)
 */
public Object put(Object key, Object value) {
    if (!((Key) key).isCompatibleValue(value)) {
        throw new IllegalArgumentException(value + " incompatible with " + key);
    }
    return hintmap.put((Key) key, value);
}