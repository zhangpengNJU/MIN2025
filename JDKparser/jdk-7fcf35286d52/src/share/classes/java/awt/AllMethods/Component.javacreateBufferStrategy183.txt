/**
 * Creates a new strategy for multi-buffering on this component with the
 * required buffer capabilities.  This is useful, for example, if only
 * accelerated memory or page flipping is desired (as specified by the
 * buffer capabilities).
 * <p>
 * Each time this method
 * is called, <code>dispose</code> will be invoked on the existing
 * <code>BufferStrategy</code>.
 * @param numBuffers number of buffers to create
 * @param caps the required capabilities for creating the buffer strategy;
 * cannot be <code>null</code>
 * @exception AWTException if the capabilities supplied could not be
 * supported or met; this may happen, for example, if there is not enough
 * accelerated memory currently available, or if page flipping is specified
 * but not possible.
 * @exception IllegalArgumentException if numBuffers is less than 1, or if
 * caps is <code>null</code>
 * @see Window#getBufferStrategy()
 * @see Canvas#getBufferStrategy()
 * @since 1.4
 */
void createBufferStrategy(int numBuffers, BufferCapabilities caps) throws AWTException {
    // Check arguments
    if (numBuffers < 1) {
        throw new IllegalArgumentException("Number of buffers must be at least 1");
    }
    if (caps == null) {
        throw new IllegalArgumentException("No capabilities specified");
    }
    // Destroy old buffers
    if (bufferStrategy != null) {
        bufferStrategy.dispose();
    }
    if (numBuffers == 1) {
        bufferStrategy = new SingleBufferStrategy(caps);
    } else {
        SunGraphicsEnvironment sge = (SunGraphicsEnvironment) GraphicsEnvironment.getLocalGraphicsEnvironment();
        if (!caps.isPageFlipping() && sge.isFlipStrategyPreferred(peer)) {
            caps = new ProxyCapabilities(caps);
        }
        // assert numBuffers > 1;
        if (caps.isPageFlipping()) {
            bufferStrategy = new FlipSubRegionBufferStrategy(numBuffers, caps);
        } else {
            bufferStrategy = new BltSubRegionBufferStrategy(numBuffers, caps);
        }
    }
}