/**
 * Copies pixels from Raster srcRaster to this WritableRaster.
 * For each (x, y) address in srcRaster, the corresponding pixel
 * is copied to address (x+dx, y+dy) in this WritableRaster,
 * unless (x+dx, y+dy) falls outside the bounds of this raster.
 * srcRaster must have the same number of bands as this WritableRaster.
 * The copy is a simple copy of source samples to the corresponding
 * destination samples.  For details, see
 * {@link WritableRaster#setRect(Raster)}.
 *
 * @param dx        The X translation factor from src space to dst space
 *                  of the copy.
 * @param dy        The Y translation factor from src space to dst space
 *                  of the copy.
 * @param srcRaster The Raster from which to copy pixels.
 *
 * @throws NullPointerException if srcRaster is null.
 */
public void setRect(int dx, int dy, Raster srcRaster) {
    int width = srcRaster.getWidth();
    int height = srcRaster.getHeight();
    int srcOffX = srcRaster.getMinX();
    int srcOffY = srcRaster.getMinY();
    int dstOffX = dx + srcOffX;
    int dstOffY = dy + srcOffY;
    // Clip to this raster
    if (dstOffX < this.minX) {
        int skipX = this.minX - dstOffX;
        width -= skipX;
        srcOffX += skipX;
        dstOffX = this.minX;
    }
    if (dstOffY < this.minY) {
        int skipY = this.minY - dstOffY;
        height -= skipY;
        srcOffY += skipY;
        dstOffY = this.minY;
    }
    if (dstOffX + width > this.minX + this.width) {
        width = this.minX + this.width - dstOffX;
    }
    if (dstOffY + height > this.minY + this.height) {
        height = this.minY + this.height - dstOffY;
    }
    if (width <= 0 || height <= 0) {
        return;
    }
    switch(srcRaster.getSampleModel().getDataType()) {
        case DataBuffer.TYPE_BYTE:
        case DataBuffer.TYPE_SHORT:
        case DataBuffer.TYPE_USHORT:
        case DataBuffer.TYPE_INT:
            int[] iData = null;
            for (int startY = 0; startY < height; startY++) {
                // Grab one scanline at a time
                iData = srcRaster.getPixels(srcOffX, srcOffY + startY, width, 1, iData);
                setPixels(dstOffX, dstOffY + startY, width, 1, iData);
            }
            break;
        case DataBuffer.TYPE_FLOAT:
            float[] fData = null;
            for (int startY = 0; startY < height; startY++) {
                fData = srcRaster.getPixels(srcOffX, srcOffY + startY, width, 1, fData);
                setPixels(dstOffX, dstOffY + startY, width, 1, fData);
            }
            break;
        case DataBuffer.TYPE_DOUBLE:
            double[] dData = null;
            for (int startY = 0; startY < height; startY++) {
                // Grab one scanline at a time
                dData = srcRaster.getPixels(srcOffX, srcOffY + startY, width, 1, dData);
                setPixels(dstOffX, dstOffY + startY, width, 1, dData);
            }
            break;
    }
}