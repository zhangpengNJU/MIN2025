/**
 * Sets the data for a single pixel in the specified
 * <code>DataBuffer</code> from a primitive array of type
 * TransferType.  For a <code>MultiPixelPackedSampleModel</code>,
 * only the first element of the array holds valid data,
 * and the type must be the smallest of
 * DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, or DataBuffer.TYPE_INT
 * that can hold a single pixel.
 * <p>
 * The following code illustrates transferring data for one pixel from
 * <code>DataBuffer</code> <code>db1</code>, whose storage layout is
 * described by <code>MultiPixelPackedSampleModel</code>
 * <code>mppsm1</code>, to <code>DataBuffer</code> <code>db2</code>,
 * whose storage layout is described by
 * <code>MultiPixelPackedSampleModel</code> <code>mppsm2</code>.
 * The transfer is generally more efficient than using
 * <code>getPixel</code> or <code>setPixel</code>.
 * <pre>
 *       MultiPixelPackedSampleModel mppsm1, mppsm2;
 *       DataBufferInt db1, db2;
 *       mppsm2.setDataElements(x, y, mppsm1.getDataElements(x, y, null,
 *                              db1), db2);
 * </pre>
 * Using <code>getDataElements</code> or <code>setDataElements</code> to
 * transfer between two <code>DataBuffer/SampleModel</code> pairs is
 * legitimate if the <code>SampleModel</code> objects have
 * the same number of bands, corresponding bands have the same number of
 * bits per sample, and the TransferTypes are the same.
 * <p>
 * <code>obj</code> must be a primitive array of type TransferType.
 * Otherwise, a <code>ClassCastException</code> is thrown.  An
 * <code>ArrayIndexOutOfBoundsException</code> is thrown if the
 * coordinates are not in bounds, or if <code>obj</code> is not large
 * enough to hold the pixel data.
 * @param x the X coordinate of the pixel location
 * @param y the Y coordinate of the pixel location
 * @param obj a primitive array containing pixel data
 * @param data the <code>DataBuffer</code> containing the image data
 * @see #getDataElements(int, int, Object, DataBuffer)
 */
public void setDataElements(int x, int y, Object obj, DataBuffer data) {
    if ((x < 0) || (y < 0) || (x >= width) || (y >= height)) {
        throw new ArrayIndexOutOfBoundsException("Coordinate out of bounds!");
    }
    int type = getTransferType();
    int bitnum = dataBitOffset + x * pixelBitStride;
    int index = y * scanlineStride + (bitnum / dataElementSize);
    int shift = dataElementSize - (bitnum & (dataElementSize - 1)) - pixelBitStride;
    int element = data.getElem(index);
    element &= ~(bitMask << shift);
    switch(type) {
        case DataBuffer.TYPE_BYTE:
            byte[] barray = (byte[]) obj;
            element |= (((int) (barray[0]) & 0xff) & bitMask) << shift;
            data.setElem(index, element);
            break;
        case DataBuffer.TYPE_USHORT:
            short[] sarray = (short[]) obj;
            element |= (((int) (sarray[0]) & 0xffff) & bitMask) << shift;
            data.setElem(index, element);
            break;
        case DataBuffer.TYPE_INT:
            int[] iarray = (int[]) obj;
            element |= (iarray[0] & bitMask) << shift;
            data.setElem(index, element);
            break;
    }
}