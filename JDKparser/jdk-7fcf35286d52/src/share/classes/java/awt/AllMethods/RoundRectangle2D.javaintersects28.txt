/**
 * {@inheritDoc}
 * @since 1.2
 */
public boolean intersects(double x, double y, double w, double h) {
    if (isEmpty() || w <= 0 || h <= 0) {
        return false;
    }
    double rrx0 = getX();
    double rry0 = getY();
    double rrx1 = rrx0 + getWidth();
    double rry1 = rry0 + getHeight();
    // Check for trivial rejection - bounding rectangles do not intersect
    if (x + w <= rrx0 || x >= rrx1 || y + h <= rry0 || y >= rry1) {
        return false;
    }
    double aw = Math.min(getWidth(), Math.abs(getArcWidth())) / 2.0;
    double ah = Math.min(getHeight(), Math.abs(getArcHeight())) / 2.0;
    int x0class = classify(x, rrx0, rrx1, aw);
    int x1class = classify(x + w, rrx0, rrx1, aw);
    int y0class = classify(y, rry0, rry1, ah);
    int y1class = classify(y + h, rry0, rry1, ah);
    // Trivially accept if any point is inside inner rectangle
    if (x0class == 2 || x1class == 2 || y0class == 2 || y1class == 2) {
        return true;
    }
    // Trivially accept if either edge spans inner rectangle
    if ((x0class < 2 && x1class > 2) || (y0class < 2 && y1class > 2)) {
        return true;
    }
    // Since neither edge spans the center, then one of the corners
    // must be in one of the rounded edges.  We detect this case if
    // a [xy]0class is 3 or a [xy]1class is 1.  One of those two cases
    // must be true for each direction.
    // We now find a "nearest point" to test for being inside a rounded
    // corner.
    x = (x1class == 1) ? (x = x + w - (rrx0 + aw)) : (x = x - (rrx1 - aw));
    y = (y1class == 1) ? (y = y + h - (rry0 + ah)) : (y = y - (rry1 - ah));
    x = x / aw;
    y = y / ah;
    return (x * x + y * y <= 1.0);
}