/**
 * Returns the TRC as an array of shorts.  If the profile has
 * specified the TRC as linear (gamma = 1.0) or as a simple gamma
 * value, this method throws an exception, and the getGamma() method
 * should be used to get the gamma value.  Otherwise the short array
 * returned here represents a lookup table where the input Gray value
 * is conceptually in the range [0.0, 1.0].  Value 0.0 maps
 * to array index 0 and value 1.0 maps to array index length-1.
 * Interpolation may be used to generate output values for
 * input values which do not map exactly to an index in the
 * array.  Output values also map linearly to the range [0.0, 1.0].
 * Value 0.0 is represented by an array value of 0x0000 and
 * value 1.0 by 0xFFFF, i.e. the values are really unsigned
 * short values, although they are returned in a short array.
 * theTagSignature should be one of icSigGrayTRCTag, icSigRedTRCTag,
 * icSigGreenTRCTag, or icSigBlueTRCTag.
 * @return a short array representing the TRC.
 * @exception ProfileDataException if the profile does not specify
 *            the TRC as a table.
 */
short[] getTRC(int theTagSignature) {
    byte[] theTRCData;
    short[] theTRC;
    int i1, i2, nElements, theU8Fixed8;
    theTRCData = getData(theTagSignature);
    /* get the TRC */
    /* getData will activate deferred
                                                  profiles if necessary */
    nElements = intFromBigEndian(theTRCData, icCurveCount);
    if (nElements == 1) {
        throw new ProfileDataException("TRC is not a table");
    }
    /* make the short array */
    theTRC = new short[nElements];
    for (i1 = 0, i2 = icCurveData; i1 < nElements; i1++, i2 += 2) {
        theTRC[i1] = shortFromBigEndian(theTRCData, i2);
    }
    return theTRC;
}