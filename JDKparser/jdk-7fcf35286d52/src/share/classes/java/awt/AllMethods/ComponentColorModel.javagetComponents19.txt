/**
 * Returns an array of unnormalized color/alpha components given a pixel
 * in this <CODE>ColorModel</CODE>.  The pixel value is specified by an
 * array of data elements of type <CODE>transferType</CODE> passed in as
 * an object reference.
 * An IllegalArgumentException is thrown if the component values for this
 * <CODE>ColorModel</CODE> are not conveniently representable in the
 * unnormalized form.
 * Color/alpha components are stored in the <CODE>components</CODE> array
 * starting at  <CODE>offset</CODE> (even if the array is allocated by
 * this method).  Since <code>ComponentColorModel</code> can be
 * subclassed, subclasses inherit the
 * implementation of this method and if they don't override it then
 * this method might throw an exception if they use an unsupported
 * <code>transferType</code>.
 *
 * @param pixel A pixel value specified by an array of data elements of
 * type <CODE>transferType</CODE>.
 * @param components An integer array in which to store the unnormalized
 * color/alpha components. If the <CODE>components</CODE> array is null,
 * a new array is allocated.
 * @param offset An offset into the <CODE>components</CODE> array.
 *
 * @return The <CODE>components</CODE> array.
 *
 * @throws IllegalArgumentException If this
 * <CODE>ComponentColorModel</CODE> does not support the unnormalized form
 * @throws UnsupportedOperationException in some cases iff the
 * transfer type of this <CODE>ComponentColorModel</CODE>
 * is not one of the following transfer types:
 * <CODE>DataBuffer.TYPE_BYTE</CODE>, <CODE>DataBuffer.TYPE_USHORT</CODE>,
 * or <CODE>DataBuffer.TYPE_INT</CODE>.
 * @throws ClassCastException If <CODE>pixel</CODE> is not a primitive
 * array of type <CODE>transferType</CODE>.
 * @throws IllegalArgumentException If the <CODE>components</CODE> array is
 * not null and is not large enough to hold all the color and alpha
 * components (starting at offset), or if <CODE>pixel</CODE> is not large
 * enough to hold a pixel value for this ColorModel.
 */
public int[] getComponents(Object pixel, int[] components, int offset) {
    int[] intpixel;
    if (needScaleInit) {
        initScale();
    }
    if (noUnnorm) {
        throw new IllegalArgumentException("This ColorModel does not support the unnormalized form");
    }
    if (pixel instanceof int[]) {
        intpixel = (int[]) pixel;
    } else {
        intpixel = DataBuffer.toIntArray(pixel);
        if (intpixel == null) {
            throw new UnsupportedOperationException("This method has not been " + "implemented for transferType " + transferType);
        }
    }
    if (intpixel.length < numComponents) {
        throw new IllegalArgumentException("Length of pixel array < number of components in model");
    }
    if (components == null) {
        components = new int[offset + numComponents];
    } else if ((components.length - offset) < numComponents) {
        throw new IllegalArgumentException("Length of components array < number of components in model");
    }
    System.arraycopy(intpixel, 0, components, offset, numComponents);
    return components;
}