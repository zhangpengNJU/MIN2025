/**
 * Returns a new <code>Font</code> using the specified font type
 * and input data.  The new <code>Font</code> is
 * created with a point size of 1 and style {@link #PLAIN PLAIN}.
 * This base font can then be used with the <code>deriveFont</code>
 * methods in this class to derive new <code>Font</code> objects with
 * varying sizes, styles, transforms and font features.  This
 * method does not close the {@link InputStream}.
 * <p>
 * To make the <code>Font</code> available to Font constructors the
 * returned <code>Font</code> must be registered in the
 * <code>GraphicsEnviroment</code> by calling
 * {@link GraphicsEnvironment#registerFont(Font) registerFont(Font)}.
 * @param fontFormat the type of the <code>Font</code>, which is
 * {@link #TRUETYPE_FONT TRUETYPE_FONT} if a TrueType resource is specified.
 * or {@link #TYPE1_FONT TYPE1_FONT} if a Type 1 resource is specified.
 * @param fontStream an <code>InputStream</code> object representing the
 * input data for the font.
 * @return a new <code>Font</code> created with the specified font type.
 * @throws IllegalArgumentException if <code>fontFormat</code> is not
 *     <code>TRUETYPE_FONT</code>or<code>TYPE1_FONT</code>.
 * @throws FontFormatException if the <code>fontStream</code> data does
 *     not contain the required font tables for the specified format.
 * @throws IOException if the <code>fontStream</code>
 *     cannot be completely read.
 * @see GraphicsEnvironment#registerFont(Font)
 * @since 1.3
 */
public static Font createFont(int fontFormat, InputStream fontStream) throws java.awt.FontFormatException, java.io.IOException {
    if (hasTempPermission()) {
        return createFont0(fontFormat, fontStream, null);
    }
    // Otherwise, be extra conscious of pending temp file creation and
    // resourcefully handle the temp file resources, among other things.
    CreatedFontTracker tracker = CreatedFontTracker.getTracker();
    boolean acquired = false;
    try {
        acquired = tracker.acquirePermit();
        if (!acquired) {
            throw new IOException("Timed out waiting for resources.");
        }
        return createFont0(fontFormat, fontStream, tracker);
    } catch (InterruptedException e) {
        throw new IOException("Problem reading font data.");
    } finally {
        if (acquired) {
            tracker.releasePermit();
        }
    }
}