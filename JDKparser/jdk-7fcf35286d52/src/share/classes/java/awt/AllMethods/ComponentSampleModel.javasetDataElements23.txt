/**
 * Sets the data for a single pixel in the specified
 * <code>DataBuffer</code> from a primitive array of type
 * <code>TransferType</code>.  For a <code>ComponentSampleModel</code>,
 * this is the same as the data type, and samples are transferred
 * one per array element.
 * <p>
 * The following code illustrates transferring data for one pixel from
 * <code>DataBuffer</code> <code>db1</code>, whose storage layout is
 * described by <code>ComponentSampleModel</code> <code>csm1</code>,
 * to <code>DataBuffer</code> <code>db2</code>, whose storage layout
 * is described by <code>ComponentSampleModel</code> <code>csm2</code>.
 * The transfer is usually more efficient than using
 * <code>getPixel</code> and <code>setPixel</code>.
 * <pre>
 *       ComponentSampleModel csm1, csm2;
 *       DataBufferInt db1, db2;
 *       csm2.setDataElements(x, y, csm1.getDataElements(x, y, null, db1),
 *                            db2);
 * </pre>
 * Using <code>getDataElements</code> and <code>setDataElements</code>
 * to transfer between two <code>DataBuffer/SampleModel</code> pairs
 * is legitimate if the <code>SampleModel</code> objects have
 * the same number of bands, corresponding bands have the same number of
 * bits per sample, and the <code>TransferType</code>s are the same.
 * <p>
 * A <code>ClassCastException</code> is thrown if <code>obj</code> is not
 * a primitive array of type <code>TransferType</code>.
 * An <code>ArrayIndexOutOfBoundsException</code> might be thrown if
 * the coordinates are not in bounds, or if <code>obj</code> is not large
 * enough to hold the pixel data.
 * @param x         the X coordinate of the pixel location
 * @param y         the Y coordinate of the pixel location
 * @param obj       a primitive array containing pixel data
 * @param data      the DataBuffer containing the image data
 * @see #getDataElements(int, int, Object, DataBuffer)
 */
public void setDataElements(int x, int y, Object obj, DataBuffer data) {
    if ((x < 0) || (y < 0) || (x >= width) || (y >= height)) {
        throw new ArrayIndexOutOfBoundsException("Coordinate out of bounds!");
    }
    int type = getTransferType();
    int numDataElems = getNumDataElements();
    int pixelOffset = y * scanlineStride + x * pixelStride;
    switch(type) {
        case DataBuffer.TYPE_BYTE:
            byte[] barray = (byte[]) obj;
            for (int i = 0; i < numDataElems; i++) {
                data.setElem(bankIndices[i], pixelOffset + bandOffsets[i], ((int) barray[i]) & 0xff);
            }
            break;
        case DataBuffer.TYPE_USHORT:
        case DataBuffer.TYPE_SHORT:
            short[] sarray = (short[]) obj;
            for (int i = 0; i < numDataElems; i++) {
                data.setElem(bankIndices[i], pixelOffset + bandOffsets[i], ((int) sarray[i]) & 0xffff);
            }
            break;
        case DataBuffer.TYPE_INT:
            int[] iarray = (int[]) obj;
            for (int i = 0; i < numDataElems; i++) {
                data.setElem(bankIndices[i], pixelOffset + bandOffsets[i], iarray[i]);
            }
            break;
        case DataBuffer.TYPE_FLOAT:
            float[] farray = (float[]) obj;
            for (int i = 0; i < numDataElems; i++) {
                data.setElemFloat(bankIndices[i], pixelOffset + bandOffsets[i], farray[i]);
            }
            break;
        case DataBuffer.TYPE_DOUBLE:
            double[] darray = (double[]) obj;
            for (int i = 0; i < numDataElems; i++) {
                data.setElemDouble(bankIndices[i], pixelOffset + bandOffsets[i], darray[i]);
            }
            break;
    }
}