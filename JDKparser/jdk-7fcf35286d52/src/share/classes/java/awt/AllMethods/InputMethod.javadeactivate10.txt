/**
 * Deactivates the input method.
 * The isTemporary argument has the same meaning as in
 * {@link java.awt.event.FocusEvent#isTemporary FocusEvent.isTemporary}.
 * <p>
 * If an input method provides its own windows, only windows that relate
 * to the current composition (such as a lookup choice window) should be
 * closed at this point.
 * It is possible that the input method will be immediately activated again
 * for a different client component, and closing and reopening more
 * persistent windows (such as a control panel) would create unnecessary
 * screen flicker.
 * Before an instance of a different input method class is activated,
 * {@link #hideWindows} is called on the current input method.
 * <p>
 * This method is called
 * <ul>
 * <li>by {@link java.awt.im.InputContext#dispatchEvent InputContext.dispatchEvent}
 *     when a client component receives a FOCUS_LOST event,
 * <li>when switching from this input method to a different one using the
 *     user interface or
 *     {@link java.awt.im.InputContext#selectInputMethod InputContext.selectInputMethod},
 * <li>before {@link #removeNotify removeNotify} if the current client component is
 *     removed.
 * </ul>
 * The method is only called when the input method is active.
 *
 * @param isTemporary whether the focus change is temporary
 */
public void deactivate(boolean isTemporary);