/**
 * {@inheritDoc}
 */
@Override
public boolean enter() {
    if (log.isLoggable(PlatformLogger.Level.FINE)) {
        log.fine("enter(): blockingEDT=" + keepBlockingEDT.get() + ", blockingCT=" + keepBlockingCT.get());
    }
    if (!keepBlockingEDT.compareAndSet(false, true)) {
        log.fine("The secondary loop is already running, aborting");
        return false;
    }
    try {
        if (afterExit.get()) {
            log.fine("Exit was called already, aborting");
            return false;
        }
        final Runnable run = new Runnable() {

            public void run() {
                log.fine("Starting a new event pump");
                if (filter == null) {
                    dispatchThread.pumpEvents(condition);
                } else {
                    dispatchThread.pumpEventsForFilter(condition, filter);
                }
            }
        };
        // We have two mechanisms for blocking: if we're on the
        // dispatch thread, start a new event pump; if we're
        // on any other thread, call wait() on the treelock
        Thread currentThread = Thread.currentThread();
        if (currentThread == dispatchThread) {
            if (log.isLoggable(PlatformLogger.Level.FINEST)) {
                log.finest("On dispatch thread: " + dispatchThread);
            }
            if (interval != 0) {
                if (log.isLoggable(PlatformLogger.Level.FINEST)) {
                    log.finest("scheduling the timer for " + interval + " ms");
                }
                timer.schedule(timerTask = new TimerTask() {

                    @Override
                    public void run() {
                        if (keepBlockingEDT.compareAndSet(true, false)) {
                            wakeupEDT();
                        }
                    }
                }, interval);
            }
            // Dispose SequencedEvent we are dispatching on the current
            // AppContext, to prevent us from hang - see 4531693 for details
            SequencedEvent currentSE = KeyboardFocusManager.getCurrentKeyboardFocusManager().getCurrentSequencedEvent();
            if (currentSE != null) {
                if (log.isLoggable(PlatformLogger.Level.FINE)) {
                    log.fine("Dispose current SequencedEvent: " + currentSE);
                }
                currentSE.dispose();
            }
            // In case the exit() method is called before starting
            // new event pump it will post the waking event to EDT.
            // The event will be handled after the new event pump
            // starts. Thus, the enter() method will not hang.
            // 
            // Event pump should be privileged. See 6300270.
            AccessController.doPrivileged(new PrivilegedAction<Void>() {

                public Void run() {
                    run.run();
                    return null;
                }
            });
        } else {
            if (log.isLoggable(PlatformLogger.Level.FINEST)) {
                log.finest("On non-dispatch thread: " + currentThread);
            }
            keepBlockingCT.set(true);
            synchronized (getTreeLock()) {
                if (afterExit.get())
                    return false;
                if (filter != null) {
                    dispatchThread.addEventFilter(filter);
                }
                try {
                    EventQueue eq = dispatchThread.getEventQueue();
                    eq.postEvent(new PeerEvent(this, run, PeerEvent.PRIORITY_EVENT));
                    if (interval > 0) {
                        long currTime = System.currentTimeMillis();
                        while (keepBlockingCT.get() && ((extCondition != null) ? extCondition.evaluate() : true) && (currTime + interval > System.currentTimeMillis())) {
                            getTreeLock().wait(interval);
                        }
                    } else {
                        while (keepBlockingCT.get() && ((extCondition != null) ? extCondition.evaluate() : true)) {
                            getTreeLock().wait();
                        }
                    }
                    if (log.isLoggable(PlatformLogger.Level.FINE)) {
                        log.fine("waitDone " + keepBlockingEDT.get() + " " + keepBlockingCT.get());
                    }
                } catch (InterruptedException e) {
                    if (log.isLoggable(PlatformLogger.Level.FINE)) {
                        log.fine("Exception caught while waiting: " + e);
                    }
                } finally {
                    if (filter != null) {
                        dispatchThread.removeEventFilter(filter);
                    }
                }
            }
        }
        return true;
    } finally {
        keepBlockingEDT.set(false);
        keepBlockingCT.set(false);
        afterExit.set(false);
    }
}