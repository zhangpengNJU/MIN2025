/**
 * Gets a <code>PrintJob</code> object which is the result of initiating
 * a print operation on the toolkit's platform.
 * <p>
 * Each actual implementation of this method should first check if there
 * is a security manager installed. If there is, the method should call
 * the security manager's <code>checkPrintJobAccess</code> method to
 * ensure initiation of a print operation is allowed. If the default
 * implementation of <code>checkPrintJobAccess</code> is used (that is,
 * that method is not overriden), then this results in a call to the
 * security manager's <code>checkPermission</code> method with a <code>
 * RuntimePermission("queuePrintJob")</code> permission.
 *
 * @param   frame the parent of the print dialog. May not be null.
 * @param   jobtitle the title of the PrintJob. A null title is equivalent
 *          to "".
 * @param   props a Properties object containing zero or more properties.
 *          Properties are not standardized and are not consistent across
 *          implementations. Because of this, PrintJobs which require job
 *          and page control should use the version of this function which
 *          takes JobAttributes and PageAttributes objects. This object
 *          may be updated to reflect the user's job choices on exit. May
 *          be null.
 * @return  a <code>PrintJob</code> object, or <code>null</code> if the
 *          user cancelled the print job.
 * @throws  NullPointerException if frame is null
 * @throws  SecurityException if this thread is not allowed to initiate a
 *          print job request
 * @see     java.awt.GraphicsEnvironment#isHeadless
 * @see     java.awt.PrintJob
 * @see     java.lang.RuntimePermission
 * @since   JDK1.1
 */
public abstract PrintJob getPrintJob(Frame frame, String jobtitle, Properties props);