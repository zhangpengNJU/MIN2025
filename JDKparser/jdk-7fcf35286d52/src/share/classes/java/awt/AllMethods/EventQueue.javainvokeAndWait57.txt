/**
 * Causes <code>runnable</code> to have its <code>run</code>
 * method called in the {@link #isDispatchThread dispatch thread} of
 * {@link Toolkit#getSystemEventQueue the system EventQueue}.
 * This will happen after all pending events are processed.
 * The call blocks until this has happened.  This method
 * will throw an Error if called from the
 * {@link #isDispatchThread event dispatcher thread}.
 *
 * @param runnable  the <code>Runnable</code> whose <code>run</code>
 *                  method should be executed
 *                  synchronously in the
 *                  {@link #isDispatchThread event dispatch thread}
 *                  of {@link Toolkit#getSystemEventQueue the system EventQueue}
 * @exception       InterruptedException  if any thread has
 *                  interrupted this thread
 * @exception       InvocationTargetException  if an throwable is thrown
 *                  when running <code>runnable</code>
 * @see             #invokeLater
 * @see             Toolkit#getSystemEventQueue
 * @see             #isDispatchThread
 * @since           1.2
 */
public static void invokeAndWait(Runnable runnable) throws InterruptedException, InvocationTargetException {
    invokeAndWait(Toolkit.getDefaultToolkit(), runnable);
}