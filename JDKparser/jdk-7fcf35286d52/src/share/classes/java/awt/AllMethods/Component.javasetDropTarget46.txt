/**
 * Associate a <code>DropTarget</code> with this component.
 * The <code>Component</code> will receive drops only if it
 * is enabled.
 *
 * @see #isEnabled
 * @param dt The DropTarget
 */
public synchronized void setDropTarget(DropTarget dt) {
    if (dt == dropTarget || (dropTarget != null && dropTarget.equals(dt)))
        return;
    DropTarget old;
    if ((old = dropTarget) != null) {
        if (peer != null)
            dropTarget.removeNotify(peer);
        DropTarget t = dropTarget;
        dropTarget = null;
        try {
            t.setComponent(null);
        } catch (IllegalArgumentException iae) {
        // ignore it.
        }
    }
    // if we have a new one, and we have a peer, add it!
    if ((dropTarget = dt) != null) {
        try {
            dropTarget.setComponent(this);
            if (peer != null)
                dropTarget.addNotify(peer);
        } catch (IllegalArgumentException iae) {
            if (old != null) {
                try {
                    old.setComponent(this);
                    if (peer != null)
                        dropTarget.addNotify(peer);
                } catch (IllegalArgumentException iae1) {
                // ignore it!
                }
            }
        }
    }
}