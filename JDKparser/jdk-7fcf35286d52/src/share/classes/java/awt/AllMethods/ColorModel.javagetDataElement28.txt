/**
 * Returns a pixel value represented as an <code>int</code> in this
 * <code>ColorModel</code>, given an array of unnormalized color/alpha
 * components.  This method will throw an
 * <code>IllegalArgumentException</code> if component values for this
 * <code>ColorModel</code> are not conveniently representable as a
 * single <code>int</code> or if color component values for this
 * <code>ColorModel</code> are not conveniently representable in the
 * unnormalized form.  An
 * <code>ArrayIndexOutOfBoundsException</code> is thrown if  the
 * <code>components</code> array is not large enough to hold all the
 * color and alpha components (starting at <code>offset</code>).
 * Since <code>ColorModel</code> is an abstract class,
 * any instance is an instance of a subclass.  Subclasses must
 * override this method since the implementation in this abstract
 * class throws an <code>UnsupportedOperationException</code>.
 * @param components an array of unnormalized color and alpha
 * components
 * @param offset the index into <code>components</code> at which to
 * begin retrieving the color and alpha components
 * @return an <code>int</code> pixel value in this
 * <code>ColorModel</code> corresponding to the specified components.
 * @throws IllegalArgumentException if
 *  pixel values for this <code>ColorModel</code> are not
 *  conveniently representable as a single <code>int</code>
 * @throws IllegalArgumentException if
 *  component values for this <code>ColorModel</code> are not
 *  conveniently representable in the unnormalized form
 * @throws ArrayIndexOutOfBoundsException if
 *  the <code>components</code> array is not large enough to
 *  hold all of the color and alpha components starting at
 *  <code>offset</code>
 * @throws UnsupportedOperationException if this
 *  method is not supported by this <code>ColorModel</code>
 */
public int getDataElement(int[] components, int offset) {
    throw new UnsupportedOperationException("This method is not supported " + "by this color model.");
}