/**
 * Draws a 3-D highlighted outline of the specified rectangle.
 * The edges of the rectangle are highlighted so that they
 * appear to be beveled and lit from the upper left corner.
 * <p>
 * The colors used for the highlighting effect are determined
 * based on the current color.
 * The resulting rectangle covers an area that is
 * <code>width&nbsp;+&nbsp;1</code> pixels wide
 * by <code>height&nbsp;+&nbsp;1</code> pixels tall.  This method
 * uses the current <code>Color</code> exclusively and ignores
 * the current <code>Paint</code>.
 * @param x the x coordinate of the rectangle to be drawn.
 * @param y the y coordinate of the rectangle to be drawn.
 * @param width the width of the rectangle to be drawn.
 * @param height the height of the rectangle to be drawn.
 * @param raised a boolean that determines whether the rectangle
 *                      appears to be raised above the surface
 *                      or sunk into the surface.
 * @see         java.awt.Graphics#fill3DRect
 */
public void draw3DRect(int x, int y, int width, int height, boolean raised) {
    Paint p = getPaint();
    Color c = getColor();
    Color brighter = c.brighter();
    Color darker = c.darker();
    setColor(raised ? brighter : darker);
    // drawLine(x, y, x, y + height);
    fillRect(x, y, 1, height + 1);
    // drawLine(x + 1, y, x + width - 1, y);
    fillRect(x + 1, y, width - 1, 1);
    setColor(raised ? darker : brighter);
    // drawLine(x + 1, y + height, x + width, y + height);
    fillRect(x + 1, y + height, width, 1);
    // drawLine(x + width, y, x + width, y + height - 1);
    fillRect(x + width, y, 1, height);
    setPaint(p);
}