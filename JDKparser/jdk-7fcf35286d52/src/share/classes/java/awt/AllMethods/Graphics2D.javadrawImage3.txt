/**
 * Renders an image, applying a transform from image space into user space
 * before drawing.
 * The transformation from user space into device space is done with
 * the current <code>Transform</code> in the <code>Graphics2D</code>.
 * The specified transformation is applied to the image before the
 * transform attribute in the <code>Graphics2D</code> context is applied.
 * The rendering attributes applied include the <code>Clip</code>,
 * <code>Transform</code>, and <code>Composite</code> attributes.
 * Note that no rendering is done if the specified transform is
 * noninvertible.
 * @param img the specified image to be rendered.
 *            This method does nothing if <code>img</code> is null.
 * @param xform the transformation from image space into user space
 * @param obs the {@link ImageObserver}
 * to be notified as more of the <code>Image</code>
 * is converted
 * @return <code>true</code> if the <code>Image</code> is
 * fully loaded and completely rendered, or if it's null;
 * <code>false</code> if the <code>Image</code> is still being loaded.
 * @see #transform
 * @see #setTransform
 * @see #setComposite
 * @see #clip
 * @see #setClip
 */
public abstract boolean drawImage(Image img, AffineTransform xform, ImageObserver obs);