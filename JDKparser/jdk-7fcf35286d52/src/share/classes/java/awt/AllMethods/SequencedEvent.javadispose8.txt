/**
 * Disposes of this instance. This method is invoked once the nested event
 * has been dispatched and handled, or when the peer of the target of the
 * nested event has been disposed with a call to Component.removeNotify.
 *
 * NOTE: Locking protocol.  Since SunToolkit.postEvent can get EventQueue lock,
 * it shall never be called while holding the lock on the list,
 * as EventQueue lock is held during dispatching and dispatch() will get
 * lock on the list. The locks should be acquired in the same order.
 */
final void dispose() {
    synchronized (SequencedEvent.class) {
        if (disposed) {
            return;
        }
        if (KeyboardFocusManager.getCurrentKeyboardFocusManager().getCurrentSequencedEvent() == this) {
            KeyboardFocusManager.getCurrentKeyboardFocusManager().setCurrentSequencedEvent(null);
        }
        disposed = true;
    }
    SequencedEvent next = null;
    synchronized (SequencedEvent.class) {
        SequencedEvent.class.notifyAll();
        if (list.getFirst() == this) {
            list.removeFirst();
            if (!list.isEmpty()) {
                next = (SequencedEvent) list.getFirst();
            }
        } else {
            list.remove(this);
        }
    }
    // Wake up waiting threads
    if (next != null && next.appContext != null) {
        SunToolkit.postEvent(next.appContext, new SentEvent());
    }
    for (AWTEvent e : pendingEvents) {
        SunToolkit.postEvent(appContext, e);
    }
}