/**
 * Returns an array of all of the color/alpha components in normalized
 * form, given an unnormalized component array.  Unnormalized components
 * are unsigned integral values between 0 and 2<sup>n</sup> - 1, where
 * n is the number of bits for a particular component.  Normalized
 * components are float values between a per component minimum and
 * maximum specified by the <code>ColorSpace</code> object for this
 * <code>ColorModel</code>.  An <code>IllegalArgumentException</code>
 * will be thrown if color component values for this
 * <code>ColorModel</code> are not conveniently representable in the
 * unnormalized form.  If the
 * <code>normComponents</code> array is <code>null</code>, a new array
 * will be allocated.  The <code>normComponents</code> array
 * will be returned.  Color/alpha components are stored in the
 * <code>normComponents</code> array starting at
 * <code>normOffset</code> (even if the array is allocated by this
 * method).  An <code>ArrayIndexOutOfBoundsException</code> is thrown
 * if the <code>normComponents</code> array is not <code>null</code>
 * and is not large enough to hold all the color and alpha components
 * (starting at <code>normOffset</code>).  An
 * <code>IllegalArgumentException</code> is thrown if the
 * <code>components</code> array is not large enough to hold all the
 * color and alpha components starting at <code>offset</code>.
 * <p>
 * Since <code>ColorModel</code> is an abstract class,
 * any instance is an instance of a subclass.  The default implementation
 * of this method in this abstract class assumes that component values
 * for this class are conveniently representable in the unnormalized
 * form.  Therefore, subclasses which may
 * have instances which do not support the unnormalized form must
 * override this method.
 * @param components an array containing unnormalized components
 * @param offset the offset into the <code>components</code> array at
 * which to start retrieving unnormalized components
 * @param normComponents an array that receives the normalized components
 * @param normOffset the index into <code>normComponents</code> at
 * which to begin storing normalized components
 * @return an array containing normalized color and alpha
 * components.
 * @throws IllegalArgumentException If the component values for this
 * <CODE>ColorModel</CODE> are not conveniently representable in the
 * unnormalized form.
 * @throws UnsupportedOperationException if the
 *          constructor of this <code>ColorModel</code> called the
 *          <code>super(bits)</code> constructor, but did not
 *          override this method.  See the constructor,
 *          {@link #ColorModel(int)}.
 * @throws UnsupportedOperationException if this method is unable
 *          to determine the number of bits per component
 */
public float[] getNormalizedComponents(int[] components, int offset, float[] normComponents, int normOffset) {
    // Make sure that someone isn't using a custom color model
    // that called the super(bits) constructor.
    if (colorSpace == null) {
        throw new UnsupportedOperationException("This method is not supported by " + "this color model.");
    }
    if (nBits == null) {
        throw new UnsupportedOperationException("This method is not supported.  " + "Unable to determine #bits per " + "component.");
    }
    if ((components.length - offset) < numComponents) {
        throw new IllegalArgumentException("Incorrect number of components.  Expecting " + numComponents);
    }
    if (normComponents == null) {
        normComponents = new float[numComponents + normOffset];
    }
    if (supportsAlpha && isAlphaPremultiplied) {
        // Normalized coordinates are non premultiplied
        float normAlpha = (float) components[offset + numColorComponents];
        normAlpha /= (float) ((1 << nBits[numColorComponents]) - 1);
        if (normAlpha != 0.0f) {
            for (int i = 0; i < numColorComponents; i++) {
                normComponents[normOffset + i] = ((float) components[offset + i]) / (normAlpha * ((float) ((1 << nBits[i]) - 1)));
            }
        } else {
            for (int i = 0; i < numColorComponents; i++) {
                normComponents[normOffset + i] = 0.0f;
            }
        }
        normComponents[normOffset + numColorComponents] = normAlpha;
    } else {
        for (int i = 0; i < numComponents; i++) {
            normComponents[normOffset + i] = ((float) components[offset + i]) / ((float) ((1 << nBits[i]) - 1));
        }
    }
    return normComponents;
}