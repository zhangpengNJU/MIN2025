/**
 * Returns the position at the end of the next layout.  Does NOT
 * update the current position of this <code>LineBreakMeasurer</code>.
 *
 * @param wrappingWidth the maximum visible advance permitted for
 *    the text in the next layout
 * @param offsetLimit the first character that can not be included
 *    in the next layout, even if the text after the limit would fit
 *    within the wrapping width; <code>offsetLimit</code> must be
 *    greater than the current position
 * @param requireNextWord if <code>true</code>, the current position
 *    that is returned if the entire next word does not fit within
 *    <code>wrappingWidth</code>; if <code>false</code>, the offset
 *    returned is at least one greater than the current position
 * @return an offset in the text representing the limit of the
 *    next <code>TextLayout</code>
 */
public int nextOffset(float wrappingWidth, int offsetLimit, boolean requireNextWord) {
    int nextOffset = pos;
    if (pos < limit) {
        if (offsetLimit <= pos) {
            throw new IllegalArgumentException("offsetLimit must be after current position");
        }
        int charAtMaxAdvance = measurer.getLineBreakIndex(pos, wrappingWidth);
        if (charAtMaxAdvance == limit) {
            nextOffset = limit;
        } else if (Character.isWhitespace(measurer.getChars()[charAtMaxAdvance - start])) {
            nextOffset = breakIter.following(charAtMaxAdvance);
        } else {
            // Break is in a word;  back up to previous break.
            // NOTE:  I think that breakIter.preceding(limit) should be
            // equivalent to breakIter.last(), breakIter.previous() but
            // the authors of BreakIterator thought otherwise...
            // If they were equivalent then the first branch would be
            // unnecessary.
            int testPos = charAtMaxAdvance + 1;
            if (testPos == limit) {
                breakIter.last();
                nextOffset = breakIter.previous();
            } else {
                nextOffset = breakIter.preceding(testPos);
            }
            if (nextOffset <= pos) {
                // first word doesn't fit on line
                if (requireNextWord) {
                    nextOffset = pos;
                } else {
                    nextOffset = Math.max(pos + 1, charAtMaxAdvance);
                }
            }
        }
    }
    if (nextOffset > offsetLimit) {
        nextOffset = offsetLimit;
    }
    return nextOffset;
}