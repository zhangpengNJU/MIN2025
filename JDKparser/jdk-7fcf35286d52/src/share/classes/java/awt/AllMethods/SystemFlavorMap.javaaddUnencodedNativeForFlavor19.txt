/**
 * Adds a mapping from the specified <code>DataFlavor</code> (and all
 * <code>DataFlavor</code>s equal to the specified <code>DataFlavor</code>)
 * to the specified <code>String</code> native.
 * Unlike <code>getNativesForFlavor</code>, the mapping will only be
 * established in one direction, and the native will not be encoded. To
 * establish a two-way mapping, call
 * <code>addFlavorForUnencodedNative</code> as well. The new mapping will
 * be of lower priority than any existing mapping.
 * This method has no effect if a mapping from the specified or equal
 * <code>DataFlavor</code> to the specified <code>String</code> native
 * already exists.
 *
 * @param flav the <code>DataFlavor</code> key for the mapping
 * @param nat the <code>String</code> native value for the mapping
 * @throws NullPointerException if flav or nat is <code>null</code>
 *
 * @see #addFlavorForUnencodedNative
 * @since 1.4
 */
public synchronized void addUnencodedNativeForFlavor(DataFlavor flav, String nat) {
    Objects.requireNonNull(nat, "Null native not permitted");
    Objects.requireNonNull(flav, "Null flavor not permitted");
    LinkedHashSet<String> natives = getFlavorToNative().get(flav);
    if (natives == null) {
        natives = new LinkedHashSet<>(1);
        getFlavorToNative().put(flav, natives);
    }
    natives.add(nat);
    nativesForFlavorCache.remove(flav);
}