/**
 * Prints a file with the native desktop printing facility, using
 * the associated application's print command.
 *
 * @param file the file to be printed
 * @throws NullPointerException if the specified file is {@code
 * null}
 * @throws IllegalArgumentException if the specified file doesn't
 * exist
 * @throws UnsupportedOperationException if the current platform
 *         does not support the {@link Desktop.Action#PRINT} action
 * @throws IOException if the specified file has no associated
 * application that can be used to print it
 * @throws SecurityException if a security manager exists and its
 * {@link java.lang.SecurityManager#checkRead(java.lang.String)}
 * method denies read access to the file, or its {@link
 * java.lang.SecurityManager#checkPrintJobAccess()} method denies
 * the permission to print the file, or the calling thread is not
 * allowed to create a subprocess
 */
public void print(File file) throws IOException {
    file = new File(file.getPath());
    checkExec();
    SecurityManager sm = System.getSecurityManager();
    if (sm != null) {
        sm.checkPrintJobAccess();
    }
    checkActionSupport(Action.PRINT);
    checkFileValidation(file);
    peer.print(file);
}