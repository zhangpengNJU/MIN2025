/**
 * Copied code from java.util.Properties. Parsing the data ourselves is the
 * only way to handle duplicate keys and values.
 */
private void parseAndStoreReader(BufferedReader in) throws IOException {
    while (true) {
        // Get next line
        String line = in.readLine();
        if (line == null) {
            return;
        }
        if (line.length() > 0) {
            // Continue lines that end in slashes if they are not comments
            char firstChar = line.charAt(0);
            if (firstChar != '#' && firstChar != '!') {
                while (continueLine(line)) {
                    String nextLine = in.readLine();
                    if (nextLine == null) {
                        nextLine = "";
                    }
                    String loppedLine = line.substring(0, line.length() - 1);
                    // Advance beyond whitespace on new line
                    int startIndex = 0;
                    for (; startIndex < nextLine.length(); startIndex++) {
                        if (whiteSpaceChars.indexOf(nextLine.charAt(startIndex)) == -1) {
                            break;
                        }
                    }
                    nextLine = nextLine.substring(startIndex, nextLine.length());
                    line = loppedLine + nextLine;
                }
                // Find start of key
                int len = line.length();
                int keyStart = 0;
                for (; keyStart < len; keyStart++) {
                    if (whiteSpaceChars.indexOf(line.charAt(keyStart)) == -1) {
                        break;
                    }
                }
                // Blank lines are ignored
                if (keyStart == len) {
                    continue;
                }
                // Find separation between key and value
                int separatorIndex = keyStart;
                for (; separatorIndex < len; separatorIndex++) {
                    char currentChar = line.charAt(separatorIndex);
                    if (currentChar == '\\') {
                        separatorIndex++;
                    } else if (keyValueSeparators.indexOf(currentChar) != -1) {
                        break;
                    }
                }
                // Skip over whitespace after key if any
                int valueIndex = separatorIndex;
                for (; valueIndex < len; valueIndex++) {
                    if (whiteSpaceChars.indexOf(line.charAt(valueIndex)) == -1) {
                        break;
                    }
                }
                // Skip over one non whitespace key value separators if any
                if (valueIndex < len) {
                    if (strictKeyValueSeparators.indexOf(line.charAt(valueIndex)) != -1) {
                        valueIndex++;
                    }
                }
                // Skip over white space after other separators if any
                while (valueIndex < len) {
                    if (whiteSpaceChars.indexOf(line.charAt(valueIndex)) == -1) {
                        break;
                    }
                    valueIndex++;
                }
                String key = line.substring(keyStart, separatorIndex);
                String value = (separatorIndex < len) ? line.substring(valueIndex, len) : "";
                // Convert then store key and value
                key = loadConvert(key);
                value = loadConvert(value);
                try {
                    MimeType mime = new MimeType(value);
                    if ("text".equals(mime.getPrimaryType())) {
                        String charset = mime.getParameter("charset");
                        if (DataTransferer.doesSubtypeSupportCharset(mime.getSubType(), charset)) {
                            // We need to store the charset and eoln
                            // parameters, if any, so that the
                            // DataTransferer will have this information
                            // for conversion into the native format.
                            DataTransferer transferer = DataTransferer.getInstance();
                            if (transferer != null) {
                                transferer.registerTextFlavorProperties(key, charset, mime.getParameter("eoln"), mime.getParameter("terminators"));
                            }
                        }
                        // But don't store any of these parameters in the
                        // DataFlavor itself for any text natives (even
                        // non-charset ones). The SystemFlavorMap will
                        // synthesize the appropriate mappings later.
                        mime.removeParameter("charset");
                        mime.removeParameter("class");
                        mime.removeParameter("eoln");
                        mime.removeParameter("terminators");
                        value = mime.toString();
                    }
                } catch (MimeTypeParseException e) {
                    e.printStackTrace();
                    continue;
                }
                DataFlavor flavor;
                try {
                    flavor = new DataFlavor(value);
                } catch (Exception e) {
                    try {
                        flavor = new DataFlavor(value, null);
                    } catch (Exception ee) {
                        ee.printStackTrace();
                        continue;
                    }
                }
                final LinkedHashSet<DataFlavor> dfs = new LinkedHashSet<>();
                dfs.add(flavor);
                if ("text".equals(flavor.getPrimaryType())) {
                    dfs.addAll(convertMimeTypeToDataFlavors(value));
                    store(flavor.mimeType.getBaseType(), key, getTextTypeToNative());
                }
                for (DataFlavor df : dfs) {
                    store(df, key, getFlavorToNative());
                    store(key, df, getNativeToFlavor());
                }
            }
        }
    }
}