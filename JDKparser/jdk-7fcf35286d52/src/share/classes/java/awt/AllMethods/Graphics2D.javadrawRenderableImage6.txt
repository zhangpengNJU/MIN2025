/**
 *  Renders a
 *  {@link RenderableImage},
 *  applying a transform from image space into user space before drawing.
 *  The transformation from user space into device space is done with
 *  the current <code>Transform</code> in the <code>Graphics2D</code>.
 *  The specified transformation is applied to the image before the
 *  transform attribute in the <code>Graphics2D</code> context is applied.
 *  The rendering attributes applied include the <code>Clip</code>,
 *  <code>Transform</code>, and <code>Composite</code> attributes. Note
 *  that no rendering is done if the specified transform is
 *  noninvertible.
 * <p>
 *  Rendering hints set on the <code>Graphics2D</code> object might
 *  be used in rendering the <code>RenderableImage</code>.
 *  If explicit control is required over specific hints recognized by a
 *  specific <code>RenderableImage</code>, or if knowledge of which hints
 *  are used is required, then a <code>RenderedImage</code> should be
 *  obtained directly from the <code>RenderableImage</code>
 *  and rendered using
 * {@link #drawRenderedImage(RenderedImage, AffineTransform) drawRenderedImage}.
 *  @param img the image to be rendered. This method does
 *             nothing if <code>img</code> is null.
 *  @param xform the transformation from image space into user space
 *  @see #transform
 *  @see #setTransform
 *  @see #setComposite
 *  @see #clip
 *  @see #setClip
 *  @see #drawRenderedImage
 */
public abstract void drawRenderableImage(RenderableImage img, AffineTransform xform);