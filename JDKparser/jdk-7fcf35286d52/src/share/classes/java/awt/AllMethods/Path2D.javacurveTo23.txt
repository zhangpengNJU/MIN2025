/**
 * Adds a curved segment, defined by three new points, to the path by
 * drawing a B&eacute;zier curve that intersects both the current
 * coordinates and the specified coordinates {@code (x3,y3)},
 * using the specified points {@code (x1,y1)} and {@code (x2,y2)} as
 * B&eacute;zier control points.
 * All coordinates are specified in float precision.
 * <p>
 * This method provides a single precision variant of
 * the double precision {@code curveTo()} method on the
 * base {@code Path2D} class.
 *
 * @param x1 the X coordinate of the first B&eacute;zier control point
 * @param y1 the Y coordinate of the first B&eacute;zier control point
 * @param x2 the X coordinate of the second B&eacute;zier control point
 * @param y2 the Y coordinate of the second B&eacute;zier control point
 * @param x3 the X coordinate of the final end point
 * @param y3 the Y coordinate of the final end point
 * @see Path2D#curveTo
 * @since 1.6
 */
public final synchronized void curveTo(float x1, float y1, float x2, float y2, float x3, float y3) {
    needRoom(true, 6);
    pointTypes[numTypes++] = SEG_CUBICTO;
    floatCoords[numCoords++] = x1;
    floatCoords[numCoords++] = y1;
    floatCoords[numCoords++] = x2;
    floatCoords[numCoords++] = y2;
    floatCoords[numCoords++] = x3;
    floatCoords[numCoords++] = y3;
}