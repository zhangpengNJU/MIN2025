/**
 * Start a drag, given the <code>DragGestureEvent</code>
 * that initiated the drag, the initial <code>Cursor</code>
 * to use,
 * the <code>Image</code> to drag,
 * the offset of the <code>Image</code> origin
 * from the hotspot of the <code>Cursor</code>
 * at the instant of the trigger,
 * the subject data of the drag, and
 * the <code>DragSourceListener</code>.
 * <P>
 * @param trigger           the <code>DragGestureEvent</code> that initiated the drag
 * @param dragCursor     the initial {@code Cursor} for this drag operation
 *                       or {@code null} for the default cursor handling;
 *                       see <a href="DragSourceContext.html#defaultCursor">DragSourceContext</a>
 *                       for more details on the cursor handling mechanism during drag and drop
 * @param dragImage         the <code>Image</code> to drag or <code>null</code>
 * @param dragOffset        the offset of the <code>Image</code> origin from the hotspot
 *                          of the <code>Cursor</code> at the instant of the trigger
 * @param transferable      the subject data of the drag
 * @param dsl               the <code>DragSourceListener</code>
 * <P>
 * @throws java.awt.dnd.InvalidDnDOperationException
 *    if the Drag and Drop
 *    system is unable to initiate a drag operation, or if the user
 *    attempts to start a drag while an existing drag operation
 *    is still executing
 */
public void startDrag(DragGestureEvent trigger, Cursor dragCursor, Image dragImage, Point dragOffset, Transferable transferable, DragSourceListener dsl) throws InvalidDnDOperationException {
    startDrag(trigger, dragCursor, dragImage, dragOffset, transferable, dsl, null);
}