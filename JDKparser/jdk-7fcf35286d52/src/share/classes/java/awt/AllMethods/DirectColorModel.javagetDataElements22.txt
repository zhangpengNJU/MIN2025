/**
 * Returns a data element array representation of a pixel in this
 * <code>ColorModel</code>, given an array of unnormalized color/alpha
 * components.
 * This array can then be passed to the <code>setDataElements</code>
 * method of a <code>WritableRaster</code> object.
 * An <code>ArrayIndexOutOfBoundsException</code> is thrown if the
 * <code>components</code> array
 * is not large enough to hold all the color and alpha components,
 * starting at offset.  If the <code>obj</code> variable is
 * <code>null</code>, a new array is allocated.  If <code>obj</code> is
 * not <code>null</code>, it must be a primitive array
 * of type <code>transferType</code>; otherwise, a
 * <code>ClassCastException</code> is thrown.
 * An <code>ArrayIndexOutOfBoundsException</code> is thrown if
 * <code>obj</code> is not large enough to hold a pixel value for this
 * <code>ColorModel</code>.
 * Since <code>DirectColorModel</code> can be subclassed, subclasses
 * inherit the implementation of this method and if they don't
 * override it then they throw an exception if they use an unsupported
 * <code>transferType</code>.
 * @param components an array of unnormalized color and alpha
 * components
 * @param offset the index into <code>components</code> at which to
 * begin retrieving color and alpha components
 * @param obj the <code>Object</code> representing an array of color
 * and alpha components
 * @return an <code>Object</code> representing an array of color and
 * alpha components.
 * @exception ClassCastException if <code>obj</code>
 *  is not a primitive array of type <code>transferType</code>
 * @exception ArrayIndexOutOfBoundsException if
 *  <code>obj</code> is not large enough to hold a pixel value
 *  for this <code>ColorModel</code> or the <code>components</code>
 *  array is not large enough to hold all of the color and alpha
 *  components starting at <code>offset</code>
 * @exception UnsupportedOperationException if this
 *            <code>transferType</code> is not supported by this
 *            color model
 * @see WritableRaster#setDataElements
 * @see SampleModel#setDataElements
 */
public Object getDataElements(int[] components, int offset, Object obj) {
    int pixel = 0;
    for (int i = 0; i < numComponents; i++) {
        pixel |= ((components[offset + i] << maskOffsets[i]) & maskArray[i]);
    }
    switch(transferType) {
        case DataBuffer.TYPE_BYTE:
            if (obj instanceof byte[]) {
                byte[] bdata = (byte[]) obj;
                bdata[0] = (byte) (pixel & 0xff);
                return bdata;
            } else {
                byte[] bdata = { (byte) (pixel & 0xff) };
                return bdata;
            }
        case DataBuffer.TYPE_USHORT:
            if (obj instanceof short[]) {
                short[] sdata = (short[]) obj;
                sdata[0] = (short) (pixel & 0xffff);
                return sdata;
            } else {
                short[] sdata = { (short) (pixel & 0xffff) };
                return sdata;
            }
        case DataBuffer.TYPE_INT:
            if (obj instanceof int[]) {
                int[] idata = (int[]) obj;
                idata[0] = pixel;
                return idata;
            } else {
                int[] idata = { pixel };
                return idata;
            }
        default:
            throw new ClassCastException("This method has not been " + "implemented for transferType " + transferType);
    }
}