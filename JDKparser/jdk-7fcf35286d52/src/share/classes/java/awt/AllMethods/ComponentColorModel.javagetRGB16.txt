/**
 * Returns the color/alpha components for the specified pixel in the
 * default RGB color model format.  A color conversion is done if
 * necessary.  The pixel value is specified by an
 * array of data elements of type <CODE>transferType</CODE> passed
 * in as an object reference.
 * The returned value is in a non pre-multiplied format. If
 * the alpha is premultiplied, this method divides it out of the
 * color components (if the alpha value is 0, the color values will be 0).
 * Since <code>ComponentColorModel</code> can be subclassed,
 * subclasses inherit the implementation of this method and if they
 * don't override it then they throw an exception if they use an
 * unsupported <code>transferType</code>.
 *
 * @param inData The pixel from which you want to get the color/alpha components,
 * specified by an array of data elements of type <CODE>transferType</CODE>.
 *
 * @return The color/alpha components for the specified pixel, as an int.
 *
 * @throws ClassCastException If <CODE>inData</CODE> is not a primitive array
 * of type <CODE>transferType</CODE>.
 * @throws ArrayIndexOutOfBoundsException if <CODE>inData</CODE> is not
 * large enough to hold a pixel value for this
 * <CODE>ColorModel</CODE>.
 * @throws UnsupportedOperationException If the transfer type of
 * this <CODE>ComponentColorModel</CODE>
 * is not one of the supported transfer types:
 * <CODE>DataBuffer.TYPE_BYTE</CODE>, <CODE>DataBuffer.TYPE_USHORT</CODE>,
 * <CODE>DataBuffer.TYPE_INT</CODE>, <CODE>DataBuffer.TYPE_SHORT</CODE>,
 * <CODE>DataBuffer.TYPE_FLOAT</CODE>, or <CODE>DataBuffer.TYPE_DOUBLE</CODE>.
 * @see ColorModel#getRGBdefault
 */
public int getRGB(Object inData) {
    if (needScaleInit) {
        initScale();
    }
    if (is_sRGB_stdScale || is_LinearRGB_stdScale) {
        return (getAlpha(inData) << 24) | (getRed(inData) << 16) | (getGreen(inData) << 8) | (getBlue(inData));
    } else if (colorSpaceType == ColorSpace.TYPE_GRAY) {
        // Red sRGB component should equal
        int gray = getRed(inData);
        // green and blue components
        return (getAlpha(inData) << 24) | (gray << 16) | (gray << 8) | gray;
    }
    float[] norm = getNormalizedComponents(inData, null, 0);
    // Note that getNormalizedComponents returns non-premult values
    float[] rgb = colorSpace.toRGB(norm);
    return (getAlpha(inData) << 24) | (((int) (rgb[0] * 255.0f + 0.5f)) << 16) | (((int) (rgb[1] * 255.0f + 0.5f)) << 8) | (((int) (rgb[2] * 255.0f + 0.5f)) << 0);
}