/**
 * Requests that this Component get the input focus, and that this
 * Component's top-level ancestor become the focused Window. This
 * component must be displayable, focusable, visible and all of
 * its ancestors (with the exception of the top-level Window) must
 * be visible for the request to be granted. Every effort will be
 * made to honor the request; however, in some cases it may be
 * impossible to do so. Developers must never assume that this
 * Component is the focus owner until this Component receives a
 * FOCUS_GAINED event. If this request is denied because this
 * Component's top-level Window cannot become the focused Window,
 * the request will be remembered and will be granted when the
 * Window is later focused by the user.
 * <p>
 * This method cannot be used to set the focus owner to no Component at
 * all. Use <code>KeyboardFocusManager.clearGlobalFocusOwner()</code>
 * instead.
 * <p>
 * Because the focus behavior of this method is platform-dependent,
 * developers are strongly encouraged to use
 * <code>requestFocusInWindow</code> when possible.
 *
 * <p>Note: Not all focus transfers result from invoking this method. As
 * such, a component may receive focus without this or any of the other
 * {@code requestFocus} methods of {@code Component} being invoked.
 *
 * @see #requestFocusInWindow
 * @see java.awt.event.FocusEvent
 * @see #addFocusListener
 * @see #isFocusable
 * @see #isDisplayable
 * @see KeyboardFocusManager#clearGlobalFocusOwner
 * @since JDK1.0
 */
public void requestFocus() {
    requestFocusHelper(false, true);
}