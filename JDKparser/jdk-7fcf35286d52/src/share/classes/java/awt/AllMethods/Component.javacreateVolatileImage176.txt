/**
 * Creates a volatile off-screen drawable image
 *     to be used for double buffering.
 * @param     width the specified width.
 * @param     height the specified height.
 * @return    an off-screen drawable image, which can be used for double
 *    buffering.  The return value may be <code>null</code> if the
 *    component is not displayable.  This will always happen if
 *    <code>GraphicsEnvironment.isHeadless()</code> returns
 *    <code>true</code>.
 * @see java.awt.image.VolatileImage
 * @see #isDisplayable
 * @see GraphicsEnvironment#isHeadless
 * @since     1.4
 */
public VolatileImage createVolatileImage(int width, int height) {
    ComponentPeer peer = this.peer;
    if (peer instanceof LightweightPeer) {
        if (parent != null) {
            return parent.createVolatileImage(width, height);
        } else {
            return null;
        }
    } else {
        return (peer != null) ? peer.createVolatileImage(width, height) : null;
    }
}