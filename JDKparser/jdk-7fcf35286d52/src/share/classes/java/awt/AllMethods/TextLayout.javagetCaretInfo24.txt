/*
     * carets and hit testing
     *
     * Positions on a text line are represented by instances of TextHitInfo.
     * Any TextHitInfo with characterOffset between 0 and characterCount-1,
     * inclusive, represents a valid position on the line.  Additionally,
     * [-1, trailing] and [characterCount, leading] are valid positions, and
     * represent positions at the logical start and end of the line,
     * respectively.
     *
     * The characterOffsets in TextHitInfo's used and returned by TextLayout
     * are relative to the beginning of the text layout, not necessarily to
     * the beginning of the text storage the client is using.
     *
     *
     * Every valid TextHitInfo has either one or two carets associated with it.
     * A caret is a visual location in the TextLayout indicating where text at
     * the TextHitInfo will be displayed on screen.  If a TextHitInfo
     * represents a location on a directional boundary, then there are two
     * possible visible positions for newly inserted text.  Consider the
     * following example, in which capital letters indicate right-to-left text,
     * and the overall line direction is left-to-right:
     *
     * Text Storage: [ a, b, C, D, E, f ]
     * Display:        a b E D C f
     *
     * The text hit info (1, t) represents the trailing side of 'b'.  If 'q',
     * a left-to-right character is inserted into the text storage at this
     * location, it will be displayed between the 'b' and the 'E':
     *
     * Text Storage: [ a, b, q, C, D, E, f ]
     * Display:        a b q E D C f
     *
     * However, if a 'W', which is right-to-left, is inserted into the storage
     * after 'b', the storage and display will be:
     *
     * Text Storage: [ a, b, W, C, D, E, f ]
     * Display:        a b E D C W f
     *
     * So, for the original text storage, two carets should be displayed for
     * location (1, t): one visually between 'b' and 'E' and one visually
     * between 'C' and 'f'.
     *
     *
     * When two carets are displayed for a TextHitInfo, one caret is the
     * 'strong' caret and the other is the 'weak' caret.  The strong caret
     * indicates where an inserted character will be displayed when that
     * character's direction is the same as the direction of the TextLayout.
     * The weak caret shows where an character inserted character will be
     * displayed when the character's direction is opposite that of the
     * TextLayout.
     *
     *
     * Clients should not be overly concerned with the details of correct
     * caret display. TextLayout.getCaretShapes(TextHitInfo) will return an
     * array of two paths representing where carets should be displayed.
     * The first path in the array is the strong caret; the second element,
     * if non-null, is the weak caret.  If the second element is null,
     * then there is no weak caret for the given TextHitInfo.
     *
     *
     * Since text can be visually reordered, logically consecutive
     * TextHitInfo's may not be visually consecutive.  One implication of this
     * is that a client cannot tell from inspecting a TextHitInfo whether the
     * hit represents the first (or last) caret in the layout.  Clients
     * can call getVisualOtherHit();  if the visual companion is
     * (-1, TRAILING) or (characterCount, LEADING), then the hit is at the
     * first (last) caret position in the layout.
     */
private float[] getCaretInfo(int caret, Rectangle2D bounds, float[] info) {
    float top1X, top2X;
    float bottom1X, bottom2X;
    if (caret == 0 || caret == characterCount) {
        float pos;
        int logIndex;
        if (caret == characterCount) {
            logIndex = textLine.visualToLogical(characterCount - 1);
            pos = textLine.getCharLinePosition(logIndex) + textLine.getCharAdvance(logIndex);
        } else {
            logIndex = textLine.visualToLogical(caret);
            pos = textLine.getCharLinePosition(logIndex);
        }
        float angle = textLine.getCharAngle(logIndex);
        float shift = textLine.getCharShift(logIndex);
        pos += angle * shift;
        top1X = top2X = pos + angle * textLine.getCharAscent(logIndex);
        bottom1X = bottom2X = pos - angle * textLine.getCharDescent(logIndex);
    } else {
        {
            int logIndex = textLine.visualToLogical(caret - 1);
            float angle1 = textLine.getCharAngle(logIndex);
            float pos1 = textLine.getCharLinePosition(logIndex) + textLine.getCharAdvance(logIndex);
            if (angle1 != 0) {
                pos1 += angle1 * textLine.getCharShift(logIndex);
                top1X = pos1 + angle1 * textLine.getCharAscent(logIndex);
                bottom1X = pos1 - angle1 * textLine.getCharDescent(logIndex);
            } else {
                top1X = bottom1X = pos1;
            }
        }
        {
            int logIndex = textLine.visualToLogical(caret);
            float angle2 = textLine.getCharAngle(logIndex);
            float pos2 = textLine.getCharLinePosition(logIndex);
            if (angle2 != 0) {
                pos2 += angle2 * textLine.getCharShift(logIndex);
                top2X = pos2 + angle2 * textLine.getCharAscent(logIndex);
                bottom2X = pos2 - angle2 * textLine.getCharDescent(logIndex);
            } else {
                top2X = bottom2X = pos2;
            }
        }
    }
    float topX = (top1X + top2X) / 2;
    float bottomX = (bottom1X + bottom2X) / 2;
    if (info == null) {
        info = new float[2];
    }
    if (isVerticalLine) {
        info[1] = (float) ((topX - bottomX) / bounds.getWidth());
        info[0] = (float) (topX + (info[1] * bounds.getX()));
    } else {
        info[1] = (float) ((topX - bottomX) / bounds.getHeight());
        info[0] = (float) (bottomX + (info[1] * bounds.getMaxY()));
    }
    return info;
}