/**
 * Deserializes this <code>Container</code> from the specified
 * <code>ObjectInputStream</code>.
 * <ul>
 *    <li>Reads default serializable fields from the stream.</li>
 *    <li>Reads a list of serializable ContainerListener(s) as optional
 *        data. If the list is null, no Listeners are installed.</li>
 *    <li>Reads this Container's FocusTraversalPolicy, which may be null,
 *        as optional data.</li>
 * </ul>
 *
 * @param s the <code>ObjectInputStream</code> to read
 * @serial
 * @see #addContainerListener
 * @see #writeObject(ObjectOutputStream)
 */
private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {
    ObjectInputStream.GetField f = s.readFields();
    // array of components may not be present in the stream or may be null
    Component[] tmpComponent = (Component[]) f.get("component", null);
    if (tmpComponent == null) {
        tmpComponent = EMPTY_ARRAY;
    }
    int ncomponents = (Integer) f.get("ncomponents", 0);
    if (ncomponents < 0 || ncomponents > tmpComponent.length) {
        throw new InvalidObjectException("Incorrect number of components");
    }
    component = new java.util.ArrayList<Component>(ncomponents);
    for (int i = 0; i < ncomponents; ++i) {
        component.add(tmpComponent[i]);
    }
    layoutMgr = (LayoutManager) f.get("layoutMgr", null);
    dispatcher = (LightweightDispatcher) f.get("dispatcher", null);
    // Old stream. Doesn't contain maxSize among Component's fields.
    if (maxSize == null) {
        maxSize = (Dimension) f.get("maxSize", null);
    }
    focusCycleRoot = f.get("focusCycleRoot", false);
    containerSerializedDataVersion = f.get("containerSerializedDataVersion", 1);
    focusTraversalPolicyProvider = f.get("focusTraversalPolicyProvider", false);
    java.util.List<Component> component = this.component;
    for (Component comp : component) {
        comp.parent = this;
        adjustListeningChildren(AWTEvent.HIERARCHY_EVENT_MASK, comp.numListening(AWTEvent.HIERARCHY_EVENT_MASK));
        adjustListeningChildren(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK, comp.numListening(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK));
        adjustDescendants(comp.countHierarchyMembers());
    }
    Object keyOrNull;
    while (null != (keyOrNull = s.readObject())) {
        String key = ((String) keyOrNull).intern();
        if (containerListenerK == key) {
            addContainerListener((ContainerListener) (s.readObject()));
        } else {
            // skip value for unrecognized key
            s.readObject();
        }
    }
    try {
        Object policy = s.readObject();
        if (policy instanceof FocusTraversalPolicy) {
            focusTraversalPolicy = (FocusTraversalPolicy) policy;
        }
    } catch (java.io.OptionalDataException e) {
        // JDK 1.1/1.2/1.3 instances will not have this optional data.
        // e.eof will be true to indicate that there is no more data
        // available for this object. If e.eof is not true, throw the
        // exception as it might have been caused by reasons unrelated to
        // focusTraversalPolicy.
        if (!e.eof) {
            throw e;
        }
    }
}