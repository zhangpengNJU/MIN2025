/**
 * Returns a parameter string identifying this event.
 * This method is useful for event-logging and for debugging.
 *
 * @return a string identifying the event and its attributes
 */
public String paramString() {
    StringBuilder str = new StringBuilder(80);
    switch(id) {
        case MOUSE_PRESSED:
            str.append("MOUSE_PRESSED");
            break;
        case MOUSE_RELEASED:
            str.append("MOUSE_RELEASED");
            break;
        case MOUSE_CLICKED:
            str.append("MOUSE_CLICKED");
            break;
        case MOUSE_ENTERED:
            str.append("MOUSE_ENTERED");
            break;
        case MOUSE_EXITED:
            str.append("MOUSE_EXITED");
            break;
        case MOUSE_MOVED:
            str.append("MOUSE_MOVED");
            break;
        case MOUSE_DRAGGED:
            str.append("MOUSE_DRAGGED");
            break;
        case MOUSE_WHEEL:
            str.append("MOUSE_WHEEL");
            break;
        default:
            str.append("unknown type");
    }
    // (x,y) coordinates
    str.append(",(").append(x).append(",").append(y).append(")");
    str.append(",absolute(").append(xAbs).append(",").append(yAbs).append(")");
    if (id != MOUSE_DRAGGED && id != MOUSE_MOVED) {
        str.append(",button=").append(getButton());
    }
    if (getModifiers() != 0) {
        str.append(",modifiers=").append(getMouseModifiersText(modifiers));
    }
    if (getModifiersEx() != 0) {
        // Using plain "modifiers" here does show an excluded extended buttons in the string event representation.
        // getModifiersEx() solves the problem.
        str.append(",extModifiers=").append(getModifiersExText(getModifiersEx()));
    }
    str.append(",clickCount=").append(clickCount);
    return str.toString();
}