/**
 * Returns the Set of focus traversal keys for a given traversal operation
 * for this Container. (See
 * <code>setFocusTraversalKeys</code> for a full description of each key.)
 * <p>
 * If a Set of traversal keys has not been explicitly defined for this
 * Container, then this Container's parent's Set is returned. If no Set
 * has been explicitly defined for any of this Container's ancestors, then
 * the current KeyboardFocusManager's default Set is returned.
 *
 * @param id one of KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
 *        KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,
 *        KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS, or
 *        KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS
 * @return the Set of AWTKeyStrokes for the specified operation. The Set
 *         will be unmodifiable, and may be empty. null will never be
 *         returned.
 * @see #setFocusTraversalKeys
 * @see KeyboardFocusManager#FORWARD_TRAVERSAL_KEYS
 * @see KeyboardFocusManager#BACKWARD_TRAVERSAL_KEYS
 * @see KeyboardFocusManager#UP_CYCLE_TRAVERSAL_KEYS
 * @see KeyboardFocusManager#DOWN_CYCLE_TRAVERSAL_KEYS
 * @throws IllegalArgumentException if id is not one of
 *         KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
 *         KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,
 *         KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS, or
 *         KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS
 * @since 1.4
 */
public Set<AWTKeyStroke> getFocusTraversalKeys(int id) {
    if (id < 0 || id >= KeyboardFocusManager.TRAVERSAL_KEY_LENGTH) {
        throw new IllegalArgumentException("invalid focus traversal key identifier");
    }
    // Don't call super.getFocusTraversalKey. The Component parameter check
    // does not allow DOWN_CYCLE_TRAVERSAL_KEY, but we do.
    return getFocusTraversalKeys_NoIDCheck(id);
}