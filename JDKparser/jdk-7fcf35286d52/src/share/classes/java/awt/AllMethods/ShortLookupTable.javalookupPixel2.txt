/**
 * Returns an array of samples of a pixel, translated with the lookup
 * table. The source and destination array can be the same array.
 * Array <code>dst</code> is returned.
 *
 * @param src the source array.
 * @param dst the destination array. This array must be at least as
 *         long as <code>src</code>.  If <code>dst</code> is
 *         <code>null</code>, a new array will be allocated having the
 *         same length as <code>src</code>.
 * @return the array <code>dst</code>, an <code>int</code> array of
 *         samples.
 * @exception ArrayIndexOutOfBoundsException if <code>src</code> is
 *            longer than <code>dst</code> or if for any element
 *            <code>i</code> of <code>src</code>,
 *            {@code (src[i]&0xffff)-offset} is either less than
 *            zero or greater than or equal to the length of the
 *            lookup table for any band.
 */
public short[] lookupPixel(short[] src, short[] dst) {
    if (dst == null) {
        // Need to alloc a new destination array
        dst = new short[src.length];
    }
    if (numComponents == 1) {
        // Apply one LUT to all channels
        for (int i = 0; i < src.length; i++) {
            int s = (src[i] & 0xffff) - offset;
            if (s < 0) {
                throw new ArrayIndexOutOfBoundsException("src[" + i + "]-offset is " + "less than zero");
            }
            dst[i] = data[0][s];
        }
    } else {
        for (int i = 0; i < src.length; i++) {
            int s = (src[i] & 0xffff) - offset;
            if (s < 0) {
                throw new ArrayIndexOutOfBoundsException("src[" + i + "]-offset is " + "less than zero");
            }
            dst[i] = data[i][s];
        }
    }
    return dst;
}