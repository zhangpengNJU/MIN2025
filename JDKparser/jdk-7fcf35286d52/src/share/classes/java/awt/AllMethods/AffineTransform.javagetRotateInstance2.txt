/**
 * Returns a transform that rotates coordinates around an anchor point.
 * This operation is equivalent to translating the coordinates so
 * that the anchor point is at the origin (S1), then rotating them
 * about the new origin (S2), and finally translating so that the
 * intermediate origin is restored to the coordinates of the original
 * anchor point (S3).
 * <p>
 * This operation is equivalent to the following sequence of calls:
 * <pre>
 *     AffineTransform Tx = new AffineTransform();
 *     Tx.translate(anchorx, anchory);    // S3: final translation
 *     Tx.rotate(theta);                  // S2: rotate around anchor
 *     Tx.translate(-anchorx, -anchory);  // S1: translate anchor to origin
 * </pre>
 * The matrix representing the returned transform is:
 * <pre>
 *          [   cos(theta)    -sin(theta)    x-x*cos+y*sin  ]
 *          [   sin(theta)     cos(theta)    y-x*sin-y*cos  ]
 *          [       0              0               1        ]
 * </pre>
 * Rotating by a positive angle theta rotates points on the positive
 * X axis toward the positive Y axis.
 * Note also the discussion of
 * <a href="#quadrantapproximation">Handling 90-Degree Rotations</a>
 * above.
 *
 * @param theta the angle of rotation measured in radians
 * @param anchorx the X coordinate of the rotation anchor point
 * @param anchory the Y coordinate of the rotation anchor point
 * @return an <code>AffineTransform</code> object that rotates
 *  coordinates around the specified point by the specified angle of
 *  rotation.
 * @since 1.2
 */
public static AffineTransform getRotateInstance(double theta, double anchorx, double anchory) {
    AffineTransform Tx = new AffineTransform();
    Tx.setToRotation(theta, anchorx, anchory);
    return Tx;
}