/**
 * Returns a high precision and more accurate bounding box of
 * the <code>Shape</code> than the <code>getBounds</code> method.
 * Note that there is no guarantee that the returned
 * {@link Rectangle2D} is the smallest bounding box that encloses
 * the <code>Shape</code>, only that the <code>Shape</code> lies
 * entirely within the indicated <code>Rectangle2D</code>.  The
 * bounding box returned by this method is usually tighter than that
 * returned by the <code>getBounds</code> method and never fails due
 * to overflow problems since the return value can be an instance of
 * the <code>Rectangle2D</code> that uses double precision values to
 * store the dimensions.
 *
 * <p>
 * Note that the <a href="{@docRoot}/java/awt/Shape.html#def_insideness">
 * definition of insideness</a> can lead to situations where points
 * on the defining outline of the {@code shape} may not be considered
 * contained in the returned {@code bounds} object, but only in cases
 * where those points are also not considered contained in the original
 * {@code shape}.
 * </p>
 * <p>
 * If a {@code point} is inside the {@code shape} according to the
 * {@link #contains(Point2D p) contains(point)} method, then it must
 * be inside the returned {@code Rectangle2D} bounds object according
 * to the {@link #contains(Point2D p) contains(point)} method of the
 * {@code bounds}. Specifically:
 * </p>
 * <p>
 *  {@code shape.contains(p)} requires {@code bounds.contains(p)}
 * </p>
 * <p>
 * If a {@code point} is not inside the {@code shape}, then it might
 * still be contained in the {@code bounds} object:
 * </p>
 * <p>
 *  {@code bounds.contains(p)} does not imply {@code shape.contains(p)}
 * </p>
 * @return an instance of <code>Rectangle2D</code> that is a
 *                 high-precision bounding box of the <code>Shape</code>.
 * @see #getBounds
 * @since 1.2
 */
public Rectangle2D getBounds2D();