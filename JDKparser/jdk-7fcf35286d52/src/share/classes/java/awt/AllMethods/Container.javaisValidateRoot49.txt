/**
 * Indicates if this container is a <i>validate root</i>.
 * <p>
 * Layout-related changes, such as bounds of the validate root descendants,
 * do not affect the layout of the validate root parent. This peculiarity
 * enables the {@code invalidate()} method to stop invalidating the
 * component hierarchy when the method encounters a validate root. However,
 * to preserve backward compatibility this new optimized behavior is
 * enabled only when the {@code java.awt.smartInvalidate} system property
 * value is set to {@code true}.
 * <p>
 * If a component hierarchy contains validate roots and the new optimized
 * {@code invalidate()} behavior is enabled, the {@code validate()} method
 * must be invoked on the validate root of a previously invalidated
 * component to restore the validity of the hierarchy later. Otherwise,
 * calling the {@code validate()} method on the top-level container (such
 * as a {@code Frame} object) should be used to restore the validity of the
 * component hierarchy.
 * <p>
 * The {@code Window} class and the {@code Applet} class are the validate
 * roots in AWT.  Swing introduces more validate roots.
 *
 * @return whether this container is a validate root
 * @see #invalidate
 * @see java.awt.Component#invalidate
 * @see javax.swing.JComponent#isValidateRoot
 * @see javax.swing.JComponent#revalidate
 * @since 1.7
 */
public boolean isValidateRoot() {
    return false;
}