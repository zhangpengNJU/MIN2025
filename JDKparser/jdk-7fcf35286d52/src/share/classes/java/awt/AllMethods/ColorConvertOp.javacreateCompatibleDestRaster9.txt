/**
 * Creates a zeroed destination Raster with the correct size and number of
 * bands, given this source.
 * @param src the specified <code>Raster</code>
 * @return a <code>WritableRaster</code> with the correct size and number
 *         of bands from the specified <code>src</code>
 * @throws IllegalArgumentException if this <code>ColorConvertOp</code>
 *         was created without sufficient information to define the
 *         <code>dst</code> and <code>src</code> color spaces
 */
public WritableRaster createCompatibleDestRaster(Raster src) {
    int ncomponents;
    if (CSList != null) {
        /* non-ICC case */
        if (CSList.length != 2) {
            throw new IllegalArgumentException("Destination ColorSpace is undefined");
        }
        ncomponents = CSList[1].getNumComponents();
    } else {
        /* ICC case */
        int nProfiles = profileList.length;
        if (nProfiles < 2) {
            throw new IllegalArgumentException("Destination ColorSpace is undefined");
        }
        ncomponents = profileList[nProfiles - 1].getNumComponents();
    }
    WritableRaster dest = Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE, src.getWidth(), src.getHeight(), ncomponents, new Point(src.getMinX(), src.getMinY()));
    return dest;
}