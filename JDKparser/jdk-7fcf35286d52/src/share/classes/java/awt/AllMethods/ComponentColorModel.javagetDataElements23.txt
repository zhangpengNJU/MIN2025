/**
 * Returns a data element array representation of a pixel in this
 * <CODE>ColorModel</CODE>, given an array of unnormalized color/alpha
 * components. This array can then be passed to the <CODE>setDataElements</CODE>
 * method of a <CODE>WritableRaster</CODE> object.
 *
 * @param components An array of unnormalized color/alpha components.
 * @param offset The integer offset into the <CODE>components</CODE> array.
 * @param obj The object in which to store the data element array
 * representation of the pixel. If <CODE>obj</CODE> variable is null,
 * a new array is allocated.  If <CODE>obj</CODE> is not null, it must
 * be a primitive array of type <CODE>transferType</CODE>. An
 * <CODE>ArrayIndexOutOfBoundsException</CODE> is thrown if
 * <CODE>obj</CODE> is not large enough to hold a pixel value
 * for this <CODE>ColorModel</CODE>.  Since
 * <code>ComponentColorModel</code> can be subclassed, subclasses
 * inherit the implementation of this method and if they don't
 * override it then they throw an exception if they use an
 * unsupported <code>transferType</code>.
 *
 * @return The data element array representation of a pixel
 * in this <CODE>ColorModel</CODE>.
 *
 * @throws IllegalArgumentException If the components array
 * is not large enough to hold all the color and alpha components
 * (starting at offset).
 * @throws ClassCastException If <CODE>obj</CODE> is not null and is not a
 * primitive  array of type <CODE>transferType</CODE>.
 * @throws ArrayIndexOutOfBoundsException If <CODE>obj</CODE> is not large
 * enough to hold a pixel value for this <CODE>ColorModel</CODE>.
 * @throws IllegalArgumentException If this
 * <CODE>ComponentColorModel</CODE> does not support the unnormalized form
 * @throws UnsupportedOperationException If the transfer type of
 * this <CODE>ComponentColorModel</CODE>
 * is not one of the following transfer types:
 * <CODE>DataBuffer.TYPE_BYTE</CODE>, <CODE>DataBuffer.TYPE_USHORT</CODE>,
 * or <CODE>DataBuffer.TYPE_INT</CODE>.
 *
 * @see WritableRaster#setDataElements
 * @see SampleModel#setDataElements
 */
public Object getDataElements(int[] components, int offset, Object obj) {
    if (needScaleInit) {
        initScale();
    }
    if (noUnnorm) {
        throw new IllegalArgumentException("This ColorModel does not support the unnormalized form");
    }
    if ((components.length - offset) < numComponents) {
        throw new IllegalArgumentException("Component array too small" + " (should be " + numComponents);
    }
    switch(transferType) {
        case DataBuffer.TYPE_INT:
            {
                int[] pixel;
                if (obj == null) {
                    pixel = new int[numComponents];
                } else {
                    pixel = (int[]) obj;
                }
                System.arraycopy(components, offset, pixel, 0, numComponents);
                return pixel;
            }
        case DataBuffer.TYPE_BYTE:
            {
                byte[] pixel;
                if (obj == null) {
                    pixel = new byte[numComponents];
                } else {
                    pixel = (byte[]) obj;
                }
                for (int i = 0; i < numComponents; i++) {
                    pixel[i] = (byte) (components[offset + i] & 0xff);
                }
                return pixel;
            }
        case DataBuffer.TYPE_USHORT:
            {
                short[] pixel;
                if (obj == null) {
                    pixel = new short[numComponents];
                } else {
                    pixel = (short[]) obj;
                }
                for (int i = 0; i < numComponents; i++) {
                    pixel[i] = (short) (components[offset + i] & 0xffff);
                }
                return pixel;
            }
        default:
            throw new UnsupportedOperationException("This method has not been " + "implemented for transferType " + transferType);
    }
}