/**
 * Returns an array of unnormalized color/alpha components for
 * a specified pixel in this <code>ColorModel</code>.  The pixel
 * value is specified by an array of data elements of type
 * <code>transferType</code> passed in as an object reference.
 * If <code>pixel</code> is not a primitive array of type
 * <code>transferType</code>, a <code>ClassCastException</code>
 * is thrown.  An <code>ArrayIndexOutOfBoundsException</code>
 * is thrown if <code>pixel</code> is not large enough to hold
 * a pixel value for this <code>ColorModel</code>.  If the
 * <code>components</code> array is <code>null</code>, a new array
 * is allocated that contains
 * <code>offset + getNumComponents()</code> elements.
 * The <code>components</code> array is returned,
 * with the alpha component included
 * only if <code>hasAlpha</code> returns true.
 * Color/alpha components are stored in the <code>components</code>
 * array starting at <code>offset</code> even if the array is
 * allocated by this method.  An
 * <code>ArrayIndexOutOfBoundsException</code> is also
 * thrown if  the <code>components</code> array is not
 * <code>null</code> and is not large enough to hold all the color
 * and alpha components starting at <code>offset</code>.
 * <p>
 * Since <code>IndexColorModel</code> can be subclassed, subclasses
 * inherit the implementation of this method and if they don't
 * override it then they throw an exception if they use an
 * unsupported <code>transferType</code>.
 *
 * @param pixel the specified pixel
 * @param components an array that receives the color and alpha
 * components of the specified pixel
 * @param offset the index into the <code>components</code> array at
 * which to begin storing the color and alpha components of the
 * specified pixel
 * @return an array containing the color and alpha components of the
 * specified pixel starting at the specified offset.
 * @throws ArrayIndexOutOfBoundsException if <code>pixel</code>
 *            is not large enough to hold a pixel value for this
 *            <code>ColorModel</code> or if the
 *            <code>components</code> array is not <code>null</code>
 *            and is not large enough to hold all the color
 *            and alpha components starting at <code>offset</code>
 * @throws ClassCastException if <code>pixel</code> is not a
 *            primitive array of type <code>transferType</code>
 * @throws UnsupportedOperationException if <code>transferType</code>
 *         is not one of the supported transfer types
 * @see ColorModel#hasAlpha
 * @see ColorModel#getNumComponents
 */
public int[] getComponents(Object pixel, int[] components, int offset) {
    int intpixel;
    switch(transferType) {
        case DataBuffer.TYPE_BYTE:
            byte[] bdata = (byte[]) pixel;
            intpixel = bdata[0] & 0xff;
            break;
        case DataBuffer.TYPE_USHORT:
            short[] sdata = (short[]) pixel;
            intpixel = sdata[0] & 0xffff;
            break;
        case DataBuffer.TYPE_INT:
            int[] idata = (int[]) pixel;
            intpixel = idata[0];
            break;
        default:
            throw new UnsupportedOperationException("This method has not been " + "implemented for transferType " + transferType);
    }
    return getComponents(intpixel, components, offset);
}