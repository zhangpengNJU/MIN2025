/**
 * Adds component to this container. Tries to minimize side effects of this adding -
 * doesn't call remove notify if it is not required.
 * @since 1.5
 */
private void addDelicately(Component comp, Container curParent, int index) {
    checkTreeLock();
    // Check if moving between containers
    if (curParent != this) {
        // index == -1 means add to the end.
        if (index == -1) {
            component.add(comp);
        } else {
            component.add(index, comp);
        }
        comp.parent = this;
        comp.setGraphicsConfiguration(getGraphicsConfiguration());
        adjustListeningChildren(AWTEvent.HIERARCHY_EVENT_MASK, comp.numListening(AWTEvent.HIERARCHY_EVENT_MASK));
        adjustListeningChildren(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK, comp.numListening(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK));
        adjustDescendants(comp.countHierarchyMembers());
    } else {
        if (index < component.size()) {
            component.set(index, comp);
        }
    }
    invalidateIfValid();
    if (peer != null) {
        if (comp.peer == null) {
            // Remove notify was called or it didn't have peer - create new one
            comp.addNotify();
        } else {
            // Both container and child have peers, it means child peer should be reparented.
            // In both cases we need to reparent native widgets.
            Container newNativeContainer = getHeavyweightContainer();
            Container oldNativeContainer = curParent.getHeavyweightContainer();
            if (oldNativeContainer != newNativeContainer) {
                // Native container changed - need to reparent native widgets
                newNativeContainer.reparentChild(comp);
            }
            comp.updateZOrder();
            if (!comp.isLightweight() && isLightweight()) {
                // If component is heavyweight and one of the containers is lightweight
                // the location of the component should be fixed.
                comp.relocateComponent();
            }
        }
    }
    if (curParent != this) {
        /* Notify the layout manager of the added component. */
        if (layoutMgr != null) {
            if (layoutMgr instanceof LayoutManager2) {
                ((LayoutManager2) layoutMgr).addLayoutComponent(comp, null);
            } else {
                layoutMgr.addLayoutComponent(null, comp);
            }
        }
        if (containerListener != null || (eventMask & AWTEvent.CONTAINER_EVENT_MASK) != 0 || Toolkit.enabledOnToolkit(AWTEvent.CONTAINER_EVENT_MASK)) {
            ContainerEvent e = new ContainerEvent(this, ContainerEvent.COMPONENT_ADDED, comp);
            dispatchEvent(e);
        }
        comp.createHierarchyEvents(HierarchyEvent.HIERARCHY_CHANGED, comp, this, HierarchyEvent.PARENT_CHANGED, Toolkit.enabledOnToolkit(AWTEvent.HIERARCHY_EVENT_MASK));
        // If component is focus owner or parent container of focus owner check that after reparenting
        // focus owner moved out if new container prohibit this kind of focus owner.
        if (comp.isFocusOwner() && !comp.canBeFocusOwnerRecursively()) {
            comp.transferFocus();
        } else if (comp instanceof Container) {
            Component focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();
            if (focusOwner != null && isParentOf(focusOwner) && !focusOwner.canBeFocusOwnerRecursively()) {
                focusOwner.transferFocus();
            }
        }
    } else {
        comp.createHierarchyEvents(HierarchyEvent.HIERARCHY_CHANGED, comp, this, HierarchyEvent.HIERARCHY_CHANGED, Toolkit.enabledOnToolkit(AWTEvent.HIERARCHY_EVENT_MASK));
    }
    if (peer != null && layoutMgr == null && isVisible()) {
        updateCursorImmediately();
    }
}