/**
 * Parse a date/time string according to the given parse position.  For
 * example, a time text {@code "07/10/96 4:5 PM, PDT"} will be parsed into a {@code Date}
 * that is equivalent to {@code Date(837039900000L)}.
 *
 * <p> By default, parsing is lenient: If the input is not in the form used
 * by this object's format method but can still be parsed as a date, then
 * the parse succeeds.  Clients may insist on strict adherence to the
 * format by calling {@link #setLenient(boolean) setLenient(false)}.
 *
 * <p>This parsing operation uses the {@link #calendar} to produce
 * a {@code Date}. As a result, the {@code calendar}'s date-time
 * fields and the {@code TimeZone} value may have been
 * overwritten, depending on subclass implementations. Any {@code
 * TimeZone} value that has previously been set by a call to
 * {@link #setTimeZone(java.util.TimeZone) setTimeZone} may need
 * to be restored for further operations.
 *
 * @param source  The date/time string to be parsed
 *
 * @param pos   On input, the position at which to start parsing; on
 *              output, the position at which parsing terminated, or the
 *              start position if the parse failed.
 *
 * @return      A {@code Date}, or {@code null} if the input could not be parsed
 */
public abstract Date parse(String source, ParsePosition pos);