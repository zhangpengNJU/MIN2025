/**
 * Returns a new <code>DateFormat</code> instance which formats date and time
 * with the given formatting style for the specified locale.
 * @param dateStyle the given date formatting style.  Either one of
 *     {@link java.text.DateFormat#SHORT DateFormat.SHORT},
 *     {@link java.text.DateFormat#MEDIUM DateFormat.MEDIUM},
 *     {@link java.text.DateFormat#LONG DateFormat.LONG}, or
 *     {@link java.text.DateFormat#FULL DateFormat.FULL}.
 * @param timeStyle the given time formatting style.  Either one of
 *     {@link java.text.DateFormat#SHORT DateFormat.SHORT},
 *     {@link java.text.DateFormat#MEDIUM DateFormat.MEDIUM},
 *     {@link java.text.DateFormat#LONG DateFormat.LONG}, or
 *     {@link java.text.DateFormat#FULL DateFormat.FULL}.
 * @param locale the desired locale.
 * @exception IllegalArgumentException if <code>dateStyle</code> or
 *     <code>timeStyle</code> is invalid,
 *     or if <code>locale</code> isn't
 *     one of the locales returned from
 *     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales()
 *     getAvailableLocales()}.
 * @exception NullPointerException if <code>locale</code> is null
 * @return a date/time formatter.
 * @see java.text.DateFormat#getDateTimeInstance(int, int, java.util.Locale)
 */
public abstract DateFormat getDateTimeInstance(int dateStyle, int timeStyle, Locale locale);