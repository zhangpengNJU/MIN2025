/**
 * Sets the iterator to point to the collation element corresponding to
 * the specified character (the parameter is a CHARACTER offset in the
 * original string, not an offset into its corresponding sequence of
 * collation elements).  The value returned by the next call to next()
 * will be the collation element corresponding to the specified position
 * in the text.  If that position is in the middle of a contracting
 * character sequence, the result of the next call to next() is the
 * collation element for that sequence.  This means that getOffset()
 * is not guaranteed to return the same value as was passed to a preceding
 * call to setOffset().
 *
 * @param newOffset The new character offset into the original text.
 * @since 1.2
 */
// getBeginIndex, getEndIndex and setIndex are deprecated
@SuppressWarnings("deprecation")
public void setOffset(int newOffset) {
    if (text != null) {
        if (newOffset < text.getBeginIndex() || newOffset >= text.getEndIndex()) {
            text.setIndexOnly(newOffset);
        } else {
            int c = text.setIndex(newOffset);
            // if the desired character isn't used in a contracting character
            // sequence, bypass all the backing-up logic-- we're sitting on
            // the right character already
            if (ordering.usedInContractSeq(c)) {
                // walk backwards through the string until we see a character
                // that DOESN'T participate in a contracting character sequence
                while (ordering.usedInContractSeq(c)) {
                    c = text.previous();
                }
                // now walk forward using this object's next() method until
                // we pass the starting point and set our current position
                // to the beginning of the last "character" before or at
                // our starting position
                int last = text.getIndex();
                while (text.getIndex() <= newOffset) {
                    last = text.getIndex();
                    next();
                }
                text.setIndexOnly(last);
            // we don't need this, since last is the last index
            // that is the starting of the contraction which encompass
            // newOffset
            // text.previous();
            }
        }
    }
    buffer = null;
    expIndex = 0;
    swapOrder = 0;
}