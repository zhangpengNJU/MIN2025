/**
 * Compares the character data stored in two different strings based on the
 * collation rules.  Returns information about whether a string is less
 * than, greater than or equal to another string in a language.
 * This can be overriden in a subclass.
 *
 * @exception NullPointerException if <code>source</code> or <code>target</code> is null.
 */
public synchronized int compare(String source, String target) {
    if (source == null || target == null) {
        throw new NullPointerException();
    }
    // The basic algorithm here is that we use CollationElementIterators
    // to step through both the source and target strings.  We compare each
    // collation element in the source string against the corresponding one
    // in the target, checking for differences.
    // 
    // If a difference is found, we set <result> to LESS or GREATER to
    // indicate whether the source string is less or greater than the target.
    // 
    // However, it's not that simple.  If we find a tertiary difference
    // (e.g. 'A' vs. 'a') near the beginning of a string, it can be
    // overridden by a primary difference (e.g. "A" vs. "B") later in
    // the string.  For example, "AA" < "aB", even though 'A' > 'a'.
    // 
    // To keep track of this, we use strengthResult to keep track of the
    // strength of the most significant difference that has been found
    // so far.  When we find a difference whose strength is greater than
    // strengthResult, it overrides the last difference (if any) that
    // was found.
    int result = Collator.EQUAL;
    if (sourceCursor == null) {
        sourceCursor = getCollationElementIterator(source);
    } else {
        sourceCursor.setText(source);
    }
    if (targetCursor == null) {
        targetCursor = getCollationElementIterator(target);
    } else {
        targetCursor.setText(target);
    }
    int sOrder = 0, tOrder = 0;
    boolean initialCheckSecTer = getStrength() >= Collator.SECONDARY;
    boolean checkSecTer = initialCheckSecTer;
    boolean checkTertiary = getStrength() >= Collator.TERTIARY;
    boolean gets = true, gett = true;
    while (true) {
        // Get the next collation element in each of the strings, unless
        // we've been requested to skip it.
        if (gets)
            sOrder = sourceCursor.next();
        else
            gets = true;
        if (gett)
            tOrder = targetCursor.next();
        else
            gett = true;
        // If we've hit the end of one of the strings, jump out of the loop
        if ((sOrder == CollationElementIterator.NULLORDER) || (tOrder == CollationElementIterator.NULLORDER))
            break;
        int pSOrder = CollationElementIterator.primaryOrder(sOrder);
        int pTOrder = CollationElementIterator.primaryOrder(tOrder);
        // If there's no difference at this position, we can skip it
        if (sOrder == tOrder) {
            if (tables.isFrenchSec() && pSOrder != 0) {
                if (!checkSecTer) {
                    // in french, a secondary difference more to the right is stronger,
                    // so accents have to be checked with each base element
                    checkSecTer = initialCheckSecTer;
                    // but tertiary differences are less important than the first
                    // secondary difference, so checking tertiary remains disabled
                    checkTertiary = false;
                }
            }
            continue;
        }
        // Compare primary differences first.
        if (pSOrder != pTOrder) {
            if (sOrder == 0) {
                // The entire source element is ignorable.
                // Skip to the next source element, but don't fetch another target element.
                gett = false;
                continue;
            }
            if (tOrder == 0) {
                gets = false;
                continue;
            }
            // The source and target elements aren't ignorable, but it's still possible
            // for the primary component of one of the elements to be ignorable....
            if (// primary order in source is ignorable
            pSOrder == 0) {
                // The source's primary is ignorable, but the target's isn't.  We treat ignorables
                // as a secondary difference, so remember that we found one.
                if (checkSecTer) {
                    // (strength is SECONDARY)
                    result = Collator.GREATER;
                    checkSecTer = false;
                }
                // Skip to the next source element, but don't fetch another target element.
                gett = false;
            } else if (pTOrder == 0) {
                // record differences - see the comment above.
                if (checkSecTer) {
                    // (strength is SECONDARY)
                    result = Collator.LESS;
                    checkSecTer = false;
                }
                // Skip to the next source element, but don't fetch another target element.
                gets = false;
            } else {
                // Neither of the orders is ignorable, and we already know that the primary
                // orders are different because of the (pSOrder != pTOrder) test above.
                // Record the difference and stop the comparison.
                if (pSOrder < pTOrder) {
                    // (strength is PRIMARY)
                    return Collator.LESS;
                } else {
                    // (strength is PRIMARY)
                    return Collator.GREATER;
                }
            }
        } else {
            // else of if ( pSOrder != pTOrder )
            // primary order is the same, but complete order is different. So there
            // are no base elements at this point, only ignorables (Since the strings are
            // normalized)
            if (checkSecTer) {
                // a secondary or tertiary difference may still matter
                short secSOrder = CollationElementIterator.secondaryOrder(sOrder);
                short secTOrder = CollationElementIterator.secondaryOrder(tOrder);
                if (secSOrder != secTOrder) {
                    // there is a secondary difference
                    result = (secSOrder < secTOrder) ? Collator.LESS : Collator.GREATER;
                    // (strength is SECONDARY)
                    checkSecTer = false;
                // (even in french, only the first secondary difference within
                // a base character matters)
                } else {
                    if (checkTertiary) {
                        // a tertiary difference may still matter
                        short terSOrder = CollationElementIterator.tertiaryOrder(sOrder);
                        short terTOrder = CollationElementIterator.tertiaryOrder(tOrder);
                        if (terSOrder != terTOrder) {
                            // there is a tertiary difference
                            result = (terSOrder < terTOrder) ? Collator.LESS : Collator.GREATER;
                            // (strength is TERTIARY)
                            checkTertiary = false;
                        }
                    }
                }
            }
        // if (checkSecTer)
        }
    // if ( pSOrder != pTOrder )
    }
    // while()
    if (sOrder != CollationElementIterator.NULLORDER) {
        // (tOrder must be CollationElementIterator::NULLORDER,
        // since this point is only reached when sOrder or tOrder is NULLORDER.)
        // The source string has more elements, but the target string hasn't.
        do {
            if (CollationElementIterator.primaryOrder(sOrder) != 0) {
                // We found an additional non-ignorable base character in the source string.
                // This is a primary difference, so the source is greater
                // (strength is PRIMARY)
                return Collator.GREATER;
            } else if (CollationElementIterator.secondaryOrder(sOrder) != 0) {
                // Additional secondary elements mean the source string is greater
                if (checkSecTer) {
                    // (strength is SECONDARY)
                    result = Collator.GREATER;
                    checkSecTer = false;
                }
            }
        } while ((sOrder = sourceCursor.next()) != CollationElementIterator.NULLORDER);
    } else if (tOrder != CollationElementIterator.NULLORDER) {
        // The target string has more elements, but the source string hasn't.
        do {
            if (CollationElementIterator.primaryOrder(tOrder) != 0)
                // We found an additional non-ignorable base character in the target string.
                // This is a primary difference, so the source is less
                // (strength is PRIMARY)
                return Collator.LESS;
            else if (CollationElementIterator.secondaryOrder(tOrder) != 0) {
                // Additional secondary elements in the target mean the source string is less
                if (checkSecTer) {
                    // (strength is SECONDARY)
                    result = Collator.LESS;
                    checkSecTer = false;
                }
            }
        } while ((tOrder = targetCursor.next()) != CollationElementIterator.NULLORDER);
    }
    // For IDENTICAL comparisons, we use a bitwise character comparison
    // as a tiebreaker if all else is equal
    if (result == 0 && getStrength() == IDENTICAL) {
        int mode = getDecomposition();
        Normalizer.Form form;
        if (mode == CANONICAL_DECOMPOSITION) {
            form = Normalizer.Form.NFD;
        } else if (mode == FULL_DECOMPOSITION) {
            form = Normalizer.Form.NFKD;
        } else {
            return source.compareTo(target);
        }
        String sourceDecomposition = Normalizer.normalize(source, form);
        String targetDecomposition = Normalizer.normalize(target, form);
        return sourceDecomposition.compareTo(targetDecomposition);
    }
    return result;
}