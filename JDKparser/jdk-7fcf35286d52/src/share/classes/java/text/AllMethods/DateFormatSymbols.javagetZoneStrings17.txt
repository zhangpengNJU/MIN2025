/**
 * Gets time zone strings.  Use of this method is discouraged; use
 * {@link java.util.TimeZone#getDisplayName() TimeZone.getDisplayName()}
 * instead.
 * <p>
 * The value returned is a
 * two-dimensional array of strings of size <em>n</em> by <em>m</em>,
 * where <em>m</em> is at least 5.  Each of the <em>n</em> rows is an
 * entry containing the localized names for a single <code>TimeZone</code>.
 * Each such row contains (with <code>i</code> ranging from
 * 0..<em>n</em>-1):
 * <ul>
 * <li><code>zoneStrings[i][0]</code> - time zone ID</li>
 * <li><code>zoneStrings[i][1]</code> - long name of zone in standard
 * time</li>
 * <li><code>zoneStrings[i][2]</code> - short name of zone in
 * standard time</li>
 * <li><code>zoneStrings[i][3]</code> - long name of zone in daylight
 * saving time</li>
 * <li><code>zoneStrings[i][4]</code> - short name of zone in daylight
 * saving time</li>
 * </ul>
 * The zone ID is <em>not</em> localized; it's one of the valid IDs of
 * the {@link java.util.TimeZone TimeZone} class that are not
 * <a href="../util/TimeZone.html#CustomID">custom IDs</a>.
 * All other entries are localized names.  If a zone does not implement
 * daylight saving time, the daylight saving time names should not be used.
 * <p>
 * If {@link #setZoneStrings(String[][]) setZoneStrings} has been called
 * on this <code>DateFormatSymbols</code> instance, then the strings
 * provided by that call are returned. Otherwise, the returned array
 * contains names provided by the Java runtime and by installed
 * {@link java.util.spi.TimeZoneNameProvider TimeZoneNameProvider}
 * implementations.
 *
 * @return the time zone strings.
 * @see #setZoneStrings(String[][])
 */
public String[][] getZoneStrings() {
    return getZoneStringsImpl(true);
}