/**
 * Parses the string.
 *
 * <p>Caveats: The parse may fail in a number of circumstances.
 * For example:
 * <ul>
 * <li>If one of the arguments does not occur in the pattern.
 * <li>If the format of an argument loses information, such as
 *     with a choice format where a large number formats to "many".
 * <li>Does not yet handle recursion (where
 *     the substituted strings contain {n} references.)
 * <li>Will not always find a match (or the correct match)
 *     if some part of the parse is ambiguous.
 *     For example, if the pattern "{1},{2}" is used with the
 *     string arguments {"a,b", "c"}, it will format as "a,b,c".
 *     When the result is parsed, it will return {"a", "b,c"}.
 * <li>If a single argument is parsed more than once in the string,
 *     then the later parse wins.
 * </ul>
 * When the parse fails, use ParsePosition.getErrorIndex() to find out
 * where in the string the parsing failed.  The returned error
 * index is the starting offset of the sub-patterns that the string
 * is comparing with.  For example, if the parsing string "AAA {0} BBB"
 * is comparing against the pattern "AAD {0} BBB", the error index is
 * 0. When an error occurs, the call to this method will return null.
 * If the source is null, return an empty array.
 *
 * @param source the string to parse
 * @param pos    the parse position
 * @return an array of parsed objects
 */
public Object[] parse(String source, ParsePosition pos) {
    if (source == null) {
        Object[] empty = {};
        return empty;
    }
    int maximumArgumentNumber = -1;
    for (int i = 0; i <= maxOffset; i++) {
        if (argumentNumbers[i] > maximumArgumentNumber) {
            maximumArgumentNumber = argumentNumbers[i];
        }
    }
    Object[] resultArray = new Object[maximumArgumentNumber + 1];
    int patternOffset = 0;
    int sourceOffset = pos.index;
    ParsePosition tempStatus = new ParsePosition(0);
    for (int i = 0; i <= maxOffset; ++i) {
        // match up to format
        int len = offsets[i] - patternOffset;
        if (len == 0 || pattern.regionMatches(patternOffset, source, sourceOffset, len)) {
            sourceOffset += len;
            patternOffset += len;
        } else {
            pos.errorIndex = sourceOffset;
            // leave index as is to signal error
            return null;
        }
        // now use format
        if (formats[i] == null) {
            // string format
            // if at end, use longest possible match
            // otherwise uses first match to intervening string
            // does NOT recursively try all possibilities
            int tempLength = (i != maxOffset) ? offsets[i + 1] : pattern.length();
            int next;
            if (patternOffset >= tempLength) {
                next = source.length();
            } else {
                next = source.indexOf(pattern.substring(patternOffset, tempLength), sourceOffset);
            }
            if (next < 0) {
                pos.errorIndex = sourceOffset;
                // leave index as is to signal error
                return null;
            } else {
                String strValue = source.substring(sourceOffset, next);
                if (!strValue.equals("{" + argumentNumbers[i] + "}"))
                    resultArray[argumentNumbers[i]] = source.substring(sourceOffset, next);
                sourceOffset = next;
            }
        } else {
            tempStatus.index = sourceOffset;
            resultArray[argumentNumbers[i]] = formats[i].parseObject(source, tempStatus);
            if (tempStatus.index == sourceOffset) {
                pos.errorIndex = sourceOffset;
                // leave index as is to signal error
                return null;
            }
            // update
            sourceOffset = tempStatus.index;
        }
    }
    int len = pattern.length() - patternOffset;
    if (len == 0 || pattern.regionMatches(patternOffset, source, sourceOffset, len)) {
        pos.index = sourceOffset + len;
    } else {
        pos.errorIndex = sourceOffset;
        // leave index as is to signal error
        return null;
    }
    return resultArray;
}