/**
 * Writes default serializable fields to stream.  Writes
 * a list of serializable <code>ItemListeners</code>
 * and <code>ActionListeners</code> as optional data.
 * The non-serializable listeners are detected and
 * no attempt is made to serialize them.
 *
 * @serialData <code>null</code> terminated sequence of 0
 *  or more pairs; the pair consists of a <code>String</code>
 *  and an <code>Object</code>; the <code>String</code>
 *  indicates the type of object and is one of the
 *  following:
 *  <code>itemListenerK</code> indicating an
 *    <code>ItemListener</code> object;
 *  <code>actionListenerK</code> indicating an
 *    <code>ActionListener</code> object
 *
 * @param s the <code>ObjectOutputStream</code> to write
 * @see AWTEventMulticaster#save(ObjectOutputStream, String, EventListener)
 * @see java.awt.Component#itemListenerK
 * @see java.awt.Component#actionListenerK
 * @see #readObject(ObjectInputStream)
 */
private void writeObject(ObjectOutputStream s) throws IOException {
    synchronized (this) {
        ListPeer peer = (ListPeer) this.peer;
        if (peer != null) {
            selected = peer.getSelectedIndexes();
        }
    }
    s.defaultWriteObject();
    AWTEventMulticaster.save(s, itemListenerK, itemListener);
    AWTEventMulticaster.save(s, actionListenerK, actionListener);
    s.writeObject(null);
}