/**
 * Registers the specified listener to receive <i>preference change
 * events</i> for this preference node.  A preference change event is
 * generated when a preference is added to this node, removed from this
 * node, or when the value associated with a preference is changed.
 * (Preference change events are <i>not</i> generated by the {@link
 * #removeNode()} method, which generates a <i>node change event</i>.
 * Preference change events <i>are</i> generated by the <tt>clear</tt>
 * method.)
 *
 * <p>Events are only guaranteed for changes made within the same JVM
 * as the registered listener, though some implementations may generate
 * events for changes made outside this JVM.  Events may be generated
 * before the changes have been made persistent.  Events are not generated
 * when preferences are modified in descendants of this node; a caller
 * desiring such events must register with each descendant.
 *
 * @param pcl The preference change listener to add.
 * @throws NullPointerException if <tt>pcl</tt> is null.
 * @throws IllegalStateException if this node (or an ancestor) has been
 *         removed with the {@link #removeNode()} method.
 * @see #removePreferenceChangeListener(PreferenceChangeListener)
 * @see #addNodeChangeListener(NodeChangeListener)
 */
public abstract void addPreferenceChangeListener(PreferenceChangeListener pcl);