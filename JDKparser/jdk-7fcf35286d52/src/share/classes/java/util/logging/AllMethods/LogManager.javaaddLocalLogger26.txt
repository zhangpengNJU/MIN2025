// Add a logger to this context.  This method will only set its level
// and process parent loggers.  It doesn't set its handlers.
synchronized boolean addLocalLogger(Logger logger, boolean addDefaultLoggersIfNeeded) {
    // addDefaultLoggersIfNeeded serves to break recursion when adding
    // default loggers. If we're adding one of the default loggers
    // (we're being called from ensureDefaultLogger()) then
    // addDefaultLoggersIfNeeded will be false: we don't want to
    // call ensureAllDefaultLoggers again.
    // 
    // Note: addDefaultLoggersIfNeeded can also be false when
    // requiresDefaultLoggers is false - since calling
    // ensureAllDefaultLoggers would have no effect in this case.
    if (addDefaultLoggersIfNeeded) {
        ensureAllDefaultLoggers(logger);
    }
    final String name = logger.getName();
    if (name == null) {
        throw new NullPointerException();
    }
    LoggerWeakRef ref = namedLoggers.get(name);
    if (ref != null) {
        if (ref.get() == null) {
            // It's possible that the Logger was GC'ed after a
            // drainLoggerRefQueueBounded() call above so allow
            // a new one to be registered.
            ref.dispose();
        } else {
            // We already have a registered logger with the given name.
            return false;
        }
    }
    // We're adding a new logger.
    // Note that we are creating a weak reference here.
    final LogManager owner = getOwner();
    logger.setLogManager(owner);
    ref = owner.new LoggerWeakRef(logger);
    namedLoggers.put(name, ref);
    // Apply any initial level defined for the new logger, unless
    // the logger's level is already initialized
    Level level = owner.getLevelProperty(name + ".level", null);
    if (level != null && !logger.isLevelInitialized()) {
        doSetLevel(logger, level);
    }
    // instantiation of the handler is done in the LogManager.addLogger
    // implementation as a handler class may be only visible to LogManager
    // subclass for the custom log manager case
    processParentHandlers(logger, name);
    // Find the new node and its parent.
    LogNode node = getNode(name);
    node.loggerRef = ref;
    Logger parent = null;
    LogNode nodep = node.parent;
    while (nodep != null) {
        LoggerWeakRef nodeRef = nodep.loggerRef;
        if (nodeRef != null) {
            parent = nodeRef.get();
            if (parent != null) {
                break;
            }
        }
        nodep = nodep.parent;
    }
    if (parent != null) {
        doSetParent(logger, parent);
    }
    // Walk over the children and tell them we are their new parent.
    node.walkAndSetParent(logger);
    // new LogNode is ready so tell the LoggerWeakRef about it
    ref.setNode(node);
    return true;
}