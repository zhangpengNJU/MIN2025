/**
 * Moves to next node after prev, or first node if prev null.
 */
private void advance(Node prev) {
    /*
             * To track and avoid buildup of deleted nodes in the face
             * of calls to both Queue.remove and Itr.remove, we must
             * include variants of unsplice and sweep upon each
             * advance: Upon Itr.remove, we may need to catch up links
             * from lastPred, and upon other removes, we might need to
             * skip ahead from stale nodes and unsplice deleted ones
             * found while advancing.
             */
    // reset lastPred upon possible deletion of lastRet
    Node r, b;
    if ((r = lastRet) != null && !r.isMatched())
        // next lastPred is old lastRet
        lastPred = r;
    else if ((b = lastPred) == null || b.isMatched())
        // at start of list
        lastPred = null;
    else {
        // help with removal of lastPred.next
        Node s, n;
        while ((s = b.next) != null && s != b && s.isMatched() && (n = s.next) != null && n != s) b.casNext(s, n);
    }
    this.lastRet = prev;
    for (Node p = prev, s, n; ; ) {
        s = (p == null) ? head : p.next;
        if (s == null)
            break;
        else if (s == p) {
            p = null;
            continue;
        }
        Object item = s.item;
        if (s.isData) {
            if (item != null && item != s) {
                nextItem = LinkedTransferQueue.<E>cast(item);
                nextNode = s;
                return;
            }
        } else if (item == null)
            break;
        // assert s.isMatched();
        if (p == null)
            p = s;
        else if ((n = s.next) == null)
            break;
        else if (s == n)
            p = null;
        else
            p.casNext(s, n);
    }
    nextNode = null;
    nextItem = null;
}