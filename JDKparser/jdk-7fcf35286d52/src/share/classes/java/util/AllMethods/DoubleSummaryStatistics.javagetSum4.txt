/**
 * Returns the sum of values recorded, or zero if no values have been
 * recorded.
 *
 * If any recorded value is a NaN or the sum is at any point a NaN
 * then the sum will be NaN.
 *
 * <p> The value of a floating-point sum is a function both of the
 * input values as well as the order of addition operations. The
 * order of addition operations of this method is intentionally
 * not defined to allow for implementation flexibility to improve
 * the speed and accuracy of the computed result.
 *
 * In particular, this method may be implemented using compensated
 * summation or other technique to reduce the error bound in the
 * numerical sum compared to a simple summation of {@code double}
 * values.
 *
 * @apiNote Values sorted by increasing absolute magnitude tend to yield
 * more accurate results.
 *
 * @return the sum of values, or zero if none
 */
public final double getSum() {
    // Better error bounds to add both terms as the final sum
    double tmp = sum + sumCompensation;
    if (Double.isNaN(tmp) && Double.isInfinite(simpleSum))
        // If the compensated sum is spuriously NaN from
        // accumulating one or more same-signed infinite values,
        // return the correctly-signed infinity stored in
        // simpleSum.
        return simpleSum;
    else
        return tmp;
}