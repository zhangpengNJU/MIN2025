/**
 * Adds the specified (signed) amount of time to the given calendar field,
 * based on the calendar's rules.
 *
 * <p><em>Add rule 1</em>. The value of <code>field</code>
 * after the call minus the value of <code>field</code> before the
 * call is <code>amount</code>, modulo any overflow that has occurred in
 * <code>field</code>. Overflow occurs when a field value exceeds its
 * range and, as a result, the next larger field is incremented or
 * decremented and the field value is adjusted back into its range.</p>
 *
 * <p><em>Add rule 2</em>. If a smaller field is expected to be
 * invariant, but it is impossible for it to be equal to its
 * prior value because of changes in its minimum or maximum after
 * <code>field</code> is changed, then its value is adjusted to be as close
 * as possible to its expected value. A smaller field represents a
 * smaller unit of time. <code>HOUR</code> is a smaller field than
 * <code>DAY_OF_MONTH</code>. No adjustment is made to smaller fields
 * that are not expected to be invariant. The calendar system
 * determines what fields are expected to be invariant.</p>
 *
 * @param field the calendar field.
 * @param amount the amount of date or time to be added to the field.
 * @exception IllegalArgumentException if <code>field</code> is
 * <code>ZONE_OFFSET</code>, <code>DST_OFFSET</code>, or unknown,
 * or if any calendar fields have out-of-range values in
 * non-lenient mode.
 */
@Override
public void add(int field, int amount) {
    // If amount == 0, do nothing even the given field is out of
    // range. This is tested by JCK.
    if (amount == 0) {
        // Do nothing!
        return;
    }
    if (field < 0 || field >= ZONE_OFFSET) {
        throw new IllegalArgumentException();
    }
    // Sync the time and calendar fields.
    complete();
    if (field == YEAR) {
        LocalGregorianCalendar.Date d = (LocalGregorianCalendar.Date) jdate.clone();
        d.addYear(amount);
        pinDayOfMonth(d);
        set(ERA, getEraIndex(d));
        set(YEAR, d.getYear());
        set(MONTH, d.getMonth() - 1);
        set(DAY_OF_MONTH, d.getDayOfMonth());
    } else if (field == MONTH) {
        LocalGregorianCalendar.Date d = (LocalGregorianCalendar.Date) jdate.clone();
        d.addMonth(amount);
        pinDayOfMonth(d);
        set(ERA, getEraIndex(d));
        set(YEAR, d.getYear());
        set(MONTH, d.getMonth() - 1);
        set(DAY_OF_MONTH, d.getDayOfMonth());
    } else if (field == ERA) {
        int era = internalGet(ERA) + amount;
        if (era < 0) {
            era = 0;
        } else if (era > eras.length - 1) {
            era = eras.length - 1;
        }
        set(ERA, era);
    } else {
        long delta = amount;
        long timeOfDay = 0;
        switch(field) {
            // Handle the time fields here. Convert the given
            // amount to milliseconds and call setTimeInMillis.
            case HOUR:
            case HOUR_OF_DAY:
                // hours to milliseconds
                delta *= 60 * 60 * 1000;
                break;
            case MINUTE:
                // minutes to milliseconds
                delta *= 60 * 1000;
                break;
            case SECOND:
                // seconds to milliseconds
                delta *= 1000;
                break;
            case MILLISECOND:
                break;
            // Handle week, day and AM_PM fields which involves
            // time zone offset change adjustment. Convert the
            // given amount to the number of days.
            case WEEK_OF_YEAR:
            case WEEK_OF_MONTH:
            case DAY_OF_WEEK_IN_MONTH:
                delta *= 7;
                break;
            // synonym of DATE
            case DAY_OF_MONTH:
            case DAY_OF_YEAR:
            case DAY_OF_WEEK:
                break;
            case AM_PM:
                // Convert the amount to the number of days (delta)
                // and +12 or -12 hours (timeOfDay).
                delta = amount / 2;
                timeOfDay = 12 * (amount % 2);
                break;
        }
        // The time fields don't require time zone offset change
        // adjustment.
        if (field >= HOUR) {
            setTimeInMillis(time + delta);
            return;
        }
        // The rest of the fields (week, day or AM_PM fields)
        // require time zone offset (both GMT and DST) change
        // adjustment.
        // Translate the current time to the fixed date and time
        // of the day.
        long fd = cachedFixedDate;
        timeOfDay += internalGet(HOUR_OF_DAY);
        timeOfDay *= 60;
        timeOfDay += internalGet(MINUTE);
        timeOfDay *= 60;
        timeOfDay += internalGet(SECOND);
        timeOfDay *= 1000;
        timeOfDay += internalGet(MILLISECOND);
        if (timeOfDay >= ONE_DAY) {
            fd++;
            timeOfDay -= ONE_DAY;
        } else if (timeOfDay < 0) {
            fd--;
            timeOfDay += ONE_DAY;
        }
        // fd is the expected fixed date after the calculation
        fd += delta;
        int zoneOffset = internalGet(ZONE_OFFSET) + internalGet(DST_OFFSET);
        setTimeInMillis((fd - EPOCH_OFFSET) * ONE_DAY + timeOfDay - zoneOffset);
        zoneOffset -= internalGet(ZONE_OFFSET) + internalGet(DST_OFFSET);
        // If the time zone offset has changed, then adjust the difference.
        if (zoneOffset != 0) {
            setTimeInMillis(time + zoneOffset);
            long fd2 = cachedFixedDate;
            // If the adjustment has changed the date, then take
            // the previous one.
            if (fd2 != fd) {
                setTimeInMillis(time - zoneOffset);
            }
        }
    }
}