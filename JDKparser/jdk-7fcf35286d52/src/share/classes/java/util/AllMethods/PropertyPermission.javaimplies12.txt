/**
 * Check and see if this set of permissions implies the permissions
 * expressed in "permission".
 *
 * @param permission the Permission object to compare
 *
 * @return true if "permission" is a proper subset of a permission in
 * the set, false if not.
 */
public boolean implies(Permission permission) {
    if (!(permission instanceof PropertyPermission))
        return false;
    PropertyPermission pp = (PropertyPermission) permission;
    PropertyPermission x;
    int desired = pp.getMask();
    int effective = 0;
    // short circuit if the "*" Permission was added
    if (all_allowed) {
        synchronized (this) {
            x = perms.get("*");
        }
        if (x != null) {
            effective |= x.getMask();
            if ((effective & desired) == desired)
                return true;
        }
    }
    // strategy:
    // Check for full match first. Then work our way up the
    // name looking for matches on a.b.*
    String name = pp.getName();
    // System.out.println("check "+name);
    synchronized (this) {
        x = perms.get(name);
    }
    if (x != null) {
        // we have a direct hit!
        effective |= x.getMask();
        if ((effective & desired) == desired)
            return true;
    }
    // work our way up the tree...
    int last, offset;
    offset = name.length() - 1;
    while ((last = name.lastIndexOf(".", offset)) != -1) {
        name = name.substring(0, last + 1) + "*";
        // System.out.println("check "+name);
        synchronized (this) {
            x = perms.get(name);
        }
        if (x != null) {
            effective |= x.getMask();
            if ((effective & desired) == desired)
                return true;
        }
        offset = last - 1;
    }
    // we don't have to check for "*" as it was already checked
    // at the top (all_allowed), so we just return false
    return false;
}