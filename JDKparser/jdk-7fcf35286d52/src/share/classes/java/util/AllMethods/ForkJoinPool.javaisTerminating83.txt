/**
 * Returns {@code true} if the process of termination has
 * commenced but not yet completed.  This method may be useful for
 * debugging. A return of {@code true} reported a sufficient
 * period after shutdown may indicate that submitted tasks have
 * ignored or suppressed interruption, or are waiting for I/O,
 * causing this executor not to properly terminate. (See the
 * advisory notes for class {@link ForkJoinTask} stating that
 * tasks should not normally entail blocking operations.  But if
 * they do, they must abort them on interrupt.)
 *
 * @return {@code true} if terminating but not yet terminated
 */
public boolean isTerminating() {
    int rs = runState;
    return (rs & STOP) != 0 && (rs & TERMINATED) == 0;
}