/**
 * If the specified key is not already associated with a value,
 * attempts to compute its value using the given mapping function
 * and enters it into this map unless {@code null}.  The function
 * is <em>NOT</em> guaranteed to be applied once atomically only
 * if the value is not present.
 *
 * @param key key with which the specified value is to be associated
 * @param mappingFunction the function to compute a value
 * @return the current (existing or computed) value associated with
 *         the specified key, or null if the computed value is null
 * @throws NullPointerException if the specified key is null
 *         or the mappingFunction is null
 * @since 1.8
 */
public V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction) {
    if (key == null || mappingFunction == null)
        throw new NullPointerException();
    V v, p, r;
    if ((v = doGet(key)) == null && (r = mappingFunction.apply(key)) != null)
        v = (p = doPut(key, r, true)) == null ? r : p;
    return v;
}