/**
 * Performs a <a href="package-summary.html#Reduction">reduction</a> on the
 * elements of this stream, using the provided identity value and an
 * <a href="package-summary.html#Associativity">associative</a>
 * accumulation function, and returns the reduced value.  This is equivalent
 * to:
 * <pre>{@code
 *     long result = identity;
 *     for (long element : this stream)
 *         result = accumulator.applyAsLong(result, element)
 *     return result;
 * }</pre>
 *
 * but is not constrained to execute sequentially.
 *
 * <p>The {@code identity} value must be an identity for the accumulator
 * function. This means that for all {@code x},
 * {@code accumulator.apply(identity, x)} is equal to {@code x}.
 * The {@code accumulator} function must be an
 * <a href="package-summary.html#Associativity">associative</a> function.
 *
 * <p>This is a <a href="package-summary.html#StreamOps">terminal
 * operation</a>.
 *
 * @apiNote Sum, min, max, and average are all special cases of reduction.
 * Summing a stream of numbers can be expressed as:
 *
 * <pre>{@code
 *     long sum = integers.reduce(0, (a, b) -> a+b);
 * }</pre>
 *
 * or more compactly:
 *
 * <pre>{@code
 *     long sum = integers.reduce(0, Long::sum);
 * }</pre>
 *
 * <p>While this may seem a more roundabout way to perform an aggregation
 * compared to simply mutating a running total in a loop, reduction
 * operations parallelize more gracefully, without needing additional
 * synchronization and with greatly reduced risk of data races.
 *
 * @param identity the identity value for the accumulating function
 * @param op an <a href="package-summary.html#Associativity">associative</a>,
 *           <a href="package-summary.html#NonInterference">non-interfering</a>,
 *           <a href="package-summary.html#Statelessness">stateless</a>
 *           function for combining two values
 * @return the result of the reduction
 * @see #sum()
 * @see #min()
 * @see #max()
 * @see #average()
 */
long reduce(long identity, LongBinaryOperator op);