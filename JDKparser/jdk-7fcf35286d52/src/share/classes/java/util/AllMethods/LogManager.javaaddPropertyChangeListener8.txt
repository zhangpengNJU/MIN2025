/**
 * Adds an event listener to be invoked when the logging
 * properties are re-read. Adding multiple instances of
 * the same event Listener results in multiple entries
 * in the property event listener table.
 *
 * <p><b>WARNING:</b> This method is omitted from this class in all subset
 * Profiles of Java SE that do not include the {@code java.beans} package.
 * </p>
 *
 * @param l  event listener
 * @exception  SecurityException  if a security manager exists and if
 *             the caller does not have LoggingPermission("control").
 * @exception NullPointerException if the PropertyChangeListener is null.
 * @deprecated The dependency on {@code PropertyChangeListener} creates a
 *             significant impediment to future modularization of the Java
 *             platform. This method will be removed in a future release.
 *             The global {@code LogManager} can detect changes to the
 *             logging configuration by overridding the {@link
 *             #readConfiguration readConfiguration} method.
 */
@Deprecated
public void addPropertyChangeListener(PropertyChangeListener l) throws SecurityException {
    PropertyChangeListener listener = Objects.requireNonNull(l);
    checkPermission();
    synchronized (listenerMap) {
        // increment the registration count if already registered
        Integer value = listenerMap.get(listener);
        value = (value == null) ? 1 : (value + 1);
        listenerMap.put(listener, value);
    }
}