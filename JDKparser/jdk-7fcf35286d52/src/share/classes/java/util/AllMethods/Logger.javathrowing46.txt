/**
 * Log throwing an exception.
 * <p>
 * This is a convenience method to log that a method is
 * terminating by throwing an exception.  The logging is done
 * using the FINER level.
 * <p>
 * If the logger is currently enabled for the given message
 * level then the given arguments are stored in a LogRecord
 * which is forwarded to all registered output handlers.  The
 * LogRecord's message is set to "THROW".
 * <p>
 * Note that the thrown argument is stored in the LogRecord thrown
 * property, rather than the LogRecord parameters property.  Thus it is
 * processed specially by output Formatters and is not treated
 * as a formatting parameter to the LogRecord message property.
 * <p>
 * @param   sourceClass    name of class that issued the logging request
 * @param   sourceMethod  name of the method.
 * @param   thrown  The Throwable that is being thrown.
 */
public void throwing(String sourceClass, String sourceMethod, Throwable thrown) {
    if (!isLoggable(Level.FINER)) {
        return;
    }
    LogRecord lr = new LogRecord(Level.FINER, "THROW");
    lr.setSourceClassName(sourceClass);
    lr.setSourceMethodName(sourceMethod);
    lr.setThrown(thrown);
    doLog(lr);
}