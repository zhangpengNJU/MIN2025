/**
 * Resets this matcher and then attempts to find the next subsequence of
 * the input sequence that matches the pattern, starting at the specified
 * index.
 *
 * <p> If the match succeeds then more information can be obtained via the
 * <tt>start</tt>, <tt>end</tt>, and <tt>group</tt> methods, and subsequent
 * invocations of the {@link #find()} method will start at the first
 * character not matched by this match.  </p>
 *
 * @param start the index to start searching for a match
 * @throws  IndexOutOfBoundsException
 *          If start is less than zero or if start is greater than the
 *          length of the input sequence.
 *
 * @return  <tt>true</tt> if, and only if, a subsequence of the input
 *          sequence starting at the given index matches this matcher's
 *          pattern
 */
public boolean find(int start) {
    int limit = getTextLength();
    if ((start < 0) || (start > limit))
        throw new IndexOutOfBoundsException("Illegal start index");
    reset();
    return search(start);
}