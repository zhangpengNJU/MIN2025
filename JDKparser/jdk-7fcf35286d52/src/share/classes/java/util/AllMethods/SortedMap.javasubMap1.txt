/**
 * Returns a view of the portion of this map whose keys range from
 * {@code fromKey}, inclusive, to {@code toKey}, exclusive.  (If
 * {@code fromKey} and {@code toKey} are equal, the returned map
 * is empty.)  The returned map is backed by this map, so changes
 * in the returned map are reflected in this map, and vice-versa.
 * The returned map supports all optional map operations that this
 * map supports.
 *
 * <p>The returned map will throw an {@code IllegalArgumentException}
 * on an attempt to insert a key outside its range.
 *
 * @param fromKey low endpoint (inclusive) of the keys in the returned map
 * @param toKey high endpoint (exclusive) of the keys in the returned map
 * @return a view of the portion of this map whose keys range from
 *         {@code fromKey}, inclusive, to {@code toKey}, exclusive
 * @throws ClassCastException if {@code fromKey} and {@code toKey}
 *         cannot be compared to one another using this map's comparator
 *         (or, if the map has no comparator, using natural ordering).
 *         Implementations may, but are not required to, throw this
 *         exception if {@code fromKey} or {@code toKey}
 *         cannot be compared to keys currently in the map.
 * @throws NullPointerException if {@code fromKey} or {@code toKey}
 *         is null and this map does not permit null keys
 * @throws IllegalArgumentException if {@code fromKey} is greater than
 *         {@code toKey}; or if this map itself has a restricted
 *         range, and {@code fromKey} or {@code toKey} lies
 *         outside the bounds of the range
 */
SortedMap<K, V> subMap(K fromKey, K toKey);