/**
 * The main timer loop.  (See class comment.)
 */
private void mainLoop() {
    while (true) {
        try {
            TimerTask task;
            boolean taskFired;
            synchronized (queue) {
                // Wait for queue to become non-empty
                while (queue.isEmpty() && newTasksMayBeScheduled) queue.wait();
                if (queue.isEmpty())
                    // Queue is empty and will forever remain; die
                    break;
                // Queue nonempty; look at first evt and do the right thing
                long currentTime, executionTime;
                task = queue.getMin();
                synchronized (task.lock) {
                    if (task.state == TimerTask.CANCELLED) {
                        queue.removeMin();
                        // No action required, poll queue again
                        continue;
                    }
                    currentTime = System.currentTimeMillis();
                    executionTime = task.nextExecutionTime;
                    if (taskFired = (executionTime <= currentTime)) {
                        if (task.period == 0) {
                            // Non-repeating, remove
                            queue.removeMin();
                            task.state = TimerTask.EXECUTED;
                        } else {
                            // Repeating task, reschedule
                            queue.rescheduleMin(task.period < 0 ? currentTime - task.period : executionTime + task.period);
                        }
                    }
                }
                if (// Task hasn't yet fired; wait
                !taskFired)
                    queue.wait(executionTime - currentTime);
            }
            if (// Task fired; run it, holding no locks
            taskFired)
                task.run();
        } catch (InterruptedException e) {
        }
    }
}