static <E> Iterator<E> singletonIterator(final E e) {
    return new Iterator<E>() {

        private boolean hasNext = true;

        public boolean hasNext() {
            return hasNext;
        }

        public E next() {
            if (hasNext) {
                hasNext = false;
                return e;
            }
            throw new NoSuchElementException();
        }

        public void remove() {
            throw new UnsupportedOperationException();
        }

        @Override
        public void forEachRemaining(Consumer<? super E> action) {
            Objects.requireNonNull(action);
            if (hasNext) {
                action.accept(e);
                hasNext = false;
            }
        }
    };
}