@Override
Sink<P_OUT> opWrapSink(int flags, Sink<Double> sink) {
    return new Sink.ChainedReference<P_OUT, Double>(sink) {

        // true if cancellationRequested() has been called
        boolean cancellationRequestedCalled;

        // cache the consumer to avoid creation on every accepted element
        DoubleConsumer downstreamAsDouble = downstream::accept;

        @Override
        public void begin(long size) {
            downstream.begin(-1);
        }

        @Override
        public void accept(P_OUT u) {
            try (DoubleStream result = mapper.apply(u)) {
                if (result != null) {
                    if (!cancellationRequestedCalled) {
                        result.sequential().forEach(downstreamAsDouble);
                    } else {
                        Spliterator.OfDouble s = result.sequential().spliterator();
                        do {
                        } while (!downstream.cancellationRequested() && s.tryAdvance(downstreamAsDouble));
                    }
                }
            }
        }

        @Override
        public boolean cancellationRequested() {
            cancellationRequestedCalled = true;
            return downstream.cancellationRequested();
        }
    };
}