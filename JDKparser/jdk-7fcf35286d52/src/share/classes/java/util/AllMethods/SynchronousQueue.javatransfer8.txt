/**
 * Puts or takes an item.
 */
@SuppressWarnings("unchecked")
E transfer(E e, boolean timed, long nanos) {
    /*
             * Basic algorithm is to loop trying one of three actions:
             *
             * 1. If apparently empty or already containing nodes of same
             *    mode, try to push node on stack and wait for a match,
             *    returning it, or null if cancelled.
             *
             * 2. If apparently containing node of complementary mode,
             *    try to push a fulfilling node on to stack, match
             *    with corresponding waiting node, pop both from
             *    stack, and return matched item. The matching or
             *    unlinking might not actually be necessary because of
             *    other threads performing action 3:
             *
             * 3. If top of stack already holds another fulfilling node,
             *    help it out by doing its match and/or pop
             *    operations, and then continue. The code for helping
             *    is essentially the same as for fulfilling, except
             *    that it doesn't return the item.
             */
    // constructed/reused as needed
    SNode s = null;
    int mode = (e == null) ? REQUEST : DATA;
    for (; ; ) {
        SNode h = head;
        if (h == null || h.mode == mode) {
            // empty or same-mode
            if (timed && nanos <= 0) {
                // can't wait
                if (h != null && h.isCancelled())
                    // pop cancelled node
                    casHead(h, h.next);
                else
                    return null;
            } else if (casHead(h, s = snode(s, e, h, mode))) {
                SNode m = awaitFulfill(s, timed, nanos);
                if (m == s) {
                    // wait was cancelled
                    clean(s);
                    return null;
                }
                if ((h = head) != null && h.next == s)
                    // help s's fulfiller
                    casHead(h, s.next);
                return (E) ((mode == REQUEST) ? m.item : s.item);
            }
        } else if (!isFulfilling(h.mode)) {
            // try to fulfill
            if (// already cancelled
            h.isCancelled())
                // pop and retry
                casHead(h, h.next);
            else if (casHead(h, s = snode(s, e, h, FULFILLING | mode))) {
                for (; ; ) {
                    // loop until matched or waiters disappear
                    // m is s's match
                    SNode m = s.next;
                    if (m == null) {
                        // all waiters are gone
                        // pop fulfill node
                        casHead(s, null);
                        // use new node next time
                        s = null;
                        // restart main loop
                        break;
                    }
                    SNode mn = m.next;
                    if (m.tryMatch(s)) {
                        // pop both s and m
                        casHead(s, mn);
                        return (E) ((mode == REQUEST) ? m.item : s.item);
                    } else
                        // lost match
                        // help unlink
                        s.casNext(m, mn);
                }
            }
        } else {
            // help a fulfiller
            // m is h's match
            SNode m = h.next;
            if (// waiter is gone
            m == null)
                // pop fulfilling node
                casHead(h, null);
            else {
                SNode mn = m.next;
                if (// help match
                m.tryMatch(h))
                    // pop both h and m
                    casHead(h, mn);
                else
                    // lost match
                    // help unlink
                    h.casNext(m, mn);
            }
        }
    }
}