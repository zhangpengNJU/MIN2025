/**
 * Writes this property list (key and element pairs) in this
 * {@code Properties} table to the output character stream in a
 * format suitable for using the {@link #load(java.io.Reader) load(Reader)}
 * method.
 * <p>
 * Properties from the defaults table of this {@code Properties}
 * table (if any) are <i>not</i> written out by this method.
 * <p>
 * If the comments argument is not null, then an ASCII {@code #}
 * character, the comments string, and a line separator are first written
 * to the output stream. Thus, the {@code comments} can serve as an
 * identifying comment. Any one of a line feed ('\n'), a carriage
 * return ('\r'), or a carriage return followed immediately by a line feed
 * in comments is replaced by a line separator generated by the {@code Writer}
 * and if the next character in comments is not character {@code #} or
 * character {@code !} then an ASCII {@code #} is written out
 * after that line separator.
 * <p>
 * Next, a comment line is always written, consisting of an ASCII
 * {@code #} character, the current date and time (as if produced
 * by the {@code toString} method of {@code Date} for the
 * current time), and a line separator as generated by the {@code Writer}.
 * <p>
 * Then every entry in this {@code Properties} table is
 * written out, one per line. For each entry the key string is
 * written, then an ASCII {@code =}, then the associated
 * element string. For the key, all space characters are
 * written with a preceding {@code \} character.  For the
 * element, leading space characters, but not embedded or trailing
 * space characters, are written with a preceding {@code \}
 * character. The key and element characters {@code #},
 * {@code !}, {@code =}, and {@code :} are written
 * with a preceding backslash to ensure that they are properly loaded.
 * <p>
 * After the entries have been written, the output stream is flushed.
 * The output stream remains open after this method returns.
 * <p>
 *
 * @param   writer      an output character stream writer.
 * @param   comments   a description of the property list.
 * @exception  IOException if writing this property list to the specified
 *             output stream throws an <tt>IOException</tt>.
 * @exception  ClassCastException  if this {@code Properties} object
 *             contains any keys or values that are not {@code Strings}.
 * @exception  NullPointerException  if {@code writer} is null.
 * @since 1.6
 */
public void store(Writer writer, String comments) throws IOException {
    store0((writer instanceof BufferedWriter) ? (BufferedWriter) writer : new BufferedWriter(writer), comments, false);
}