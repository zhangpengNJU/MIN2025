/**
 * Acquires the given number of permits from this semaphore, if all
 * become available within the given waiting time and the current
 * thread has not been {@linkplain Thread#interrupt interrupted}.
 *
 * <p>Acquires the given number of permits, if they are available and
 * returns immediately, with the value {@code true},
 * reducing the number of available permits by the given amount.
 *
 * <p>If insufficient permits are available then
 * the current thread becomes disabled for thread scheduling
 * purposes and lies dormant until one of three things happens:
 * <ul>
 * <li>Some other thread invokes one of the {@link #release() release}
 * methods for this semaphore, the current thread is next to be assigned
 * permits and the number of available permits satisfies this request; or
 * <li>Some other thread {@linkplain Thread#interrupt interrupts}
 * the current thread; or
 * <li>The specified waiting time elapses.
 * </ul>
 *
 * <p>If the permits are acquired then the value {@code true} is returned.
 *
 * <p>If the current thread:
 * <ul>
 * <li>has its interrupted status set on entry to this method; or
 * <li>is {@linkplain Thread#interrupt interrupted} while waiting
 * to acquire the permits,
 * </ul>
 * then {@link InterruptedException} is thrown and the current thread's
 * interrupted status is cleared.
 * Any permits that were to be assigned to this thread, are instead
 * assigned to other threads trying to acquire permits, as if
 * the permits had been made available by a call to {@link #release()}.
 *
 * <p>If the specified waiting time elapses then the value {@code false}
 * is returned.  If the time is less than or equal to zero, the method
 * will not wait at all.  Any permits that were to be assigned to this
 * thread, are instead assigned to other threads trying to acquire
 * permits, as if the permits had been made available by a call to
 * {@link #release()}.
 *
 * @param permits the number of permits to acquire
 * @param timeout the maximum time to wait for the permits
 * @param unit the time unit of the {@code timeout} argument
 * @return {@code true} if all permits were acquired and {@code false}
 *         if the waiting time elapsed before all permits were acquired
 * @throws InterruptedException if the current thread is interrupted
 * @throws IllegalArgumentException if {@code permits} is negative
 */
public boolean tryAcquire(int permits, long timeout, TimeUnit unit) throws InterruptedException {
    if (permits < 0)
        throw new IllegalArgumentException();
    return sync.tryAcquireSharedNanos(permits, unit.toNanos(timeout));
}