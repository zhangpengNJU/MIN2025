/**
 * Log a lazily constructed message, specifying source class and method,
 * with associated Throwable information.
 * <p>
 * If the logger is currently enabled for the given message level then the
 * message is constructed by invoking the provided supplier function. The
 * message and the given {@link Throwable} are then stored in a {@link
 * LogRecord} which is forwarded to all registered output handlers.
 * <p>
 * Note that the thrown argument is stored in the LogRecord thrown
 * property, rather than the LogRecord parameters property.  Thus it is
 * processed specially by output Formatters and is not treated
 * as a formatting parameter to the LogRecord message property.
 * <p>
 * @param   level   One of the message level identifiers, e.g., SEVERE
 * @param   sourceClass    name of class that issued the logging request
 * @param   sourceMethod   name of method that issued the logging request
 * @param   thrown  Throwable associated with log message.
 * @param   msgSupplier   A function, which when called, produces the
 *                        desired log message
 * @since   1.8
 */
public void logp(Level level, String sourceClass, String sourceMethod, Throwable thrown, Supplier<String> msgSupplier) {
    if (!isLoggable(level)) {
        return;
    }
    LogRecord lr = new LogRecord(level, msgSupplier.get());
    lr.setSourceClassName(sourceClass);
    lr.setSourceMethodName(sourceMethod);
    lr.setThrown(thrown);
    doLog(lr);
}