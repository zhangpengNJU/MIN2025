/**
 * Performs a <a href="package-summary.html#Reduction">reduction</a> on the
 * elements of this stream, using the provided identity, accumulation and
 * combining functions.  This is equivalent to:
 * <pre>{@code
 *     U result = identity;
 *     for (T element : this stream)
 *         result = accumulator.apply(result, element)
 *     return result;
 * }</pre>
 *
 * but is not constrained to execute sequentially.
 *
 * <p>The {@code identity} value must be an identity for the combiner
 * function.  This means that for all {@code u}, {@code combiner(identity, u)}
 * is equal to {@code u}.  Additionally, the {@code combiner} function
 * must be compatible with the {@code accumulator} function; for all
 * {@code u} and {@code t}, the following must hold:
 * <pre>{@code
 *     combiner.apply(u, accumulator.apply(identity, t)) == accumulator.apply(u, t)
 * }</pre>
 *
 * <p>This is a <a href="package-summary.html#StreamOps">terminal
 * operation</a>.
 *
 * @apiNote Many reductions using this form can be represented more simply
 * by an explicit combination of {@code map} and {@code reduce} operations.
 * The {@code accumulator} function acts as a fused mapper and accumulator,
 * which can sometimes be more efficient than separate mapping and reduction,
 * such as when knowing the previously reduced value allows you to avoid
 * some computation.
 *
 * @param <U> The type of the result
 * @param identity the identity value for the combiner function
 * @param accumulator an <a href="package-summary.html#Associativity">associative</a>,
 *                    <a href="package-summary.html#NonInterference">non-interfering</a>,
 *                    <a href="package-summary.html#Statelessness">stateless</a>
 *                    function for incorporating an additional element into a result
 * @param combiner an <a href="package-summary.html#Associativity">associative</a>,
 *                    <a href="package-summary.html#NonInterference">non-interfering</a>,
 *                    <a href="package-summary.html#Statelessness">stateless</a>
 *                    function for combining two values, which must be
 *                    compatible with the accumulator function
 * @return the result of the reduction
 * @see #reduce(BinaryOperator)
 * @see #reduce(Object, BinaryOperator)
 */
<U> U reduce(U identity, BiFunction<U, ? super T, U> accumulator, BinaryOperator<U> combiner);