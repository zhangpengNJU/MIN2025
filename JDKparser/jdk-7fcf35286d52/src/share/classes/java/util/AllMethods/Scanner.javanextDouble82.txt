/**
 * Scans the next token of the input as a <tt>double</tt>.
 * This method will throw <code>InputMismatchException</code>
 * if the next token cannot be translated into a valid double value.
 * If the translation is successful, the scanner advances past the input
 * that matched.
 *
 * <p> If the next token matches the <a
 * href="#Float-regex"><i>Float</i></a> regular expression defined above
 * then the token is converted into a <tt>double</tt> value as if by
 * removing all locale specific prefixes, group separators, and locale
 * specific suffixes, then mapping non-ASCII digits into ASCII
 * digits via {@link Character#digit Character.digit}, prepending a
 * negative sign (-) if the locale specific negative prefixes and suffixes
 * were present, and passing the resulting string to
 * {@link Double#parseDouble Double.parseDouble}. If the token matches
 * the localized NaN or infinity strings, then either "Nan" or "Infinity"
 * is passed to {@link Double#parseDouble(String) Double.parseDouble} as
 * appropriate.
 *
 * @return the <tt>double</tt> scanned from the input
 * @throws InputMismatchException
 *         if the next token does not match the <i>Float</i>
 *         regular expression, or is out of range
 * @throws NoSuchElementException if the input is exhausted
 * @throws IllegalStateException if this scanner is closed
 */
public double nextDouble() {
    // Check cached result
    if ((typeCache != null) && (typeCache instanceof Double)) {
        double val = ((Double) typeCache).doubleValue();
        useTypeCache();
        return val;
    }
    setRadix(10);
    clearCaches();
    // Search for next float
    try {
        return Double.parseDouble(processFloatToken(next(floatPattern())));
    } catch (NumberFormatException nfe) {
        // don't skip bad token
        position = matcher.start();
        throw new InputMismatchException(nfe.getMessage());
    }
}