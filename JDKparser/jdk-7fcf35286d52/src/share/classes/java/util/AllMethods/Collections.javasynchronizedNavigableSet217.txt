/**
 * Returns a synchronized (thread-safe) navigable set backed by the
 * specified navigable set.  In order to guarantee serial access, it is
 * critical that <strong>all</strong> access to the backing navigable set is
 * accomplished through the returned navigable set (or its views).<p>
 *
 * It is imperative that the user manually synchronize on the returned
 * navigable set when iterating over it or any of its {@code subSet},
 * {@code headSet}, or {@code tailSet} views.
 * <pre>
 *  NavigableSet s = Collections.synchronizedNavigableSet(new TreeSet());
 *      ...
 *  synchronized (s) {
 *      Iterator i = s.iterator(); // Must be in the synchronized block
 *      while (i.hasNext())
 *          foo(i.next());
 *  }
 * </pre>
 * or:
 * <pre>
 *  NavigableSet s = Collections.synchronizedNavigableSet(new TreeSet());
 *  NavigableSet s2 = s.headSet(foo, true);
 *      ...
 *  synchronized (s) {  // Note: s, not s2!!!
 *      Iterator i = s2.iterator(); // Must be in the synchronized block
 *      while (i.hasNext())
 *          foo(i.next());
 *  }
 * </pre>
 * Failure to follow this advice may result in non-deterministic behavior.
 *
 * <p>The returned navigable set will be serializable if the specified
 * navigable set is serializable.
 *
 * @param  <T> the class of the objects in the set
 * @param  s the navigable set to be "wrapped" in a synchronized navigable
 * set
 * @return a synchronized view of the specified navigable set
 * @since 1.8
 */
public static <T> NavigableSet<T> synchronizedNavigableSet(NavigableSet<T> s) {
    return new SynchronizedNavigableSet<>(s);
}