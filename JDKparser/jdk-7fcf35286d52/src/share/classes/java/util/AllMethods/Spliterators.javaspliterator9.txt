/**
 * Creates a {@code Spliterator.OfLong} covering a range of elements of a
 * given array, using a customized set of spliterator characteristics.
 *
 * <p>This method is provided as an implementation convenience for
 * Spliterators which store portions of their elements in arrays, and need
 * fine control over Spliterator characteristics.  Most other situations in
 * which a Spliterator for an array is needed should use
 * {@link Arrays#spliterator(long[], int, int)}.
 *
 * <p>The returned spliterator always reports the characteristics
 * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional
 * characteristics for the spliterator to report.  (For example, if it is
 * known the array will not be further modified, specify {@code IMMUTABLE};
 * if the array data is considered to have an an encounter order, specify
 * {@code ORDERED}).  The method {@link Arrays#spliterator(long[], int, int)} can
 * often be used instead, which returns a spliterator that reports
 * {@code SIZED}, {@code SUBSIZED}, {@code IMMUTABLE}, and {@code ORDERED}.
 *
 * @param array The array, assumed to be unmodified during use
 * @param fromIndex The least index (inclusive) to cover
 * @param toIndex One past the greatest index to cover
 * @param additionalCharacteristics Additional spliterator characteristics
 *        of this spliterator's source or elements beyond {@code SIZED} and
 *        {@code SUBSIZED} which are are always reported
 * @return A spliterator for an array
 * @throws NullPointerException if the given array is {@code null}
 * @throws ArrayIndexOutOfBoundsException if {@code fromIndex} is negative,
 *         {@code toIndex} is less than {@code fromIndex}, or
 *         {@code toIndex} is greater than the array size
 * @see Arrays#spliterator(long[], int, int)
 */
public static Spliterator.OfLong spliterator(long[] array, int fromIndex, int toIndex, int additionalCharacteristics) {
    checkFromToBounds(Objects.requireNonNull(array).length, fromIndex, toIndex);
    return new LongArraySpliterator(array, fromIndex, toIndex, additionalCharacteristics);
}