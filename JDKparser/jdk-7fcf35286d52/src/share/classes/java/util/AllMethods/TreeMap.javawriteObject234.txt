/**
 * Save the state of the {@code TreeMap} instance to a stream (i.e.,
 * serialize it).
 *
 * @serialData The <em>size</em> of the TreeMap (the number of key-value
 *             mappings) is emitted (int), followed by the key (Object)
 *             and value (Object) for each key-value mapping represented
 *             by the TreeMap. The key-value mappings are emitted in
 *             key-order (as determined by the TreeMap's Comparator,
 *             or by the keys' natural ordering if the TreeMap has no
 *             Comparator).
 */
private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {
    // Write out the Comparator and any hidden stuff
    s.defaultWriteObject();
    // Write out size (number of Mappings)
    s.writeInt(size);
    // Write out keys and values (alternating)
    for (Iterator<Map.Entry<K, V>> i = entrySet().iterator(); i.hasNext(); ) {
        Map.Entry<K, V> e = i.next();
        s.writeObject(e.getKey());
        s.writeObject(e.getValue());
    }
}