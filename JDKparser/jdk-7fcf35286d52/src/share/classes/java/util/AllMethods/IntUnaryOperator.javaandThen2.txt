/**
 * Returns a composed operator that first applies this operator to
 * its input, and then applies the {@code after} operator to the result.
 * If evaluation of either operator throws an exception, it is relayed to
 * the caller of the composed operator.
 *
 * @param after the operator to apply after this operator is applied
 * @return a composed operator that first applies this operator and then
 * applies the {@code after} operator
 * @throws NullPointerException if after is null
 *
 * @see #compose(IntUnaryOperator)
 */
default IntUnaryOperator andThen(IntUnaryOperator after) {
    Objects.requireNonNull(after);
    return (int t) -> after.applyAsInt(applyAsInt(t));
}