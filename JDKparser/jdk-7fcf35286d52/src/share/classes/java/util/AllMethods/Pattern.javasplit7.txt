/**
 * Splits the given input sequence around matches of this pattern.
 *
 * <p> The array returned by this method contains each substring of the
 * input sequence that is terminated by another subsequence that matches
 * this pattern or is terminated by the end of the input sequence.  The
 * substrings in the array are in the order in which they occur in the
 * input. If this pattern does not match any subsequence of the input then
 * the resulting array has just one element, namely the input sequence in
 * string form.
 *
 * <p> When there is a positive-width match at the beginning of the input
 * sequence then an empty leading substring is included at the beginning
 * of the resulting array. A zero-width match at the beginning however
 * never produces such empty leading substring.
 *
 * <p> The <tt>limit</tt> parameter controls the number of times the
 * pattern is applied and therefore affects the length of the resulting
 * array.  If the limit <i>n</i> is greater than zero then the pattern
 * will be applied at most <i>n</i>&nbsp;-&nbsp;1 times, the array's
 * length will be no greater than <i>n</i>, and the array's last entry
 * will contain all input beyond the last matched delimiter.  If <i>n</i>
 * is non-positive then the pattern will be applied as many times as
 * possible and the array can have any length.  If <i>n</i> is zero then
 * the pattern will be applied as many times as possible, the array can
 * have any length, and trailing empty strings will be discarded.
 *
 * <p> The input <tt>"boo:and:foo"</tt>, for example, yields the following
 * results with these parameters:
 *
 * <blockquote><table cellpadding=1 cellspacing=0
 *              summary="Split examples showing regex, limit, and result">
 * <tr><th align="left"><i>Regex&nbsp;&nbsp;&nbsp;&nbsp;</i></th>
 *     <th align="left"><i>Limit&nbsp;&nbsp;&nbsp;&nbsp;</i></th>
 *     <th align="left"><i>Result&nbsp;&nbsp;&nbsp;&nbsp;</i></th></tr>
 * <tr><td align=center>:</td>
 *     <td align=center>2</td>
 *     <td><tt>{ "boo", "and:foo" }</tt></td></tr>
 * <tr><td align=center>:</td>
 *     <td align=center>5</td>
 *     <td><tt>{ "boo", "and", "foo" }</tt></td></tr>
 * <tr><td align=center>:</td>
 *     <td align=center>-2</td>
 *     <td><tt>{ "boo", "and", "foo" }</tt></td></tr>
 * <tr><td align=center>o</td>
 *     <td align=center>5</td>
 *     <td><tt>{ "b", "", ":and:f", "", "" }</tt></td></tr>
 * <tr><td align=center>o</td>
 *     <td align=center>-2</td>
 *     <td><tt>{ "b", "", ":and:f", "", "" }</tt></td></tr>
 * <tr><td align=center>o</td>
 *     <td align=center>0</td>
 *     <td><tt>{ "b", "", ":and:f" }</tt></td></tr>
 * </table></blockquote>
 *
 * @param  input
 *         The character sequence to be split
 *
 * @param  limit
 *         The result threshold, as described above
 *
 * @return  The array of strings computed by splitting the input
 *          around matches of this pattern
 */
public String[] split(CharSequence input, int limit) {
    int index = 0;
    boolean matchLimited = limit > 0;
    ArrayList<String> matchList = new ArrayList<>();
    Matcher m = matcher(input);
    // Add segments before each match found
    while (m.find()) {
        if (!matchLimited || matchList.size() < limit - 1) {
            if (index == 0 && index == m.start() && m.start() == m.end()) {
                // no empty leading substring included for zero-width match
                // at the beginning of the input char sequence.
                continue;
            }
            String match = input.subSequence(index, m.start()).toString();
            matchList.add(match);
            index = m.end();
        } else if (matchList.size() == limit - 1) {
            // last one
            String match = input.subSequence(index, input.length()).toString();
            matchList.add(match);
            index = m.end();
        }
    }
    // If no match was found, return this
    if (index == 0)
        return new String[] { input.toString() };
    // Add remaining segment
    if (!matchLimited || matchList.size() < limit)
        matchList.add(input.subSequence(index, input.length()).toString());
    // Construct result
    int resultSize = matchList.size();
    if (limit == 0)
        while (resultSize > 0 && matchList.get(resultSize - 1).equals("")) resultSize--;
    String[] result = new String[resultSize];
    return matchList.subList(0, resultSize).toArray(result);
}