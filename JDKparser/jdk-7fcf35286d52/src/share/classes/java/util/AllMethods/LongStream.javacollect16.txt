/**
 * Performs a <a href="package-summary.html#MutableReduction">mutable
 * reduction</a> operation on the elements of this stream.  A mutable
 * reduction is one in which the reduced value is a mutable result container,
 * such as an {@code ArrayList}, and elements are incorporated by updating
 * the state of the result rather than by replacing the result.  This
 * produces a result equivalent to:
 * <pre>{@code
 *     R result = supplier.get();
 *     for (long element : this stream)
 *         accumulator.accept(result, element);
 *     return result;
 * }</pre>
 *
 * <p>Like {@link #reduce(long, LongBinaryOperator)}, {@code collect} operations
 * can be parallelized without requiring additional synchronization.
 *
 * <p>This is a <a href="package-summary.html#StreamOps">terminal
 * operation</a>.
 *
 * @param <R> type of the result
 * @param supplier a function that creates a new result container. For a
 *                 parallel execution, this function may be called
 *                 multiple times and must return a fresh value each time.
 * @param accumulator an <a href="package-summary.html#Associativity">associative</a>,
 *                    <a href="package-summary.html#NonInterference">non-interfering</a>,
 *                    <a href="package-summary.html#Statelessness">stateless</a>
 *                    function for incorporating an additional element into a result
 * @param combiner an <a href="package-summary.html#Associativity">associative</a>,
 *                    <a href="package-summary.html#NonInterference">non-interfering</a>,
 *                    <a href="package-summary.html#Statelessness">stateless</a>
 *                    function for combining two values, which must be
 *                    compatible with the accumulator function
 * @return the result of the reduction
 * @see Stream#collect(Supplier, BiConsumer, BiConsumer)
 */
<R> R collect(Supplier<R> supplier, ObjLongConsumer<R> accumulator, BiConsumer<R, R> combiner);