@Override
public int hashCode() {
    if (n == 0)
        return 1;
    // hashCode of n repeating elements is 31^n + elementHash * Sum(31^k, k = 0..n-1)
    // this implementation completes in O(log(n)) steps taking advantage of
    // 31^(2*n) = (31^n)^2 and Sum(31^k, k = 0..(2*n-1)) = Sum(31^k, k = 0..n-1) * (31^n + 1)
    int pow = 31;
    int sum = 1;
    for (int i = Integer.numberOfLeadingZeros(n) + 1; i < Integer.SIZE; i++) {
        sum *= pow + 1;
        pow *= pow;
        if ((n << i) < 0) {
            pow *= 31;
            sum = sum * 31 + 1;
        }
    }
    return pow + sum * (element == null ? 0 : element.hashCode());
}