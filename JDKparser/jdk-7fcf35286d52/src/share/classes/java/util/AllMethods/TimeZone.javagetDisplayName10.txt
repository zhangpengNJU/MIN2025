/**
 * Returns a name in the specified {@code style} of this {@code TimeZone}
 * suitable for presentation to the user in the specified {@code
 * locale}. If the specified {@code daylight} is {@code true}, a Daylight
 * Saving Time name is returned (even if this {@code TimeZone} doesn't
 * observe Daylight Saving Time). Otherwise, a Standard Time name is
 * returned.
 *
 * <p>When looking up a time zone name, the {@linkplain
 * ResourceBundle.Control#getCandidateLocales(String,Locale) default
 * <code>Locale</code> search path of <code>ResourceBundle</code>} derived
 * from the specified {@code locale} is used. (No {@linkplain
 * ResourceBundle.Control#getFallbackLocale(String,Locale) fallback
 * <code>Locale</code>} search is performed.) If a time zone name in any
 * {@code Locale} of the search path, including {@link Locale#ROOT}, is
 * found, the name is returned. Otherwise, a string in the
 * <a href="#NormalizedCustomID">normalized custom ID format</a> is returned.
 *
 * @param daylight {@code true} specifying a Daylight Saving Time name, or
 *                 {@code false} specifying a Standard Time name
 * @param style either {@link #LONG} or {@link #SHORT}
 * @param locale   the locale in which to supply the display name.
 * @return the human-readable name of this time zone in the given locale.
 * @exception IllegalArgumentException if {@code style} is invalid.
 * @exception NullPointerException if {@code locale} is {@code null}.
 * @since 1.2
 * @see java.text.DateFormatSymbols#getZoneStrings()
 */
public String getDisplayName(boolean daylight, int style, Locale locale) {
    if (style != SHORT && style != LONG) {
        throw new IllegalArgumentException("Illegal style: " + style);
    }
    String id = getID();
    String name = TimeZoneNameUtility.retrieveDisplayName(id, daylight, style, locale);
    if (name != null) {
        return name;
    }
    if (id.startsWith("GMT") && id.length() > 3) {
        char sign = id.charAt(3);
        if (sign == '+' || sign == '-') {
            return id;
        }
    }
    int offset = getRawOffset();
    if (daylight) {
        offset += getDSTSavings();
    }
    return ZoneInfoFile.toCustomID(offset);
}