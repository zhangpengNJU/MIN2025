/**
 * Returns the index of the nearest bit that is set to {@code true}
 * that occurs on or before the specified starting index.
 * If no such bit exists, or if {@code -1} is given as the
 * starting index, then {@code -1} is returned.
 *
 * <p>To iterate over the {@code true} bits in a {@code BitSet},
 * use the following loop:
 *
 *  <pre> {@code
 * for (int i = bs.length(); (i = bs.previousSetBit(i-1)) >= 0; ) {
 *     // operate on index i here
 * }}</pre>
 *
 * @param  fromIndex the index to start checking from (inclusive)
 * @return the index of the previous set bit, or {@code -1} if there
 *         is no such bit
 * @throws IndexOutOfBoundsException if the specified index is less
 *         than {@code -1}
 * @since  1.7
 */
public int previousSetBit(int fromIndex) {
    if (fromIndex < 0) {
        if (fromIndex == -1)
            return -1;
        throw new IndexOutOfBoundsException("fromIndex < -1: " + fromIndex);
    }
    checkInvariants();
    int u = wordIndex(fromIndex);
    if (u >= wordsInUse)
        return length() - 1;
    long word = words[u] & (WORD_MASK >>> -(fromIndex + 1));
    while (true) {
        if (word != 0)
            return (u + 1) * BITS_PER_WORD - 1 - Long.numberOfLeadingZeros(word);
        if (u-- == 0)
            return -1;
        word = words[u];
    }
}