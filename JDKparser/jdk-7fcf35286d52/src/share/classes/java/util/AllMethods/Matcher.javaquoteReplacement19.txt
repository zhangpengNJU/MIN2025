/**
 * Returns a literal replacement <code>String</code> for the specified
 * <code>String</code>.
 *
 * This method produces a <code>String</code> that will work
 * as a literal replacement <code>s</code> in the
 * <code>appendReplacement</code> method of the {@link Matcher} class.
 * The <code>String</code> produced will match the sequence of characters
 * in <code>s</code> treated as a literal sequence. Slashes ('\') and
 * dollar signs ('$') will be given no special meaning.
 *
 * @param  s The string to be literalized
 * @return  A literal string replacement
 * @since 1.5
 */
public static String quoteReplacement(String s) {
    if ((s.indexOf('\\') == -1) && (s.indexOf('$') == -1))
        return s;
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < s.length(); i++) {
        char c = s.charAt(i);
        if (c == '\\' || c == '$') {
            sb.append('\\');
        }
        sb.append(c);
    }
    return sb.toString();
}