/**
 * Returns the float value represented by the string associated with the
 * specified key in this preference node.  The string is converted to an
 * integer as by {@link Float#parseFloat(String)}.  Returns the specified
 * default if there is no value associated with the key, the backing store
 * is inaccessible, or if <tt>Float.parseFloat(String)</tt> would throw a
 * {@link NumberFormatException} if the associated value were passed.
 * This method is intended for use in conjunction with {@link #putFloat}.
 *
 * <p>If the implementation supports <i>stored defaults</i> and such a
 * default exists, is accessible, and could be converted to a float
 * with <tt>Float.parseFloat</tt>, this float is returned in preference to
 * the specified default.
 *
 * @param key key whose associated value is to be returned as a float.
 * @param def the value to be returned in the event that this
 *        preference node has no value associated with <tt>key</tt>
 *        or the associated value cannot be interpreted as a float,
 *        or the backing store is inaccessible.
 * @return the float value represented by the string associated with
 *         <tt>key</tt> in this preference node, or <tt>def</tt> if the
 *         associated value does not exist or cannot be interpreted as
 *         a float.
 * @throws IllegalStateException if this node (or an ancestor) has been
 *         removed with the {@link #removeNode()} method.
 * @throws NullPointerException if <tt>key</tt> is <tt>null</tt>.
 * @see #putFloat(String,float)
 * @see #get(String,String)
 */
public abstract float getFloat(String key, float def);