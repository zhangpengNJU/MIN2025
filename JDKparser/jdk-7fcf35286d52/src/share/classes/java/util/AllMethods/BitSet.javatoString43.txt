/**
 * Returns a string representation of this bit set. For every index
 * for which this {@code BitSet} contains a bit in the set
 * state, the decimal representation of that index is included in
 * the result. Such indices are listed in order from lowest to
 * highest, separated by ",&nbsp;" (a comma and a space) and
 * surrounded by braces, resulting in the usual mathematical
 * notation for a set of integers.
 *
 * <p>Example:
 * <pre>
 * BitSet drPepper = new BitSet();</pre>
 * Now {@code drPepper.toString()} returns "{@code {}}".
 * <pre>
 * drPepper.set(2);</pre>
 * Now {@code drPepper.toString()} returns "{@code {2}}".
 * <pre>
 * drPepper.set(4);
 * drPepper.set(10);</pre>
 * Now {@code drPepper.toString()} returns "{@code {2, 4, 10}}".
 *
 * @return a string representation of this bit set
 */
public String toString() {
    checkInvariants();
    int numBits = (wordsInUse > 128) ? cardinality() : wordsInUse * BITS_PER_WORD;
    StringBuilder b = new StringBuilder(6 * numBits + 2);
    b.append('{');
    int i = nextSetBit(0);
    if (i != -1) {
        b.append(i);
        while (true) {
            if (++i < 0)
                break;
            if ((i = nextSetBit(i)) < 0)
                break;
            int endOfRun = nextClearBit(i);
            do {
                b.append(", ").append(i);
            } while (++i != endOfRun);
        }
    }
    b.append('}');
    return b.toString();
}