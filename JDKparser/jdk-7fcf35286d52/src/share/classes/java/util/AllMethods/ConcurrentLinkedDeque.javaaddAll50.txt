/**
 * Appends all of the elements in the specified collection to the end of
 * this deque, in the order that they are returned by the specified
 * collection's iterator.  Attempts to {@code addAll} of a deque to
 * itself result in {@code IllegalArgumentException}.
 *
 * @param c the elements to be inserted into this deque
 * @return {@code true} if this deque changed as a result of the call
 * @throws NullPointerException if the specified collection or any
 *         of its elements are null
 * @throws IllegalArgumentException if the collection is this deque
 */
public boolean addAll(Collection<? extends E> c) {
    if (c == this)
        // As historically specified in AbstractQueue#addAll
        throw new IllegalArgumentException();
    // Copy c into a private chain of Nodes
    Node<E> beginningOfTheEnd = null, last = null;
    for (E e : c) {
        checkNotNull(e);
        Node<E> newNode = new Node<E>(e);
        if (beginningOfTheEnd == null)
            beginningOfTheEnd = last = newNode;
        else {
            last.lazySetNext(newNode);
            newNode.lazySetPrev(last);
            last = newNode;
        }
    }
    if (beginningOfTheEnd == null)
        return false;
    // Atomically append the chain at the tail of this collection
    restartFromTail: for (; ; ) for (Node<E> t = tail, p = t, q; ; ) {
        if ((q = p.next) != null && (q = (p = q).next) != null)
            // Check for tail updates every other hop.
            // If p == q, we are sure to follow tail instead.
            p = (t != (t = tail)) ? t : q;
        else if (// NEXT_TERMINATOR
        p.prev == p)
            continue restartFromTail;
        else {
            // p is last node
            // CAS piggyback
            beginningOfTheEnd.lazySetPrev(p);
            if (p.casNext(null, beginningOfTheEnd)) {
                // Successful CAS is the linearization point
                // for all elements to be added to this deque.
                if (!casTail(t, last)) {
                    // Try a little harder to update tail,
                    // since we may be adding many elements.
                    t = tail;
                    if (last.next == null)
                        casTail(t, last);
                }
                return true;
            }
        // Lost CAS race to another thread; re-read next
        }
    }
}