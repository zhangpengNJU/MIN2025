/**
 * Cumulates, in parallel, each element of the given array in place,
 * using the supplied function. For example if the array initially
 * holds {@code [2.0, 1.0, 0.0, 3.0]} and the operation performs addition,
 * then upon return the array holds {@code [2.0, 3.0, 3.0, 6.0]}.
 * Parallel prefix computation is usually more efficient than
 * sequential loops for large arrays.
 *
 * <p> Because floating-point operations may not be strictly associative,
 * the returned result may not be identical to the value that would be
 * obtained if the operation was performed sequentially.
 *
 * @param array the array, which is modified in-place by this method
 * @param op a side-effect-free function to perform the cumulation
 * @throws NullPointerException if the specified array or function is null
 * @since 1.8
 */
public static void parallelPrefix(double[] array, DoubleBinaryOperator op) {
    Objects.requireNonNull(op);
    if (array.length > 0)
        new ArrayPrefixHelpers.DoubleCumulateTask(null, op, array, 0, array.length).invoke();
}