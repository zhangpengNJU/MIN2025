/**
 * Returns a list iterator that has no elements.  More precisely,
 *
 * <ul>
 * <li>{@link Iterator#hasNext hasNext} and {@link
 * ListIterator#hasPrevious hasPrevious} always return {@code
 * false}.</li>
 * <li>{@link Iterator#next next} and {@link ListIterator#previous
 * previous} always throw {@link NoSuchElementException}.</li>
 * <li>{@link Iterator#remove remove} and {@link ListIterator#set
 * set} always throw {@link IllegalStateException}.</li>
 * <li>{@link ListIterator#add add} always throws {@link
 * UnsupportedOperationException}.</li>
 * <li>{@link ListIterator#nextIndex nextIndex} always returns
 * {@code 0}.</li>
 * <li>{@link ListIterator#previousIndex previousIndex} always
 * returns {@code -1}.</li>
 * </ul>
 *
 * <p>Implementations of this method are permitted, but not
 * required, to return the same object from multiple invocations.
 *
 * @param <T> type of elements, if there were any, in the iterator
 * @return an empty list iterator
 * @since 1.7
 */
@SuppressWarnings("unchecked")
public static <T> ListIterator<T> emptyListIterator() {
    return (ListIterator<T>) EmptyListIterator.EMPTY_ITERATOR;
}