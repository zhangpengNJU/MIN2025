/**
 * Returns a field mask indicating which calendar field values
 * to be used to calculate the time value. The calendar fields are
 * returned as a bit mask, each bit of which corresponds to a field, i.e.,
 * the mask value of <code>field</code> is <code>(1 &lt;&lt;
 * field)</code>. For example, 0x26 represents the <code>YEAR</code>,
 * <code>MONTH</code>, and <code>DAY_OF_MONTH</code> fields (i.e., 0x26 is
 * equal to
 * <code>(1&lt;&lt;YEAR)|(1&lt;&lt;MONTH)|(1&lt;&lt;DAY_OF_MONTH))</code>.
 *
 * <p>This method supports the calendar fields resolution as described in
 * the class description. If the bit mask for a given field is on and its
 * field has not been set (i.e., <code>isSet(field)</code> is
 * <code>false</code>), then the default value of the field has to be
 * used, which case means that the field has been selected because the
 * selected combination involves the field.
 *
 * @return a bit mask of selected fields
 * @see #isExternallySet(int)
 */
final int selectFields() {
    // This implementation has been taken from the GregorianCalendar class.
    // The YEAR field must always be used regardless of its SET
    // state because YEAR is a mandatory field to determine the date
    // and the default value (EPOCH_YEAR) may change through the
    // normalization process.
    int fieldMask = YEAR_MASK;
    if (stamp[ERA] != UNSET) {
        fieldMask |= ERA_MASK;
    }
    // Find the most recent group of fields specifying the day within
    // the year.  These may be any of the following combinations:
    // MONTH + DAY_OF_MONTH
    // MONTH + WEEK_OF_MONTH + DAY_OF_WEEK
    // MONTH + DAY_OF_WEEK_IN_MONTH + DAY_OF_WEEK
    // DAY_OF_YEAR
    // WEEK_OF_YEAR + DAY_OF_WEEK
    // We look for the most recent of the fields in each group to determine
    // the age of the group.  For groups involving a week-related field such
    // as WEEK_OF_MONTH, DAY_OF_WEEK_IN_MONTH, or WEEK_OF_YEAR, both the
    // week-related field and the DAY_OF_WEEK must be set for the group as a
    // whole to be considered.  (See bug 4153860 - liu 7/24/98.)
    int dowStamp = stamp[DAY_OF_WEEK];
    int monthStamp = stamp[MONTH];
    int domStamp = stamp[DAY_OF_MONTH];
    int womStamp = aggregateStamp(stamp[WEEK_OF_MONTH], dowStamp);
    int dowimStamp = aggregateStamp(stamp[DAY_OF_WEEK_IN_MONTH], dowStamp);
    int doyStamp = stamp[DAY_OF_YEAR];
    int woyStamp = aggregateStamp(stamp[WEEK_OF_YEAR], dowStamp);
    int bestStamp = domStamp;
    if (womStamp > bestStamp) {
        bestStamp = womStamp;
    }
    if (dowimStamp > bestStamp) {
        bestStamp = dowimStamp;
    }
    if (doyStamp > bestStamp) {
        bestStamp = doyStamp;
    }
    if (woyStamp > bestStamp) {
        bestStamp = woyStamp;
    }
    /* No complete combination exists.  Look for WEEK_OF_MONTH,
         * DAY_OF_WEEK_IN_MONTH, or WEEK_OF_YEAR alone.  Treat DAY_OF_WEEK alone
         * as DAY_OF_WEEK_IN_MONTH.
         */
    if (bestStamp == UNSET) {
        womStamp = stamp[WEEK_OF_MONTH];
        dowimStamp = Math.max(stamp[DAY_OF_WEEK_IN_MONTH], dowStamp);
        woyStamp = stamp[WEEK_OF_YEAR];
        bestStamp = Math.max(Math.max(womStamp, dowimStamp), woyStamp);
        /* Treat MONTH alone or no fields at all as DAY_OF_MONTH.  This may
             * result in bestStamp = domStamp = UNSET if no fields are set,
             * which indicates DAY_OF_MONTH.
             */
        if (bestStamp == UNSET) {
            bestStamp = domStamp = monthStamp;
        }
    }
    if (bestStamp == domStamp || (bestStamp == womStamp && stamp[WEEK_OF_MONTH] >= stamp[WEEK_OF_YEAR]) || (bestStamp == dowimStamp && stamp[DAY_OF_WEEK_IN_MONTH] >= stamp[WEEK_OF_YEAR])) {
        fieldMask |= MONTH_MASK;
        if (bestStamp == domStamp) {
            fieldMask |= DAY_OF_MONTH_MASK;
        } else {
            assert (bestStamp == womStamp || bestStamp == dowimStamp);
            if (dowStamp != UNSET) {
                fieldMask |= DAY_OF_WEEK_MASK;
            }
            if (womStamp == dowimStamp) {
                // When they are equal, give the priority to
                // WEEK_OF_MONTH for compatibility.
                if (stamp[WEEK_OF_MONTH] >= stamp[DAY_OF_WEEK_IN_MONTH]) {
                    fieldMask |= WEEK_OF_MONTH_MASK;
                } else {
                    fieldMask |= DAY_OF_WEEK_IN_MONTH_MASK;
                }
            } else {
                if (bestStamp == womStamp) {
                    fieldMask |= WEEK_OF_MONTH_MASK;
                } else {
                    assert (bestStamp == dowimStamp);
                    if (stamp[DAY_OF_WEEK_IN_MONTH] != UNSET) {
                        fieldMask |= DAY_OF_WEEK_IN_MONTH_MASK;
                    }
                }
            }
        }
    } else {
        assert (bestStamp == doyStamp || bestStamp == woyStamp || bestStamp == UNSET);
        if (bestStamp == doyStamp) {
            fieldMask |= DAY_OF_YEAR_MASK;
        } else {
            assert (bestStamp == woyStamp);
            if (dowStamp != UNSET) {
                fieldMask |= DAY_OF_WEEK_MASK;
            }
            fieldMask |= WEEK_OF_YEAR_MASK;
        }
    }
    // Find the best set of fields specifying the time of day.  There
    // are only two possibilities here; the HOUR_OF_DAY or the
    // AM_PM and the HOUR.
    int hourOfDayStamp = stamp[HOUR_OF_DAY];
    int hourStamp = aggregateStamp(stamp[HOUR], stamp[AM_PM]);
    bestStamp = (hourStamp > hourOfDayStamp) ? hourStamp : hourOfDayStamp;
    // if bestStamp is still UNSET, then take HOUR or AM_PM. (See 4846659)
    if (bestStamp == UNSET) {
        bestStamp = Math.max(stamp[HOUR], stamp[AM_PM]);
    }
    // Hours
    if (bestStamp != UNSET) {
        if (bestStamp == hourOfDayStamp) {
            fieldMask |= HOUR_OF_DAY_MASK;
        } else {
            fieldMask |= HOUR_MASK;
            if (stamp[AM_PM] != UNSET) {
                fieldMask |= AM_PM_MASK;
            }
        }
    }
    if (stamp[MINUTE] != UNSET) {
        fieldMask |= MINUTE_MASK;
    }
    if (stamp[SECOND] != UNSET) {
        fieldMask |= SECOND_MASK;
    }
    if (stamp[MILLISECOND] != UNSET) {
        fieldMask |= MILLISECOND_MASK;
    }
    if (stamp[ZONE_OFFSET] >= MINIMUM_USER_STAMP) {
        fieldMask |= ZONE_OFFSET_MASK;
    }
    if (stamp[DST_OFFSET] >= MINIMUM_USER_STAMP) {
        fieldMask |= DST_OFFSET_MASK;
    }
    return fieldMask;
}