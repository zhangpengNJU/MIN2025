private void ensureDefaultLogger(Logger logger) {
    // Used for lazy addition of root logger and global logger
    // to a LoggerContext.
    // This check is simple sanity: we do not want that this
    // method be called for anything else than Logger.global
    // or owner.rootLogger.
    if (!requiresDefaultLoggers() || logger == null || logger != Logger.global && logger != LogManager.this.rootLogger) {
        // the case where we have a non null logger which is neither
        // Logger.global nor manager.rootLogger indicates a serious
        // issue - as ensureDefaultLogger should never be called
        // with any other loggers than one of these two (or null - if
        // e.g manager.rootLogger is not yet initialized)...
        assert logger == null;
        return;
    }
    // Adds the logger if it's not already there.
    if (!namedLoggers.containsKey(logger.getName())) {
        // It is important to prevent addLocalLogger to
        // call ensureAllDefaultLoggers when we're in the process
        // off adding one of those default loggers - as this would
        // immediately cause a stack overflow.
        // Therefore we must pass addDefaultLoggersIfNeeded=false,
        // even if requiresDefaultLoggers is true.
        addLocalLogger(logger, false);
    }
}