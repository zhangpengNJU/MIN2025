/**
 * Returns a non-null result from applying the given search
 * function on each entry, or null if none.  Upon success,
 * further element processing is suppressed and the results of
 * any other parallel invocations of the search function are
 * ignored.
 *
 * @param parallelismThreshold the (estimated) number of elements
 * needed for this operation to be executed in parallel
 * @param searchFunction a function returning a non-null
 * result on success, else null
 * @param <U> the return type of the search function
 * @return a non-null result from applying the given search
 * function on each entry, or null if none
 * @since 1.8
 */
public <U> U searchEntries(long parallelismThreshold, Function<Map.Entry<K, V>, ? extends U> searchFunction) {
    if (searchFunction == null)
        throw new NullPointerException();
    return new SearchEntriesTask<K, V, U>(null, batchFor(parallelismThreshold), 0, 0, table, searchFunction, new AtomicReference<U>()).invoke();
}