/**
 * The put method used by readObject. This is provided because put
 * is overridable and should not be called in readObject since the
 * subclass will not yet be initialized.
 *
 * <p>This differs from the regular put method in several ways. No
 * checking for rehashing is necessary since the number of elements
 * initially in the table is known. The modCount is not incremented and
 * there's no synchronization because we are creating a new instance.
 * Also, no return value is needed.
 */
private void reconstitutionPut(Entry<?, ?>[] tab, K key, V value) throws StreamCorruptedException {
    if (value == null) {
        throw new java.io.StreamCorruptedException();
    }
    // Makes sure the key is not already in the hashtable.
    // This should not happen in deserialized version.
    int hash = key.hashCode();
    int index = (hash & 0x7FFFFFFF) % tab.length;
    for (Entry<?, ?> e = tab[index]; e != null; e = e.next) {
        if ((e.hash == hash) && e.key.equals(key)) {
            throw new java.io.StreamCorruptedException();
        }
    }
    // Creates the new entry.
    @SuppressWarnings("unchecked")
    Entry<K, V> e = (Entry<K, V>) tab[index];
    tab[index] = new Entry<>(hash, key, value, e);
    count++;
}