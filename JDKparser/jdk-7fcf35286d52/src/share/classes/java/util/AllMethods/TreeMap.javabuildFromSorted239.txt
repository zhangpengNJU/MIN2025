/**
 * Recursive "helper method" that does the real work of the
 * previous method.  Identically named parameters have
 * identical definitions.  Additional parameters are documented below.
 * It is assumed that the comparator and size fields of the TreeMap are
 * already set prior to calling this method.  (It ignores both fields.)
 *
 * @param level the current level of tree. Initial call should be 0.
 * @param lo the first element index of this subtree. Initial should be 0.
 * @param hi the last element index of this subtree.  Initial should be
 *        size-1.
 * @param redLevel the level at which nodes should be red.
 *        Must be equal to computeRedLevel for tree of this size.
 */
@SuppressWarnings("unchecked")
private final Entry<K, V> buildFromSorted(int level, int lo, int hi, int redLevel, Iterator<?> it, java.io.ObjectInputStream str, V defaultVal) throws java.io.IOException, ClassNotFoundException {
    /*
         * Strategy: The root is the middlemost element. To get to it, we
         * have to first recursively construct the entire left subtree,
         * so as to grab all of its elements. We can then proceed with right
         * subtree.
         *
         * The lo and hi arguments are the minimum and maximum
         * indices to pull out of the iterator or stream for current subtree.
         * They are not actually indexed, we just proceed sequentially,
         * ensuring that items are extracted in corresponding order.
         */
    if (hi < lo)
        return null;
    int mid = (lo + hi) >>> 1;
    Entry<K, V> left = null;
    if (lo < mid)
        left = buildFromSorted(level + 1, lo, mid - 1, redLevel, it, str, defaultVal);
    // extract key and/or value from iterator or stream
    K key;
    V value;
    if (it != null) {
        if (defaultVal == null) {
            Map.Entry<?, ?> entry = (Map.Entry<?, ?>) it.next();
            key = (K) entry.getKey();
            value = (V) entry.getValue();
        } else {
            key = (K) it.next();
            value = defaultVal;
        }
    } else {
        // use stream
        key = (K) str.readObject();
        value = (defaultVal != null ? defaultVal : (V) str.readObject());
    }
    Entry<K, V> middle = new Entry<>(key, value, null);
    // color nodes in non-full bottommost level red
    if (level == redLevel)
        middle.color = RED;
    if (left != null) {
        middle.left = left;
        left.parent = middle;
    }
    if (mid < hi) {
        Entry<K, V> right = buildFromSorted(level + 1, mid + 1, hi, redLevel, it, str, defaultVal);
        middle.right = right;
        right.parent = middle;
    }
    return middle;
}