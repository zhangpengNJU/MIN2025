/**
 * Sets the date of this {@code Calendar} with the the given date
 * specifiers - week year, week of year, and day of week.
 *
 * <p>Unlike the {@code set} method, all of the calendar fields
 * and {@code time} values are calculated upon return.
 *
 * <p>If {@code weekOfYear} is out of the valid week-of-year range
 * in {@code weekYear}, the {@code weekYear} and {@code
 * weekOfYear} values are adjusted in lenient mode, or an {@code
 * IllegalArgumentException} is thrown in non-lenient mode.
 *
 * <p>The default implementation of this method throws an
 * {@code UnsupportedOperationException}.
 *
 * @param weekYear   the week year
 * @param weekOfYear the week number based on {@code weekYear}
 * @param dayOfWeek  the day of week value: one of the constants
 *                   for the {@link #DAY_OF_WEEK} field: {@link
 *                   #SUNDAY}, ..., {@link #SATURDAY}.
 * @exception IllegalArgumentException
 *            if any of the given date specifiers is invalid
 *            or any of the calendar fields are inconsistent
 *            with the given date specifiers in non-lenient mode
 * @exception UnsupportedOperationException
 *            if any week year numbering isn't supported in this
 *            {@code Calendar}.
 * @see #isWeekDateSupported()
 * @see #getFirstDayOfWeek()
 * @see #getMinimalDaysInFirstWeek()
 * @since 1.7
 */
public void setWeekDate(int weekYear, int weekOfYear, int dayOfWeek) {
    throw new UnsupportedOperationException();
}