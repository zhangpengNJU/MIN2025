/**
 * {@inheritDoc}
 *
 * @implSpec
 * This implementation returns a collection that subclasses {@link
 * AbstractCollection}.  The subclass's iterator method returns a
 * "wrapper object" over this map's <tt>entrySet()</tt> iterator.
 * The <tt>size</tt> method delegates to this map's <tt>size</tt>
 * method and the <tt>contains</tt> method delegates to this map's
 * <tt>containsValue</tt> method.
 *
 * <p>The collection is created the first time this method is called, and
 * returned in response to all subsequent calls.  No synchronization is
 * performed, so there is a slight chance that multiple calls to this
 * method will not all return the same collection.
 */
public Collection<V> values() {
    Collection<V> vals = values;
    if (vals == null) {
        vals = new AbstractCollection<V>() {

            public Iterator<V> iterator() {
                return new Iterator<V>() {

                    private Iterator<Entry<K, V>> i = entrySet().iterator();

                    public boolean hasNext() {
                        return i.hasNext();
                    }

                    public V next() {
                        return i.next().getValue();
                    }

                    public void remove() {
                        i.remove();
                    }
                };
            }

            public int size() {
                return AbstractMap.this.size();
            }

            public boolean isEmpty() {
                return AbstractMap.this.isEmpty();
            }

            public void clear() {
                AbstractMap.this.clear();
            }

            public boolean contains(Object v) {
                return AbstractMap.this.containsValue(v);
            }
        };
        values = vals;
    }
    return vals;
}