/**
 * Returns a comparator that imposes the reverse of the <em>natural
 * ordering</em> on a collection of objects that implement the
 * {@code Comparable} interface.  (The natural ordering is the ordering
 * imposed by the objects' own {@code compareTo} method.)  This enables a
 * simple idiom for sorting (or maintaining) collections (or arrays) of
 * objects that implement the {@code Comparable} interface in
 * reverse-natural-order.  For example, suppose {@code a} is an array of
 * strings. Then: <pre>
 *          Arrays.sort(a, Collections.reverseOrder());
 * </pre> sorts the array in reverse-lexicographic (alphabetical) order.<p>
 *
 * The returned comparator is serializable.
 *
 * @param  <T> the class of the objects compared by the comparator
 * @return A comparator that imposes the reverse of the <i>natural
 *         ordering</i> on a collection of objects that implement
 *         the <tt>Comparable</tt> interface.
 * @see Comparable
 */
@SuppressWarnings("unchecked")
public static <T> Comparator<T> reverseOrder() {
    return (Comparator<T>) ReverseComparator.REVERSE_ORDER;
}