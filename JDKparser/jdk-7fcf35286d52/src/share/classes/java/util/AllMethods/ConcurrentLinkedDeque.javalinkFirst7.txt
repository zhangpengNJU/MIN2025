/**
 * Links e as first element.
 */
private void linkFirst(E e) {
    checkNotNull(e);
    final Node<E> newNode = new Node<E>(e);
    restartFromHead: for (; ; ) for (Node<E> h = head, p = h, q; ; ) {
        if ((q = p.prev) != null && (q = (p = q).prev) != null)
            // Check for head updates every other hop.
            // If p == q, we are sure to follow head instead.
            p = (h != (h = head)) ? h : q;
        else if (// PREV_TERMINATOR
        p.next == p)
            continue restartFromHead;
        else {
            // p is first node
            // CAS piggyback
            newNode.lazySetNext(p);
            if (p.casPrev(null, newNode)) {
                // Successful CAS is the linearization point
                // for e to become an element of this deque,
                // and for newNode to become "live".
                if (// hop two nodes at a time
                p != h)
                    // Failure is OK.
                    casHead(h, newNode);
                return;
            }
        // Lost CAS race to another thread; re-read prev
        }
    }
}