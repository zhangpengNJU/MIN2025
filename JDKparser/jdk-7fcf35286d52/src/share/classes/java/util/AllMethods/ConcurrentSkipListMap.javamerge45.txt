/**
 * If the specified key is not already associated with a value,
 * associates it with the given value.  Otherwise, replaces the
 * value with the results of the given remapping function, or
 * removes if {@code null}. The function is <em>NOT</em>
 * guaranteed to be applied once atomically.
 *
 * @param key key with which the specified value is to be associated
 * @param value the value to use if absent
 * @param remappingFunction the function to recompute a value if present
 * @return the new value associated with the specified key, or null if none
 * @throws NullPointerException if the specified key or value is null
 *         or the remappingFunction is null
 * @since 1.8
 */
public V merge(K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction) {
    if (key == null || value == null || remappingFunction == null)
        throw new NullPointerException();
    for (; ; ) {
        Node<K, V> n;
        Object v;
        V r;
        if ((n = findNode(key)) == null) {
            if (doPut(key, value, true) == null)
                return value;
        } else if ((v = n.value) != null) {
            @SuppressWarnings("unchecked")
            V vv = (V) v;
            if ((r = remappingFunction.apply(vv, value)) != null) {
                if (n.casValue(vv, r))
                    return r;
            } else if (doRemove(key, vv) != null)
                return null;
        }
    }
}