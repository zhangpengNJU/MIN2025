/**
 * Accepts a function that extracts an {@code int} sort key from a type
 * {@code T}, and returns a {@code Comparator<T>} that compares by that
 * sort key.
 *
 * <p>The returned comparator is serializable if the specified function
 * is also serializable.
 *
 * @param  <T> the type of element to be compared
 * @param  keyExtractor the function used to extract the integer sort key
 * @return a comparator that compares by an extracted key
 * @see #comparing(Function)
 * @throws NullPointerException if the argument is null
 * @since 1.8
 */
public static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) {
    Objects.requireNonNull(keyExtractor);
    return (Comparator<T> & Serializable) (c1, c2) -> Integer.compare(keyExtractor.applyAsInt(c1), keyExtractor.applyAsInt(c2));
}