@Override
<P_IN> Node<Long> opEvaluateParallel(PipelineHelper<Long> helper, Spliterator<P_IN> spliterator, IntFunction<Long[]> generator) {
    long size = helper.exactOutputSizeIfKnown(spliterator);
    if (size > 0 && spliterator.hasCharacteristics(Spliterator.SUBSIZED)) {
        // Because the pipeline is SIZED the slice spliterator
        // can be created from the source, this requires matching
        // to shape of the source, and is potentially more efficient
        // than creating the slice spliterator from the pipeline
        // wrapping spliterator
        Spliterator<P_IN> s = sliceSpliterator(helper.getSourceShape(), spliterator, skip, limit);
        return Nodes.collectLong(helper, s, true);
    } else if (!StreamOpFlag.ORDERED.isKnown(helper.getStreamAndOpFlags())) {
        Spliterator.OfLong s = unorderedSkipLimitSpliterator((Spliterator.OfLong) helper.wrapSpliterator(spliterator), skip, limit, size);
        // Collect using this pipeline, which is empty and therefore
        // can be used with the pipeline wrapping spliterator
        // Note that we cannot create a slice spliterator from
        // the source spliterator if the pipeline is not SIZED
        return Nodes.collectLong(this, s, true);
    } else {
        return new SliceTask<>(this, helper, spliterator, generator, skip, limit).invoke();
    }
}