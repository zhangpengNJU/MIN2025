/**
 * Performs a <a href="package-summary.html#Reduction">reduction</a> on the
 * elements of this stream, using an
 * <a href="package-summary.html#Associativity">associative</a> accumulation
 * function, and returns an {@code OptionalInt} describing the reduced value,
 * if any. This is equivalent to:
 * <pre>{@code
 *     boolean foundAny = false;
 *     int result = null;
 *     for (int element : this stream) {
 *         if (!foundAny) {
 *             foundAny = true;
 *             result = element;
 *         }
 *         else
 *             result = accumulator.applyAsInt(result, element);
 *     }
 *     return foundAny ? OptionalInt.of(result) : OptionalInt.empty();
 * }</pre>
 *
 * but is not constrained to execute sequentially.
 *
 * <p>The {@code accumulator} function must be an
 * <a href="package-summary.html#Associativity">associative</a> function.
 *
 * <p>This is a <a href="package-summary.html#StreamOps">terminal
 * operation</a>.
 *
 * @param op an <a href="package-summary.html#Associativity">associative</a>,
 *           <a href="package-summary.html#NonInterference">non-interfering</a>,
 *           <a href="package-summary.html#Statelessness">stateless</a>
 *           function for combining two values
 * @return the result of the reduction
 * @see #reduce(int, IntBinaryOperator)
 */
OptionalInt reduce(IntBinaryOperator op);