/**
 * Appends a "slice" operation to the provided stream.  The slice operation
 * may be may be skip-only, limit-only, or skip-and-limit.
 *
 * @param <T> the type of both input and output elements
 * @param upstream a reference stream with element type T
 * @param skip the number of elements to skip.  Must be >= 0.
 * @param limit the maximum size of the resulting stream, or -1 if no limit
 *        is to be imposed
 */
public static <T> Stream<T> makeRef(AbstractPipeline<?, T, ?> upstream, long skip, long limit) {
    if (skip < 0)
        throw new IllegalArgumentException("Skip must be non-negative: " + skip);
    return new ReferencePipeline.StatefulOp<T, T>(upstream, StreamShape.REFERENCE, flags(limit)) {

        Spliterator<T> unorderedSkipLimitSpliterator(Spliterator<T> s, long skip, long limit, long sizeIfKnown) {
            if (skip <= sizeIfKnown) {
                // Use just the limit if the number of elements
                // to skip is <= the known pipeline size
                limit = limit >= 0 ? Math.min(limit, sizeIfKnown - skip) : sizeIfKnown - skip;
                skip = 0;
            }
            return new StreamSpliterators.UnorderedSliceSpliterator.OfRef<>(s, skip, limit);
        }

        @Override
        <P_IN> Spliterator<T> opEvaluateParallelLazy(PipelineHelper<T> helper, Spliterator<P_IN> spliterator) {
            long size = helper.exactOutputSizeIfKnown(spliterator);
            if (size > 0 && spliterator.hasCharacteristics(Spliterator.SUBSIZED)) {
                return new StreamSpliterators.SliceSpliterator.OfRef<>(helper.wrapSpliterator(spliterator), skip, calcSliceFence(skip, limit));
            } else if (!StreamOpFlag.ORDERED.isKnown(helper.getStreamAndOpFlags())) {
                return unorderedSkipLimitSpliterator(helper.wrapSpliterator(spliterator), skip, limit, size);
            } else {
                // @@@ OOMEs will occur for LongStream.longs().filter(i -> true).limit(n)
                // regardless of the value of n
                // Need to adjust the target size of splitting for the
                // SliceTask from say (size / k) to say min(size / k, 1 << 14)
                // This will limit the size of the buffers created at the leaf nodes
                // cancellation will be more aggressive cancelling later tasks
                // if the target slice size has been reached from a given task,
                // cancellation should also clear local results if any
                return new SliceTask<>(this, helper, spliterator, castingArray(), skip, limit).invoke().spliterator();
            }
        }

        @Override
        <P_IN> Node<T> opEvaluateParallel(PipelineHelper<T> helper, Spliterator<P_IN> spliterator, IntFunction<T[]> generator) {
            long size = helper.exactOutputSizeIfKnown(spliterator);
            if (size > 0 && spliterator.hasCharacteristics(Spliterator.SUBSIZED)) {
                // Because the pipeline is SIZED the slice spliterator
                // can be created from the source, this requires matching
                // to shape of the source, and is potentially more efficient
                // than creating the slice spliterator from the pipeline
                // wrapping spliterator
                Spliterator<P_IN> s = sliceSpliterator(helper.getSourceShape(), spliterator, skip, limit);
                return Nodes.collect(helper, s, true, generator);
            } else if (!StreamOpFlag.ORDERED.isKnown(helper.getStreamAndOpFlags())) {
                Spliterator<T> s = unorderedSkipLimitSpliterator(helper.wrapSpliterator(spliterator), skip, limit, size);
                // Collect using this pipeline, which is empty and therefore
                // can be used with the pipeline wrapping spliterator
                // Note that we cannot create a slice spliterator from
                // the source spliterator if the pipeline is not SIZED
                return Nodes.collect(this, s, true, generator);
            } else {
                return new SliceTask<>(this, helper, spliterator, generator, skip, limit).invoke();
            }
        }

        @Override
        Sink<T> opWrapSink(int flags, Sink<T> sink) {
            return new Sink.ChainedReference<T, T>(sink) {

                long n = skip;

                long m = limit >= 0 ? limit : Long.MAX_VALUE;

                @Override
                public void begin(long size) {
                    downstream.begin(calcSize(size, skip, m));
                }

                @Override
                public void accept(T t) {
                    if (n == 0) {
                        if (m > 0) {
                            m--;
                            downstream.accept(t);
                        }
                    } else {
                        n--;
                    }
                }

                @Override
                public boolean cancellationRequested() {
                    return m == 0 || downstream.cancellationRequested();
                }
            };
        }
    };
}