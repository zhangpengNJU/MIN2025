/**
 * Returns a {@code CertPathValidator} object that implements the
 * specified algorithm.
 *
 * <p> A new CertPathValidator object encapsulating the
 * CertPathValidatorSpi implementation from the specified Provider
 * object is returned.  Note that the specified Provider object
 * does not have to be registered in the provider list.
 *
 * @param algorithm the name of the requested {@code CertPathValidator}
 * algorithm. See the CertPathValidator section in the <a href=
 * "{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathValidator">
 * Java Cryptography Architecture Standard Algorithm Name Documentation</a>
 * for information about standard algorithm names.
 *
 * @param provider the provider.
 *
 * @return a {@code CertPathValidator} object that implements the
 *          specified algorithm.
 *
 * @exception NoSuchAlgorithmException if a CertPathValidatorSpi
 *          implementation for the specified algorithm is not available
 *          from the specified Provider object.
 *
 * @exception IllegalArgumentException if the {@code provider} is
 *          null.
 *
 * @see java.security.Provider
 */
public static CertPathValidator getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException {
    Instance instance = GetInstance.getInstance("CertPathValidator", CertPathValidatorSpi.class, algorithm, provider);
    return new CertPathValidator((CertPathValidatorSpi) instance.impl, instance.provider, algorithm);
}