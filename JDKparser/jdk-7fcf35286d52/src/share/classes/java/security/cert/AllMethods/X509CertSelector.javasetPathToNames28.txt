/**
 * Sets the pathToNames criterion. The {@code X509Certificate} must
 * not include name constraints that would prohibit building a
 * path to the specified names.
 * <p>
 * This method allows the caller to specify, with a single method call,
 * the complete set of names which the {@code X509Certificates}'s
 * name constraints must permit. The specified value replaces
 * the previous value for the pathToNames criterion.
 * <p>
 * This constraint is useful when building a certification path forward
 * (from the target toward the trust anchor. If a partial path has been
 * built, any candidate certificate must not include name constraints that
 * would prohibit building a path to any of the names in the partial path.
 * <p>
 * The {@code names} parameter (if not {@code null}) is a
 * {@code Collection} with one
 * entry for each name to be included in the pathToNames
 * criterion. Each entry is a {@code List} whose first entry is an
 * {@code Integer} (the name type, 0-8) and whose second
 * entry is a {@code String} or a byte array (the name, in
 * string or ASN.1 DER encoded form, respectively).
 * There can be multiple names of the same type. If {@code null}
 * is supplied as the value for this argument, no
 * pathToNames check will be performed.
 * <p>
 * Each name in the {@code Collection}
 * may be specified either as a {@code String} or as an ASN.1 encoded
 * byte array. For more details about the formats used, see
 * {@link #addPathToName(int type, String name)
 * addPathToName(int type, String name)} and
 * {@link #addPathToName(int type, byte [] name)
 * addPathToName(int type, byte [] name)}.
 * <p>
 * <strong>Note:</strong> for distinguished names, specify the byte
 * array form instead of the String form. See the note in
 * {@link #addPathToName(int, String)} for more information.
 * <p>
 * Note that the {@code names} parameter can contain duplicate
 * names (same name and name type), but they may be removed from the
 * {@code Collection} of names returned by the
 * {@link #getPathToNames getPathToNames} method.
 * <p>
 * Note that a deep copy is performed on the {@code Collection} to
 * protect against subsequent modifications.
 *
 * @param names a {@code Collection} with one entry per name
 *              (or {@code null})
 * @throws IOException if a parsing error occurs
 * @see #getPathToNames
 */
public void setPathToNames(Collection<List<?>> names) throws IOException {
    if ((names == null) || names.isEmpty()) {
        pathToNames = null;
        pathToGeneralNames = null;
    } else {
        Set<List<?>> tempNames = cloneAndCheckNames(names);
        pathToGeneralNames = parseNames(tempNames);
        // Ensure that we either set both of these or neither
        pathToNames = tempNames;
    }
}