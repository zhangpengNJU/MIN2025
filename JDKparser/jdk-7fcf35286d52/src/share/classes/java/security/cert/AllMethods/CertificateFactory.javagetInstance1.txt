/**
 * Returns a certificate factory object for the specified
 * certificate type.
 *
 * <p> A new CertificateFactory object encapsulating the
 * CertificateFactorySpi implementation from the specified provider
 * is returned.  The specified provider must be registered
 * in the security provider list.
 *
 * <p> Note that the list of registered providers may be retrieved via
 * the {@link Security#getProviders() Security.getProviders()} method.
 *
 * @param type the certificate type.
 * See the CertificateFactory section in the <a href=
 * "{@docRoot}/../technotes/guides/security/StandardNames.html#CertificateFactory">
 * Java Cryptography Architecture Standard Algorithm Name Documentation</a>
 * for information about standard certificate types.
 *
 * @param provider the name of the provider.
 *
 * @return a certificate factory object for the specified type.
 *
 * @exception CertificateException if a CertificateFactorySpi
 *          implementation for the specified algorithm is not
 *          available from the specified provider.
 *
 * @exception NoSuchProviderException if the specified provider is not
 *          registered in the security provider list.
 *
 * @exception IllegalArgumentException if the provider name is null
 *          or empty.
 *
 * @see java.security.Provider
 */
public static final CertificateFactory getInstance(String type, String provider) throws CertificateException, NoSuchProviderException {
    try {
        Instance instance = GetInstance.getInstance("CertificateFactory", CertificateFactorySpi.class, type, provider);
        return new CertificateFactory((CertificateFactorySpi) instance.impl, instance.provider, type);
    } catch (NoSuchAlgorithmException e) {
        throw new CertificateException(type + " not found", e);
    }
}