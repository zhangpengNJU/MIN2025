/**
 * Returns a certificate factory object for the specified
 * certificate type.
 *
 * <p> A new CertificateFactory object encapsulating the
 * CertificateFactorySpi implementation from the specified Provider
 * object is returned.  Note that the specified Provider object
 * does not have to be registered in the provider list.
 *
 * @param type the certificate type.
 * See the CertificateFactory section in the <a href=
 * "{@docRoot}/../technotes/guides/security/StandardNames.html#CertificateFactory">
 * Java Cryptography Architecture Standard Algorithm Name Documentation</a>
 * for information about standard certificate types.
 * @param provider the provider.
 *
 * @return a certificate factory object for the specified type.
 *
 * @exception CertificateException if a CertificateFactorySpi
 *          implementation for the specified algorithm is not available
 *          from the specified Provider object.
 *
 * @exception IllegalArgumentException if the {@code provider} is
 *          null.
 *
 * @see java.security.Provider
 *
 * @since 1.4
 */
public static final CertificateFactory getInstance(String type, Provider provider) throws CertificateException {
    try {
        Instance instance = GetInstance.getInstance("CertificateFactory", CertificateFactorySpi.class, type, provider);
        return new CertificateFactory((CertificateFactorySpi) instance.impl, instance.provider, type);
    } catch (NoSuchAlgorithmException e) {
        throw new CertificateException(type + " not found", e);
    }
}