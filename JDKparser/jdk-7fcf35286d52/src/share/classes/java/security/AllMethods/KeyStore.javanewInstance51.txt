/**
 * Returns a new Builder that encapsulates the given KeyStore.
 * The {@linkplain #getKeyStore} method of the returned object
 * will return {@code keyStore}, the {@linkplain
 * #getProtectionParameter getProtectionParameter()} method will
 * return {@code protectionParameters}.
 *
 * <p> This is useful if an existing KeyStore object needs to be
 * used with Builder-based APIs.
 *
 * @return a new Builder object
 * @param keyStore the KeyStore to be encapsulated
 * @param protectionParameter the ProtectionParameter used to
 *   protect the KeyStore entries
 * @throws NullPointerException if keyStore or
 *   protectionParameters is null
 * @throws IllegalArgumentException if the keyStore has not been
 *   initialized
 */
public static Builder newInstance(final KeyStore keyStore, final ProtectionParameter protectionParameter) {
    if ((keyStore == null) || (protectionParameter == null)) {
        throw new NullPointerException();
    }
    if (keyStore.initialized == false) {
        throw new IllegalArgumentException("KeyStore not initialized");
    }
    return new Builder() {

        private volatile boolean getCalled;

        public KeyStore getKeyStore() {
            getCalled = true;
            return keyStore;
        }

        public ProtectionParameter getProtectionParameter(String alias) {
            if (alias == null) {
                throw new NullPointerException();
            }
            if (getCalled == false) {
                throw new IllegalStateException("getKeyStore() must be called first");
            }
            return protectionParameter;
        }
    };
}