/**
 * Returns a new Builder object.
 *
 * <p>Each call to the {@link #getKeyStore} method on the returned
 * builder will return a new KeyStore object of type {@code type}.
 * Its {@link KeyStore#load(KeyStore.LoadStoreParameter) load()}
 * method is invoked using a
 * {@code LoadStoreParameter} that encapsulates
 * {@code protection}.
 *
 * <p>The KeyStore is instantiated from {@code provider} if
 * non-null. Otherwise, all installed providers are searched.
 *
 * <p>Calls to {@link #getProtectionParameter getProtectionParameter()}
 * will return {@code protection}.
 *
 * <p><em>Note</em> that the {@link #getKeyStore} method is executed
 * within the {@link AccessControlContext} of the code invoking this
 * method.
 *
 * @return a new Builder object
 * @param type the type of KeyStore to be constructed
 * @param provider the provider from which the KeyStore is to
 *   be instantiated (or null)
 * @param protection the ProtectionParameter securing the Keystore
 * @throws NullPointerException if type or protection is null
 */
public static Builder newInstance(final String type, final Provider provider, final ProtectionParameter protection) {
    if ((type == null) || (protection == null)) {
        throw new NullPointerException();
    }
    final AccessControlContext context = AccessController.getContext();
    return new Builder() {

        private volatile boolean getCalled;

        private IOException oldException;

        private final PrivilegedExceptionAction<KeyStore> action = new PrivilegedExceptionAction<KeyStore>() {

            public KeyStore run() throws Exception {
                KeyStore ks;
                if (provider == null) {
                    ks = KeyStore.getInstance(type);
                } else {
                    ks = KeyStore.getInstance(type, provider);
                }
                LoadStoreParameter param = new SimpleLoadStoreParameter(protection);
                if (protection instanceof CallbackHandlerProtection == false) {
                    ks.load(param);
                } else {
                    // when using a CallbackHandler,
                    // reprompt if the password is wrong
                    int tries = 0;
                    while (true) {
                        tries++;
                        try {
                            ks.load(param);
                            break;
                        } catch (IOException e) {
                            if (e.getCause() instanceof UnrecoverableKeyException) {
                                if (tries < MAX_CALLBACK_TRIES) {
                                    continue;
                                } else {
                                    oldException = e;
                                }
                            }
                            throw e;
                        }
                    }
                }
                getCalled = true;
                return ks;
            }
        };

        public synchronized KeyStore getKeyStore() throws KeyStoreException {
            if (oldException != null) {
                throw new KeyStoreException("Previous KeyStore instantiation failed", oldException);
            }
            try {
                return AccessController.doPrivileged(action, context);
            } catch (PrivilegedActionException e) {
                Throwable cause = e.getCause();
                throw new KeyStoreException("KeyStore instantiation failed", cause);
            }
        }

        public ProtectionParameter getProtectionParameter(String alias) {
            if (alias == null) {
                throw new NullPointerException();
            }
            if (getCalled == false) {
                throw new IllegalStateException("getKeyStore() must be called first");
            }
            return protection;
        }
    };
}