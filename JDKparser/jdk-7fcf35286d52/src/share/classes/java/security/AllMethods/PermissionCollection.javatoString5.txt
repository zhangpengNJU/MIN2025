/**
 * Returns a string describing this PermissionCollection object,
 * providing information about all the permissions it contains.
 * The format is:
 * <pre>
 * super.toString() (
 *   // enumerate all the Permission
 *   // objects and call toString() on them,
 *   // one per line..
 * )</pre>
 *
 * {@code super.toString} is a call to the {@code toString}
 * method of this
 * object's superclass, which is Object. The result is
 * this PermissionCollection's type name followed by this object's
 * hashcode, thus enabling clients to differentiate different
 * PermissionCollections object, even if they contain the same permissions.
 *
 * @return information about this PermissionCollection object,
 *         as described above.
 */
public String toString() {
    Enumeration<Permission> enum_ = elements();
    StringBuilder sb = new StringBuilder();
    sb.append(super.toString() + " (\n");
    while (enum_.hasMoreElements()) {
        try {
            sb.append(" ");
            sb.append(enum_.nextElement().toString());
            sb.append("\n");
        } catch (NoSuchElementException e) {
        // ignore
        }
    }
    sb.append(")\n");
    return sb.toString();
}