/**
 * Generates a certificate object and initializes it with
 * the data read from the input stream {@code inStream}.
 *
 * <p>In order to take advantage of the specialized certificate format
 * supported by this certificate factory,
 * the returned certificate object can be typecast to the corresponding
 * certificate class. For example, if this certificate
 * factory implements X.509 certificates, the returned certificate object
 * can be typecast to the {@code X509Certificate} class.
 *
 * <p>In the case of a certificate factory for X.509 certificates, the
 * certificate provided in {@code inStream} must be DER-encoded and
 * may be supplied in binary or printable (Base64) encoding. If the
 * certificate is provided in Base64 encoding, it must be bounded at
 * the beginning by -----BEGIN CERTIFICATE-----, and must be bounded at
 * the end by -----END CERTIFICATE-----.
 *
 * <p>Note that if the given input stream does not support
 * {@link java.io.InputStream#mark(int) mark} and
 * {@link java.io.InputStream#reset() reset}, this method will
 * consume the entire input stream. Otherwise, each call to this
 * method consumes one certificate and the read position of the
 * input stream is positioned to the next available byte after
 * the inherent end-of-certificate marker. If the data in the input stream
 * does not contain an inherent end-of-certificate marker (other
 * than EOF) and there is trailing data after the certificate is parsed, a
 * {@code CertificateException} is thrown.
 *
 * @param inStream an input stream with the certificate data.
 *
 * @return a certificate object initialized with the data
 * from the input stream.
 *
 * @exception CertificateException on parsing errors.
 */
public final Certificate generateCertificate(InputStream inStream) throws CertificateException {
    return certFacSpi.engineGenerateCertificate(inStream);
}