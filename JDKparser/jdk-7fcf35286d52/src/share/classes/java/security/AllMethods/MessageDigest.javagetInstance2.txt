/**
 * Returns a MessageDigest object that implements the specified digest
 * algorithm.
 *
 * <p> A new MessageDigest object encapsulating the
 * MessageDigestSpi implementation from the specified Provider
 * object is returned.  Note that the specified Provider object
 * does not have to be registered in the provider list.
 *
 * @param algorithm the name of the algorithm requested.
 * See the MessageDigest section in the <a href=
 * "{@docRoot}/../technotes/guides/security/StandardNames.html#MessageDigest">
 * Java Cryptography Architecture Standard Algorithm Name Documentation</a>
 * for information about standard algorithm names.
 *
 * @param provider the provider.
 *
 * @return a MessageDigest object that implements the specified algorithm.
 *
 * @exception NoSuchAlgorithmException if a MessageDigestSpi
 *          implementation for the specified algorithm is not available
 *          from the specified Provider object.
 *
 * @exception IllegalArgumentException if the specified provider is null.
 *
 * @see Provider
 *
 * @since 1.4
 */
public static MessageDigest getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException {
    if (provider == null)
        throw new IllegalArgumentException("missing provider");
    Object[] objs = Security.getImpl(algorithm, "MessageDigest", provider);
    if (objs[0] instanceof MessageDigest) {
        MessageDigest md = (MessageDigest) objs[0];
        md.provider = (Provider) objs[1];
        return md;
    } else {
        MessageDigest delegate = new Delegate((MessageDigestSpi) objs[0], algorithm);
        delegate.provider = (Provider) objs[1];
        return delegate;
    }
}