/**
 * try and resolve this permission using the class loader of the permission
 * that was passed in.
 */
Permission resolve(Permission p, java.security.cert.Certificate[] certs) {
    if (this.certs != null) {
        // if p wasn't signed, we don't have a match
        if (certs == null) {
            return null;
        }
        // all certs in this.certs must be present in certs
        boolean match;
        for (int i = 0; i < this.certs.length; i++) {
            match = false;
            for (int j = 0; j < certs.length; j++) {
                if (this.certs[i].equals(certs[j])) {
                    match = true;
                    break;
                }
            }
            if (!match)
                return null;
        }
    }
    try {
        Class<?> pc = p.getClass();
        if (name == null && actions == null) {
            try {
                Constructor<?> c = pc.getConstructor(PARAMS0);
                return (Permission) c.newInstance(new Object[] {});
            } catch (NoSuchMethodException ne) {
                try {
                    Constructor<?> c = pc.getConstructor(PARAMS1);
                    return (Permission) c.newInstance(new Object[] { name });
                } catch (NoSuchMethodException ne1) {
                    Constructor<?> c = pc.getConstructor(PARAMS2);
                    return (Permission) c.newInstance(new Object[] { name, actions });
                }
            }
        } else {
            if (name != null && actions == null) {
                try {
                    Constructor<?> c = pc.getConstructor(PARAMS1);
                    return (Permission) c.newInstance(new Object[] { name });
                } catch (NoSuchMethodException ne) {
                    Constructor<?> c = pc.getConstructor(PARAMS2);
                    return (Permission) c.newInstance(new Object[] { name, actions });
                }
            } else {
                Constructor<?> c = pc.getConstructor(PARAMS2);
                return (Permission) c.newInstance(new Object[] { name, actions });
            }
        }
    } catch (NoSuchMethodException nsme) {
        if (debug != null) {
            debug.println("NoSuchMethodException:\n  could not find " + "proper constructor for " + type);
            nsme.printStackTrace();
        }
        return null;
    } catch (Exception e) {
        if (debug != null) {
            debug.println("unable to instantiate " + name);
            e.printStackTrace();
        }
        return null;
    }
}