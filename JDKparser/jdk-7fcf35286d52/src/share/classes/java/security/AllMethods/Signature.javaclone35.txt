/**
 * Returns a clone if the delegate is cloneable.
 *
 * @return a clone if the delegate is cloneable.
 *
 * @exception CloneNotSupportedException if this is called on a
 * delegate that does not support {@code Cloneable}.
 */
public Object clone() throws CloneNotSupportedException {
    chooseFirstProvider();
    if (sigSpi instanceof Cloneable) {
        SignatureSpi sigSpiClone = (SignatureSpi) sigSpi.clone();
        // Because 'algorithm' and 'provider' are private
        // members of our supertype, we must perform a cast to
        // access them.
        Signature that = new Delegate(sigSpiClone, ((Signature) this).algorithm);
        that.provider = ((Signature) this).provider;
        return that;
    } else {
        throw new CloneNotSupportedException();
    }
}