public synchronized KeyStore getKeyStore() throws KeyStoreException {
    if (keyStore != null) {
        return keyStore;
    }
    if (oldException != null) {
        throw new KeyStoreException("Previous KeyStore instantiation failed", oldException);
    }
    PrivilegedExceptionAction<KeyStore> action = new PrivilegedExceptionAction<KeyStore>() {

        public KeyStore run() throws Exception {
            if (protection instanceof CallbackHandlerProtection == false) {
                return run0();
            }
            // when using a CallbackHandler,
            // reprompt if the password is wrong
            int tries = 0;
            while (true) {
                tries++;
                try {
                    return run0();
                } catch (IOException e) {
                    if ((tries < MAX_CALLBACK_TRIES) && (e.getCause() instanceof UnrecoverableKeyException)) {
                        continue;
                    }
                    throw e;
                }
            }
        }

        public KeyStore run0() throws Exception {
            KeyStore ks;
            if (provider == null) {
                ks = KeyStore.getInstance(type);
            } else {
                ks = KeyStore.getInstance(type, provider);
            }
            InputStream in = null;
            char[] password = null;
            try {
                in = new FileInputStream(file);
                if (protection instanceof PasswordProtection) {
                    password = ((PasswordProtection) protection).getPassword();
                    keyProtection = protection;
                } else {
                    CallbackHandler handler = ((CallbackHandlerProtection) protection).getCallbackHandler();
                    PasswordCallback callback = new PasswordCallback("Password for keystore " + file.getName(), false);
                    handler.handle(new Callback[] { callback });
                    password = callback.getPassword();
                    if (password == null) {
                        throw new KeyStoreException("No password" + " provided");
                    }
                    callback.clearPassword();
                    keyProtection = new PasswordProtection(password);
                }
                ks.load(in, password);
                return ks;
            } finally {
                if (in != null) {
                    in.close();
                }
            }
        }
    };
    try {
        keyStore = AccessController.doPrivileged(action, context);
        return keyStore;
    } catch (PrivilegedActionException e) {
        oldException = e.getCause();
        throw new KeyStoreException("KeyStore instantiation failed", oldException);
    }
}