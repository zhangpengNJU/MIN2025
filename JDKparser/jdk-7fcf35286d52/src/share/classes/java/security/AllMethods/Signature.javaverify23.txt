/**
 * Verifies the passed-in signature in the specified array
 * of bytes, starting at the specified offset.
 *
 * <p>A call to this method resets this signature object to the state
 * it was in when previously initialized for verification via a
 * call to {@code initVerify(PublicKey)}. That is, the object is
 * reset and available to verify another signature from the identity
 * whose public key was specified in the call to {@code initVerify}.
 *
 * @param signature the signature bytes to be verified.
 * @param offset the offset to start from in the array of bytes.
 * @param length the number of bytes to use, starting at offset.
 *
 * @return true if the signature was verified, false if not.
 *
 * @exception SignatureException if this signature object is not
 * initialized properly, the passed-in signature is improperly
 * encoded or of the wrong type, if this signature algorithm is unable to
 * process the input data provided, etc.
 * @exception IllegalArgumentException if the {@code signature}
 * byte array is {@code null}, or the {@code offset} or {@code length}
 * is less than 0, or the sum of the {@code offset} and
 * {@code length} is greater than the length of the
 * {@code signature} byte array.
 * @since 1.4
 */
public final boolean verify(byte[] signature, int offset, int length) throws SignatureException {
    if (state == VERIFY) {
        if (signature == null) {
            throw new IllegalArgumentException("signature is null");
        }
        if (offset < 0 || length < 0) {
            throw new IllegalArgumentException("offset or length is less than 0");
        }
        if (signature.length - offset < length) {
            throw new IllegalArgumentException("signature too small for specified offset and length");
        }
        return engineVerify(signature, offset, length);
    }
    throw new SignatureException("object not initialized for " + "verification");
}