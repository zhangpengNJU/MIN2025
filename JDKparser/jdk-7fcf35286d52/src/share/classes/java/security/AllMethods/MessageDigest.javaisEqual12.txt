/**
 * Compares two digests for equality. Does a simple byte compare.
 *
 * @implNote
 * All bytes in {@code digesta} are examined to determine equality.
 * The calculation time depends only on the length of {@code digesta}.
 * It does not depend on the length of {@code digestb} or the contents
 * of {@code digesta} and {@code digestb}.
 *
 * @param digesta one of the digests to compare.
 *
 * @param digestb the other digest to compare.
 *
 * @return true if the digests are equal, false otherwise.
 */
public static boolean isEqual(byte[] digesta, byte[] digestb) {
    if (digesta == digestb)
        return true;
    if (digesta == null || digestb == null) {
        return false;
    }
    int lenA = digesta.length;
    int lenB = digestb.length;
    if (lenB == 0) {
        return lenA == 0;
    }
    int result = 0;
    result |= lenA - lenB;
    // time-constant comparison
    for (int i = 0; i < lenA; i++) {
        // If i >= lenB, indexB is 0; otherwise, i.
        int indexB = ((i - lenB) >>> 31) * i;
        result |= digesta[i] ^ digestb[indexB];
    }
    return result == 0;
}