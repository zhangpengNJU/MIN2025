/**
 * Test whether this Service can use the specified parameter.
 * Returns false if this service cannot use the parameter. Returns
 * true if this service can use the parameter, if a fast test is
 * infeasible, or if the status is unknown.
 *
 * <p>The security provider framework uses this method with
 * some types of services to quickly exclude non-matching
 * implementations for consideration.
 * Applications will typically not need to call it.
 *
 * <p>For details and the values of parameter that are valid for the
 * various types of services see the top of this class and the
 * <a href="../../../technotes/guides/security/crypto/CryptoSpec.html">
 * Java Cryptography Architecture API Specification &amp;
 * Reference</a>.
 * Security providers can override it to implement their own test.
 *
 * @param parameter the parameter to test
 *
 * @return false if this this service cannot use the specified
 * parameter; true if it can possibly use the parameter
 *
 * @throws InvalidParameterException if the value of parameter is
 * invalid for this type of service or if this method cannot be
 * used with this type of service
 */
public boolean supportsParameter(Object parameter) {
    EngineDescription cap = knownEngines.get(type);
    if (cap == null) {
        // unknown engine type, return true by default
        return true;
    }
    if (cap.supportsParameter == false) {
        throw new InvalidParameterException("supportsParameter() not " + "used with " + type + " engines");
    }
    // allow null for keys without attributes for compatibility
    if ((parameter != null) && (parameter instanceof Key == false)) {
        throw new InvalidParameterException("Parameter must be instanceof Key for engine " + type);
    }
    if (hasKeyAttributes() == false) {
        return true;
    }
    if (parameter == null) {
        return false;
    }
    Key key = (Key) parameter;
    if (supportsKeyFormat(key)) {
        return true;
    }
    if (supportsKeyClass(key)) {
        return true;
    }
    return false;
}