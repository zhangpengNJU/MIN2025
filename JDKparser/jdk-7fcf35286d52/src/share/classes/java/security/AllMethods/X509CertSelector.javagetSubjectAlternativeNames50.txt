/**
 * Returns a copy of the subjectAlternativeNames criterion.
 * The {@code X509Certificate} must contain all or at least one
 * of the specified subjectAlternativeNames, depending on the value
 * of the matchAllNames flag (see {@link #getMatchAllSubjectAltNames
 * getMatchAllSubjectAltNames}). If the value returned is
 * {@code null}, no subjectAlternativeNames check will be performed.
 * <p>
 * If the value returned is not {@code null}, it is a
 * {@code Collection} with
 * one entry for each name to be included in the subject alternative name
 * criterion. Each entry is a {@code List} whose first entry is an
 * {@code Integer} (the name type, 0-8) and whose second
 * entry is a {@code String} or a byte array (the name, in
 * string or ASN.1 DER encoded form, respectively).
 * There can be multiple names of the same type.  Note that the
 * {@code Collection} returned may contain duplicate names (same name
 * and name type).
 * <p>
 * Each subject alternative name in the {@code Collection}
 * may be specified either as a {@code String} or as an ASN.1 encoded
 * byte array. For more details about the formats used, see
 * {@link #addSubjectAlternativeName(int type, String name)
 * addSubjectAlternativeName(int type, String name)} and
 * {@link #addSubjectAlternativeName(int type, byte [] name)
 * addSubjectAlternativeName(int type, byte [] name)}.
 * <p>
 * Note that a deep copy is performed on the {@code Collection} to
 * protect against subsequent modifications.
 *
 * @return a {@code Collection} of names (or {@code null})
 * @see #setSubjectAlternativeNames
 */
public Collection<List<?>> getSubjectAlternativeNames() {
    if (subjectAlternativeNames == null) {
        return null;
    }
    return cloneNames(subjectAlternativeNames);
}