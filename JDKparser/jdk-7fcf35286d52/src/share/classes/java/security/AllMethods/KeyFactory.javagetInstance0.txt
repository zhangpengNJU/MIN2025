/**
 * Returns a KeyFactory object that converts
 * public/private keys of the specified algorithm.
 *
 * <p> This method traverses the list of registered security Providers,
 * starting with the most preferred Provider.
 * A new KeyFactory object encapsulating the
 * KeyFactorySpi implementation from the first
 * Provider that supports the specified algorithm is returned.
 *
 * <p> Note that the list of registered providers may be retrieved via
 * the {@link Security#getProviders() Security.getProviders()} method.
 *
 * @param algorithm the name of the requested key algorithm.
 * See the KeyFactory section in the <a href=
 * "{@docRoot}/../technotes/guides/security/StandardNames.html#KeyFactory">
 * Java Cryptography Architecture Standard Algorithm Name Documentation</a>
 * for information about standard algorithm names.
 *
 * @return the new KeyFactory object.
 *
 * @exception NoSuchAlgorithmException if no Provider supports a
 *          KeyFactorySpi implementation for the
 *          specified algorithm.
 *
 * @see Provider
 */
public static KeyFactory getInstance(String algorithm) throws NoSuchAlgorithmException {
    return new KeyFactory(algorithm);
}