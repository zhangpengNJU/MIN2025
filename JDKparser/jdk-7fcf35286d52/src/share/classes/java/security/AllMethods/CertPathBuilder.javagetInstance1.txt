/**
 * Returns a {@code CertPathBuilder} object that implements the
 * specified algorithm.
 *
 * <p> A new CertPathBuilder object encapsulating the
 * CertPathBuilderSpi implementation from the specified provider
 * is returned.  The specified provider must be registered
 * in the security provider list.
 *
 * <p> Note that the list of registered providers may be retrieved via
 * the {@link Security#getProviders() Security.getProviders()} method.
 *
 * @param algorithm the name of the requested {@code CertPathBuilder}
 *  algorithm.  See the CertPathBuilder section in the <a href=
 *  "{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathBuilder">
 * Java Cryptography Architecture Standard Algorithm Name Documentation</a>
 * for information about standard algorithm names.
 *
 * @param provider the name of the provider.
 *
 * @return a {@code CertPathBuilder} object that implements the
 *          specified algorithm.
 *
 * @throws NoSuchAlgorithmException if a CertPathBuilderSpi
 *          implementation for the specified algorithm is not
 *          available from the specified provider.
 *
 * @throws NoSuchProviderException if the specified provider is not
 *          registered in the security provider list.
 *
 * @exception IllegalArgumentException if the {@code provider} is
 *          null or empty.
 *
 * @see java.security.Provider
 */
public static CertPathBuilder getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException {
    Instance instance = GetInstance.getInstance("CertPathBuilder", CertPathBuilderSpi.class, algorithm, provider);
    return new CertPathBuilder((CertPathBuilderSpi) instance.impl, instance.provider, algorithm);
}