/**
 * Returns a new Builder object.
 *
 * <p>The first call to the {@link #getKeyStore} method on the returned
 * builder will create a KeyStore of type {@code type} and call
 * its {@link KeyStore#load load()} method.
 * The {@code inputStream} argument is constructed from
 * {@code file}.
 * If {@code protection} is a
 * {@code PasswordProtection}, the password is obtained by
 * calling the {@code getPassword} method.
 * Otherwise, if {@code protection} is a
 * {@code CallbackHandlerProtection}, the password is obtained
 * by invoking the CallbackHandler.
 *
 * <p>Subsequent calls to {@link #getKeyStore} return the same object
 * as the initial call. If the initial call to failed with a
 * KeyStoreException, subsequent calls also throw a
 * KeyStoreException.
 *
 * <p>The KeyStore is instantiated from {@code provider} if
 * non-null. Otherwise, all installed providers are searched.
 *
 * <p>Calls to {@link #getProtectionParameter getProtectionParameter()}
 * will return a {@link KeyStore.PasswordProtection PasswordProtection}
 * object encapsulating the password that was used to invoke the
 * {@code load} method.
 *
 * <p><em>Note</em> that the {@link #getKeyStore} method is executed
 * within the {@link AccessControlContext} of the code invoking this
 * method.
 *
 * @return a new Builder object
 * @param type the type of KeyStore to be constructed
 * @param provider the provider from which the KeyStore is to
 *   be instantiated (or null)
 * @param file the File that contains the KeyStore data
 * @param protection the ProtectionParameter securing the KeyStore data
 * @throws NullPointerException if type, file or protection is null
 * @throws IllegalArgumentException if protection is not an instance
 *   of either PasswordProtection or CallbackHandlerProtection; or
 *   if file does not exist or does not refer to a normal file
 */
public static Builder newInstance(String type, Provider provider, File file, ProtectionParameter protection) {
    if ((type == null) || (file == null) || (protection == null)) {
        throw new NullPointerException();
    }
    if ((protection instanceof PasswordProtection == false) && (protection instanceof CallbackHandlerProtection == false)) {
        throw new IllegalArgumentException("Protection must be PasswordProtection or " + "CallbackHandlerProtection");
    }
    if (file.isFile() == false) {
        throw new IllegalArgumentException("File does not exist or it does not refer " + "to a normal file: " + file);
    }
    return new FileBuilder(type, provider, file, protection, AccessController.getContext());
}