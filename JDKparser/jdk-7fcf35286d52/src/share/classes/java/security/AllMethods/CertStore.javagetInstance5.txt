/**
 * Returns a {@code CertStore} object that implements the specified
 * {@code CertStore} type.
 *
 * <p> A new CertStore object encapsulating the
 * CertStoreSpi implementation from the specified Provider
 * object is returned.  Note that the specified Provider object
 * does not have to be registered in the provider list.
 *
 * <p>The {@code CertStore} that is returned is initialized with the
 * specified {@code CertStoreParameters}. The type of parameters
 * needed may vary between different types of {@code CertStore}s.
 * Note that the specified {@code CertStoreParameters} object is
 * cloned.
 *
 * @param type the requested {@code CertStore} type.
 * See the CertStore section in the <a href=
 * "{@docRoot}/../technotes/guides/security/StandardNames.html#CertStore">
 * Java Cryptography Architecture Standard Algorithm Name Documentation</a>
 * for information about standard types.
 *
 * @param params the initialization parameters (may be {@code null}).
 *
 * @param provider the provider.
 *
 * @return a {@code CertStore} object that implements the
 *          specified type.
 *
 * @exception NoSuchAlgorithmException if a CertStoreSpi
 *          implementation for the specified type is not available
 *          from the specified Provider object.
 *
 * @throws InvalidAlgorithmParameterException if the specified
 *          initialization parameters are inappropriate for this
 *          {@code CertStore}
 *
 * @exception IllegalArgumentException if the {@code provider} is
 *          null.
 *
 * @see java.security.Provider
 */
public static CertStore getInstance(String type, CertStoreParameters params, Provider provider) throws NoSuchAlgorithmException, InvalidAlgorithmParameterException {
    try {
        Instance instance = GetInstance.getInstance("CertStore", CertStoreSpi.class, type, params, provider);
        return new CertStore((CertStoreSpi) instance.impl, instance.provider, type, params);
    } catch (NoSuchAlgorithmException e) {
        return handleException(e);
    }
}