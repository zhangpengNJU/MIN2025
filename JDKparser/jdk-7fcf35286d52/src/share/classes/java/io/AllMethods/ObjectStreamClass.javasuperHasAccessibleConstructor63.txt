/**
 * Given a class, determines whether its superclass has
 * any constructors that are accessible from the class.
 * This is a special purpose method intended to do access
 * checking for a serializable class and its superclasses
 * up to, but not including, the first non-serializable
 * superclass. This also implies that the superclass is
 * always non-null, because a serializable class must be a
 * class (not an interface) and Object is not serializable.
 *
 * @param cl the class from which access is checked
 * @return whether the superclass has a constructor accessible from cl
 */
private static boolean superHasAccessibleConstructor(Class<?> cl) {
    Class<?> superCl = cl.getSuperclass();
    assert Serializable.class.isAssignableFrom(cl);
    assert superCl != null;
    if (packageEquals(cl, superCl)) {
        // accessible if any non-private constructor is found
        for (Constructor<?> ctor : superCl.getDeclaredConstructors()) {
            if ((ctor.getModifiers() & Modifier.PRIVATE) == 0) {
                return true;
            }
        }
        return false;
    } else {
        // sanity check to ensure the parent is protected or public
        if ((superCl.getModifiers() & (Modifier.PROTECTED | Modifier.PUBLIC)) == 0) {
            return false;
        }
        // accessible if any constructor is protected or public
        for (Constructor<?> ctor : superCl.getDeclaredConstructors()) {
            if ((ctor.getModifiers() & (Modifier.PROTECTED | Modifier.PUBLIC)) != 0) {
                return true;
            }
        }
        return false;
    }
}