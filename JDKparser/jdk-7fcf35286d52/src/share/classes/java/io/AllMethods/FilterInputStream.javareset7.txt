/**
 * Repositions this stream to the position at the time the
 * <code>mark</code> method was last called on this input stream.
 * <p>
 * This method
 * simply performs <code>in.reset()</code>.
 * <p>
 * Stream marks are intended to be used in
 * situations where you need to read ahead a little to see what's in
 * the stream. Often this is most easily done by invoking some
 * general parser. If the stream is of the type handled by the
 * parse, it just chugs along happily. If the stream is not of
 * that type, the parser should toss an exception when it fails.
 * If this happens within readlimit bytes, it allows the outer
 * code to reset the stream and try another parser.
 *
 * @exception  IOException  if the stream has not been marked or if the
 *               mark has been invalidated.
 * @see        java.io.FilterInputStream#in
 * @see        java.io.FilterInputStream#mark(int)
 */
public synchronized void reset() throws IOException {
    in.reset();
}