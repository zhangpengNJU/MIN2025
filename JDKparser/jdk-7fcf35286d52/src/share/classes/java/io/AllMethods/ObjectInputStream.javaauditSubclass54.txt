/**
 * Performs reflective checks on given subclass to verify that it doesn't
 * override security-sensitive non-final methods.  Returns true if subclass
 * is "safe", false otherwise.
 */
private static boolean auditSubclass(final Class<?> subcl) {
    Boolean result = AccessController.doPrivileged(new PrivilegedAction<Boolean>() {

        public Boolean run() {
            for (Class<?> cl = subcl; cl != ObjectInputStream.class; cl = cl.getSuperclass()) {
                try {
                    cl.getDeclaredMethod("readUnshared", (Class[]) null);
                    return Boolean.FALSE;
                } catch (NoSuchMethodException ex) {
                }
                try {
                    cl.getDeclaredMethod("readFields", (Class[]) null);
                    return Boolean.FALSE;
                } catch (NoSuchMethodException ex) {
                }
            }
            return Boolean.TRUE;
        }
    });
    return result.booleanValue();
}