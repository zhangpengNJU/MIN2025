// deprecated in ObjectOutputStream.PutField
public void write(ObjectOutput out) throws IOException {
    /*
             * Applications should *not* use this method to write PutField
             * data, as it will lead to stream corruption if the PutField
             * object writes any primitive data (since block data mode is not
             * unset/set properly, as is done in OOS.writeFields()).  This
             * broken implementation is being retained solely for behavioral
             * compatibility, in order to support applications which use
             * OOS.PutField.write() for writing only non-primitive data.
             *
             * Serialization of unshared objects is not implemented here since
             * it is not necessary for backwards compatibility; also, unshared
             * semantics may not be supported by the given ObjectOutput
             * instance.  Applications which write unshared objects using the
             * PutField API must use OOS.writeFields().
             */
    if (ObjectOutputStream.this != out) {
        throw new IllegalArgumentException("wrong stream");
    }
    out.write(primVals, 0, primVals.length);
    ObjectStreamField[] fields = desc.getFields(false);
    int numPrimFields = fields.length - objVals.length;
    // REMIND: warn if numPrimFields > 0?
    for (int i = 0; i < objVals.length; i++) {
        if (fields[numPrimFields + i].isUnshared()) {
            throw new IOException("cannot write unshared object");
        }
        out.writeObject(objVals[i]);
    }
}