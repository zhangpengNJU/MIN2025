/* -- Filesystem interface -- */
/**
 * List the available filesystem roots.
 *
 * <p> A particular Java platform may support zero or more
 * hierarchically-organized file systems.  Each file system has a
 * {@code root} directory from which all other files in that file system
 * can be reached.  Windows platforms, for example, have a root directory
 * for each active drive; UNIX platforms have a single root directory,
 * namely {@code "/"}.  The set of available filesystem roots is affected
 * by various system-level operations such as the insertion or ejection of
 * removable media and the disconnecting or unmounting of physical or
 * virtual disk drives.
 *
 * <p> This method returns an array of {@code File} objects that denote the
 * root directories of the available filesystem roots.  It is guaranteed
 * that the canonical pathname of any file physically present on the local
 * machine will begin with one of the roots returned by this method.
 *
 * <p> The canonical pathname of a file that resides on some other machine
 * and is accessed via a remote-filesystem protocol such as SMB or NFS may
 * or may not begin with one of the roots returned by this method.  If the
 * pathname of a remote file is syntactically indistinguishable from the
 * pathname of a local file then it will begin with one of the roots
 * returned by this method.  Thus, for example, {@code File} objects
 * denoting the root directories of the mapped network drives of a Windows
 * platform will be returned by this method, while {@code File} objects
 * containing UNC pathnames will not be returned by this method.
 *
 * <p> Unlike most methods in this class, this method does not throw
 * security exceptions.  If a security manager exists and its {@link
 * SecurityManager#checkRead(String)} method denies read access to a
 * particular root directory, then that directory will not appear in the
 * result.
 *
 * @return  An array of {@code File} objects denoting the available
 *          filesystem roots, or {@code null} if the set of roots could not
 *          be determined.  The array will be empty if there are no
 *          filesystem roots.
 *
 * @since  1.2
 * @see java.nio.file.FileStore
 */
public static File[] listRoots() {
    return fs.listRoots();
}