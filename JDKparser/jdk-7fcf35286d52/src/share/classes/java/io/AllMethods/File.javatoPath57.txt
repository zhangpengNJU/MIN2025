/**
 * Returns a {@link Path java.nio.file.Path} object constructed from the
 * this abstract path. The resulting {@code Path} is associated with the
 * {@link java.nio.file.FileSystems#getDefault default-filesystem}.
 *
 * <p> The first invocation of this method works as if invoking it were
 * equivalent to evaluating the expression:
 * <blockquote><pre>
 * {@link java.nio.file.FileSystems#getDefault FileSystems.getDefault}().{@link
 * java.nio.file.FileSystem#getPath getPath}(this.{@link #getPath getPath}());
 * </pre></blockquote>
 * Subsequent invocations of this method return the same {@code Path}.
 *
 * <p> If this abstract pathname is the empty abstract pathname then this
 * method returns a {@code Path} that may be used to access the current
 * user directory.
 *
 * @return  a {@code Path} constructed from this abstract path
 *
 * @throws  java.nio.file.InvalidPathException
 *          if a {@code Path} object cannot be constructed from the abstract
 *          path (see {@link java.nio.file.FileSystem#getPath FileSystem.getPath})
 *
 * @since   1.7
 * @see Path#toFile
 */
public Path toPath() {
    Path result = filePath;
    if (result == null) {
        synchronized (this) {
            result = filePath;
            if (result == null) {
                result = FileSystems.getDefault().getPath(path);
                filePath = result;
            }
        }
    }
    return result;
}